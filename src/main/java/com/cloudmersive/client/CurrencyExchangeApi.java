/*
 * currencyapi
 * The currency APIs help you retrieve exchange rates and convert prices between currencies easily.
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.cloudmersive.client;

import com.cloudmersive.client.invoker.ApiCallback;
import com.cloudmersive.client.invoker.ApiClient;
import com.cloudmersive.client.invoker.ApiException;
import com.cloudmersive.client.invoker.ApiResponse;
import com.cloudmersive.client.invoker.Configuration;
import com.cloudmersive.client.invoker.Pair;
import com.cloudmersive.client.invoker.ProgressRequestBody;
import com.cloudmersive.client.invoker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.cloudmersive.client.model.AvailableCurrencyResponse;
import com.cloudmersive.client.model.ConvertedCurrencyResult;
import com.cloudmersive.client.model.ExchangeRateResult;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CurrencyExchangeApi {
    private ApiClient apiClient;

    public CurrencyExchangeApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CurrencyExchangeApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for currencyExchangeConvertCurrency
     * @param source Source currency three-digit code (ISO 4217), e.g. USD, EUR, etc. (required)
     * @param destination Destination currency three-digit code (ISO 4217), e.g. USD, EUR, etc. (required)
     * @param sourcePrice Input price, such as 19.99 in source currency (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call currencyExchangeConvertCurrencyCall(String source, String destination, Double sourcePrice, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = sourcePrice;

        // create path and map variables
        String localVarPath = "/currency/exchange-rates/convert/{source}/to/{destination}"
            .replaceAll("\\{" + "source" + "\\}", apiClient.escapeString(source.toString()))
            .replaceAll("\\{" + "destination" + "\\}", apiClient.escapeString(destination.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Apikey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call currencyExchangeConvertCurrencyValidateBeforeCall(String source, String destination, Double sourcePrice, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'source' is set
        if (source == null) {
            throw new ApiException("Missing the required parameter 'source' when calling currencyExchangeConvertCurrency(Async)");
        }
        
        // verify the required parameter 'destination' is set
        if (destination == null) {
            throw new ApiException("Missing the required parameter 'destination' when calling currencyExchangeConvertCurrency(Async)");
        }
        
        // verify the required parameter 'sourcePrice' is set
        if (sourcePrice == null) {
            throw new ApiException("Missing the required parameter 'sourcePrice' when calling currencyExchangeConvertCurrency(Async)");
        }
        

        com.squareup.okhttp.Call call = currencyExchangeConvertCurrencyCall(source, destination, sourcePrice, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Converts a price from the source currency into the destination currency
     * Automatically converts the price in the source currency into the destination currency using the latest available currency exchange rate data.
     * @param source Source currency three-digit code (ISO 4217), e.g. USD, EUR, etc. (required)
     * @param destination Destination currency three-digit code (ISO 4217), e.g. USD, EUR, etc. (required)
     * @param sourcePrice Input price, such as 19.99 in source currency (required)
     * @return ConvertedCurrencyResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ConvertedCurrencyResult currencyExchangeConvertCurrency(String source, String destination, Double sourcePrice) throws ApiException {
        ApiResponse<ConvertedCurrencyResult> resp = currencyExchangeConvertCurrencyWithHttpInfo(source, destination, sourcePrice);
        return resp.getData();
    }

    /**
     * Converts a price from the source currency into the destination currency
     * Automatically converts the price in the source currency into the destination currency using the latest available currency exchange rate data.
     * @param source Source currency three-digit code (ISO 4217), e.g. USD, EUR, etc. (required)
     * @param destination Destination currency three-digit code (ISO 4217), e.g. USD, EUR, etc. (required)
     * @param sourcePrice Input price, such as 19.99 in source currency (required)
     * @return ApiResponse&lt;ConvertedCurrencyResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ConvertedCurrencyResult> currencyExchangeConvertCurrencyWithHttpInfo(String source, String destination, Double sourcePrice) throws ApiException {
        com.squareup.okhttp.Call call = currencyExchangeConvertCurrencyValidateBeforeCall(source, destination, sourcePrice, null, null);
        Type localVarReturnType = new TypeToken<ConvertedCurrencyResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Converts a price from the source currency into the destination currency (asynchronously)
     * Automatically converts the price in the source currency into the destination currency using the latest available currency exchange rate data.
     * @param source Source currency three-digit code (ISO 4217), e.g. USD, EUR, etc. (required)
     * @param destination Destination currency three-digit code (ISO 4217), e.g. USD, EUR, etc. (required)
     * @param sourcePrice Input price, such as 19.99 in source currency (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call currencyExchangeConvertCurrencyAsync(String source, String destination, Double sourcePrice, final ApiCallback<ConvertedCurrencyResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = currencyExchangeConvertCurrencyValidateBeforeCall(source, destination, sourcePrice, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ConvertedCurrencyResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for currencyExchangeGetAvailableCurrencies
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call currencyExchangeGetAvailableCurrenciesCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/currency/exchange-rates/list-available";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Apikey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call currencyExchangeGetAvailableCurrenciesValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = currencyExchangeGetAvailableCurrenciesCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a list of available currencies and corresponding countries
     * Enumerates available currencies and the countries that correspond to these currencies.
     * @return AvailableCurrencyResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AvailableCurrencyResponse currencyExchangeGetAvailableCurrencies() throws ApiException {
        ApiResponse<AvailableCurrencyResponse> resp = currencyExchangeGetAvailableCurrenciesWithHttpInfo();
        return resp.getData();
    }

    /**
     * Get a list of available currencies and corresponding countries
     * Enumerates available currencies and the countries that correspond to these currencies.
     * @return ApiResponse&lt;AvailableCurrencyResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AvailableCurrencyResponse> currencyExchangeGetAvailableCurrenciesWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = currencyExchangeGetAvailableCurrenciesValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<AvailableCurrencyResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a list of available currencies and corresponding countries (asynchronously)
     * Enumerates available currencies and the countries that correspond to these currencies.
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call currencyExchangeGetAvailableCurrenciesAsync(final ApiCallback<AvailableCurrencyResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = currencyExchangeGetAvailableCurrenciesValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AvailableCurrencyResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for currencyExchangeGetExchangeRate
     * @param source Source currency three-digit code (ISO 4217), e.g. USD, EUR, etc. (required)
     * @param destination Destination currency three-digit code (ISO 4217), e.g. USD, EUR, etc. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call currencyExchangeGetExchangeRateCall(String source, String destination, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/currency/exchange-rates/get/{source}/to/{destination}"
            .replaceAll("\\{" + "source" + "\\}", apiClient.escapeString(source.toString()))
            .replaceAll("\\{" + "destination" + "\\}", apiClient.escapeString(destination.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Apikey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call currencyExchangeGetExchangeRateValidateBeforeCall(String source, String destination, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'source' is set
        if (source == null) {
            throw new ApiException("Missing the required parameter 'source' when calling currencyExchangeGetExchangeRate(Async)");
        }
        
        // verify the required parameter 'destination' is set
        if (destination == null) {
            throw new ApiException("Missing the required parameter 'destination' when calling currencyExchangeGetExchangeRate(Async)");
        }
        

        com.squareup.okhttp.Call call = currencyExchangeGetExchangeRateCall(source, destination, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Gets the exchange rate from the source currency into the destination currency
     * Automatically gets the exchange rate from the source currency into the destination currency using the latest available currency exchange rate data.
     * @param source Source currency three-digit code (ISO 4217), e.g. USD, EUR, etc. (required)
     * @param destination Destination currency three-digit code (ISO 4217), e.g. USD, EUR, etc. (required)
     * @return ExchangeRateResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ExchangeRateResult currencyExchangeGetExchangeRate(String source, String destination) throws ApiException {
        ApiResponse<ExchangeRateResult> resp = currencyExchangeGetExchangeRateWithHttpInfo(source, destination);
        return resp.getData();
    }

    /**
     * Gets the exchange rate from the source currency into the destination currency
     * Automatically gets the exchange rate from the source currency into the destination currency using the latest available currency exchange rate data.
     * @param source Source currency three-digit code (ISO 4217), e.g. USD, EUR, etc. (required)
     * @param destination Destination currency three-digit code (ISO 4217), e.g. USD, EUR, etc. (required)
     * @return ApiResponse&lt;ExchangeRateResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ExchangeRateResult> currencyExchangeGetExchangeRateWithHttpInfo(String source, String destination) throws ApiException {
        com.squareup.okhttp.Call call = currencyExchangeGetExchangeRateValidateBeforeCall(source, destination, null, null);
        Type localVarReturnType = new TypeToken<ExchangeRateResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets the exchange rate from the source currency into the destination currency (asynchronously)
     * Automatically gets the exchange rate from the source currency into the destination currency using the latest available currency exchange rate data.
     * @param source Source currency three-digit code (ISO 4217), e.g. USD, EUR, etc. (required)
     * @param destination Destination currency three-digit code (ISO 4217), e.g. USD, EUR, etc. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call currencyExchangeGetExchangeRateAsync(String source, String destination, final ApiCallback<ExchangeRateResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = currencyExchangeGetExchangeRateValidateBeforeCall(source, destination, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ExchangeRateResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
