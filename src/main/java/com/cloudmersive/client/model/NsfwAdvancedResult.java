/*
 * imageapi
 * Image Recognition and Processing APIs let you use Machine Learning to recognize and process images, and also perform useful image modification operations.
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.cloudmersive.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * Result of an Advanced NSFW classification
 */
@ApiModel(description = "Result of an Advanced NSFW classification")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2025-08-03T08:43:49.468Z")
public class NsfwAdvancedResult {
  @SerializedName("Successful")
  private Boolean successful = null;

  @SerializedName("CleanResult")
  private Boolean cleanResult = null;

  @SerializedName("ContainsNudity")
  private Boolean containsNudity = null;

  @SerializedName("ContainsGraphicViolence")
  private Boolean containsGraphicViolence = null;

  @SerializedName("ContainsNonGraphicViolence")
  private Boolean containsNonGraphicViolence = null;

  @SerializedName("ContainsSelfHarm")
  private Boolean containsSelfHarm = null;

  @SerializedName("ContainsHate")
  private Boolean containsHate = null;

  @SerializedName("ContainsPotentialIllegalActivity")
  private Boolean containsPotentialIllegalActivity = null;

  @SerializedName("ContainsMedicalImagery")
  private Boolean containsMedicalImagery = null;

  @SerializedName("ContainsProfanity")
  private Boolean containsProfanity = null;

  @SerializedName("Score")
  private Double score = null;

  @SerializedName("ClassificationOutcome")
  private String classificationOutcome = null;

  public NsfwAdvancedResult successful(Boolean successful) {
    this.successful = successful;
    return this;
  }

   /**
   * True if the classification was successfully run, false otherwise
   * @return successful
  **/
  @ApiModelProperty(value = "True if the classification was successfully run, false otherwise")
  public Boolean isSuccessful() {
    return successful;
  }

  public void setSuccessful(Boolean successful) {
    this.successful = successful;
  }

  public NsfwAdvancedResult cleanResult(Boolean cleanResult) {
    this.cleanResult = cleanResult;
    return this;
  }

   /**
   * True if the result was clean, false otherwise
   * @return cleanResult
  **/
  @ApiModelProperty(value = "True if the result was clean, false otherwise")
  public Boolean isCleanResult() {
    return cleanResult;
  }

  public void setCleanResult(Boolean cleanResult) {
    this.cleanResult = cleanResult;
  }

  public NsfwAdvancedResult containsNudity(Boolean containsNudity) {
    this.containsNudity = containsNudity;
    return this;
  }

   /**
   * True if the image contains nudity or sex, false otherwise
   * @return containsNudity
  **/
  @ApiModelProperty(value = "True if the image contains nudity or sex, false otherwise")
  public Boolean isContainsNudity() {
    return containsNudity;
  }

  public void setContainsNudity(Boolean containsNudity) {
    this.containsNudity = containsNudity;
  }

  public NsfwAdvancedResult containsGraphicViolence(Boolean containsGraphicViolence) {
    this.containsGraphicViolence = containsGraphicViolence;
    return this;
  }

   /**
   * True if the image contains graphic violence and/or gore, false otherwise
   * @return containsGraphicViolence
  **/
  @ApiModelProperty(value = "True if the image contains graphic violence and/or gore, false otherwise")
  public Boolean isContainsGraphicViolence() {
    return containsGraphicViolence;
  }

  public void setContainsGraphicViolence(Boolean containsGraphicViolence) {
    this.containsGraphicViolence = containsGraphicViolence;
  }

  public NsfwAdvancedResult containsNonGraphicViolence(Boolean containsNonGraphicViolence) {
    this.containsNonGraphicViolence = containsNonGraphicViolence;
    return this;
  }

   /**
   * True if the image contains non-graphic violence, e.g. weapons, false otherwise
   * @return containsNonGraphicViolence
  **/
  @ApiModelProperty(value = "True if the image contains non-graphic violence, e.g. weapons, false otherwise")
  public Boolean isContainsNonGraphicViolence() {
    return containsNonGraphicViolence;
  }

  public void setContainsNonGraphicViolence(Boolean containsNonGraphicViolence) {
    this.containsNonGraphicViolence = containsNonGraphicViolence;
  }

  public NsfwAdvancedResult containsSelfHarm(Boolean containsSelfHarm) {
    this.containsSelfHarm = containsSelfHarm;
    return this;
  }

   /**
   * True if the image contains self-harm or suicide imagery, false otherwise
   * @return containsSelfHarm
  **/
  @ApiModelProperty(value = "True if the image contains self-harm or suicide imagery, false otherwise")
  public Boolean isContainsSelfHarm() {
    return containsSelfHarm;
  }

  public void setContainsSelfHarm(Boolean containsSelfHarm) {
    this.containsSelfHarm = containsSelfHarm;
  }

  public NsfwAdvancedResult containsHate(Boolean containsHate) {
    this.containsHate = containsHate;
    return this;
  }

   /**
   * True if the image contains hate, false otherwise
   * @return containsHate
  **/
  @ApiModelProperty(value = "True if the image contains hate, false otherwise")
  public Boolean isContainsHate() {
    return containsHate;
  }

  public void setContainsHate(Boolean containsHate) {
    this.containsHate = containsHate;
  }

  public NsfwAdvancedResult containsPotentialIllegalActivity(Boolean containsPotentialIllegalActivity) {
    this.containsPotentialIllegalActivity = containsPotentialIllegalActivity;
    return this;
  }

   /**
   * True if the image contains potentially illegal activity such as drugs, false otherwise
   * @return containsPotentialIllegalActivity
  **/
  @ApiModelProperty(value = "True if the image contains potentially illegal activity such as drugs, false otherwise")
  public Boolean isContainsPotentialIllegalActivity() {
    return containsPotentialIllegalActivity;
  }

  public void setContainsPotentialIllegalActivity(Boolean containsPotentialIllegalActivity) {
    this.containsPotentialIllegalActivity = containsPotentialIllegalActivity;
  }

  public NsfwAdvancedResult containsMedicalImagery(Boolean containsMedicalImagery) {
    this.containsMedicalImagery = containsMedicalImagery;
    return this;
  }

   /**
   * True if the image contains medical imagery, false otherwise
   * @return containsMedicalImagery
  **/
  @ApiModelProperty(value = "True if the image contains medical imagery, false otherwise")
  public Boolean isContainsMedicalImagery() {
    return containsMedicalImagery;
  }

  public void setContainsMedicalImagery(Boolean containsMedicalImagery) {
    this.containsMedicalImagery = containsMedicalImagery;
  }

  public NsfwAdvancedResult containsProfanity(Boolean containsProfanity) {
    this.containsProfanity = containsProfanity;
    return this;
  }

   /**
   * True if the image contains profanity or obscenities, false otherwise
   * @return containsProfanity
  **/
  @ApiModelProperty(value = "True if the image contains profanity or obscenities, false otherwise")
  public Boolean isContainsProfanity() {
    return containsProfanity;
  }

  public void setContainsProfanity(Boolean containsProfanity) {
    this.containsProfanity = containsProfanity;
  }

  public NsfwAdvancedResult score(Double score) {
    this.score = score;
    return this;
  }

   /**
   * Score between 0.0 and 1.0.  Scores of 0.0-0.2 represent high probability safe content, while scores 0.8-1.0 represent high probability unsafe content.  Content between 0.2 and 0.8 is of increasing raciness.
   * @return score
  **/
  @ApiModelProperty(value = "Score between 0.0 and 1.0.  Scores of 0.0-0.2 represent high probability safe content, while scores 0.8-1.0 represent high probability unsafe content.  Content between 0.2 and 0.8 is of increasing raciness.")
  public Double getScore() {
    return score;
  }

  public void setScore(Double score) {
    this.score = score;
  }

  public NsfwAdvancedResult classificationOutcome(String classificationOutcome) {
    this.classificationOutcome = classificationOutcome;
    return this;
  }

   /**
   * Classification result into four categories: SafeContent_HighProbability, UnsafeContent_HighProbability, RacyContent, SafeContent_ModerateProbability
   * @return classificationOutcome
  **/
  @ApiModelProperty(value = "Classification result into four categories: SafeContent_HighProbability, UnsafeContent_HighProbability, RacyContent, SafeContent_ModerateProbability")
  public String getClassificationOutcome() {
    return classificationOutcome;
  }

  public void setClassificationOutcome(String classificationOutcome) {
    this.classificationOutcome = classificationOutcome;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NsfwAdvancedResult nsfwAdvancedResult = (NsfwAdvancedResult) o;
    return Objects.equals(this.successful, nsfwAdvancedResult.successful) &&
        Objects.equals(this.cleanResult, nsfwAdvancedResult.cleanResult) &&
        Objects.equals(this.containsNudity, nsfwAdvancedResult.containsNudity) &&
        Objects.equals(this.containsGraphicViolence, nsfwAdvancedResult.containsGraphicViolence) &&
        Objects.equals(this.containsNonGraphicViolence, nsfwAdvancedResult.containsNonGraphicViolence) &&
        Objects.equals(this.containsSelfHarm, nsfwAdvancedResult.containsSelfHarm) &&
        Objects.equals(this.containsHate, nsfwAdvancedResult.containsHate) &&
        Objects.equals(this.containsPotentialIllegalActivity, nsfwAdvancedResult.containsPotentialIllegalActivity) &&
        Objects.equals(this.containsMedicalImagery, nsfwAdvancedResult.containsMedicalImagery) &&
        Objects.equals(this.containsProfanity, nsfwAdvancedResult.containsProfanity) &&
        Objects.equals(this.score, nsfwAdvancedResult.score) &&
        Objects.equals(this.classificationOutcome, nsfwAdvancedResult.classificationOutcome);
  }

  @Override
  public int hashCode() {
    return Objects.hash(successful, cleanResult, containsNudity, containsGraphicViolence, containsNonGraphicViolence, containsSelfHarm, containsHate, containsPotentialIllegalActivity, containsMedicalImagery, containsProfanity, score, classificationOutcome);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NsfwAdvancedResult {\n");
    
    sb.append("    successful: ").append(toIndentedString(successful)).append("\n");
    sb.append("    cleanResult: ").append(toIndentedString(cleanResult)).append("\n");
    sb.append("    containsNudity: ").append(toIndentedString(containsNudity)).append("\n");
    sb.append("    containsGraphicViolence: ").append(toIndentedString(containsGraphicViolence)).append("\n");
    sb.append("    containsNonGraphicViolence: ").append(toIndentedString(containsNonGraphicViolence)).append("\n");
    sb.append("    containsSelfHarm: ").append(toIndentedString(containsSelfHarm)).append("\n");
    sb.append("    containsHate: ").append(toIndentedString(containsHate)).append("\n");
    sb.append("    containsPotentialIllegalActivity: ").append(toIndentedString(containsPotentialIllegalActivity)).append("\n");
    sb.append("    containsMedicalImagery: ").append(toIndentedString(containsMedicalImagery)).append("\n");
    sb.append("    containsProfanity: ").append(toIndentedString(containsProfanity)).append("\n");
    sb.append("    score: ").append(toIndentedString(score)).append("\n");
    sb.append("    classificationOutcome: ").append(toIndentedString(classificationOutcome)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

