/*
 * convertapi
 * Convert API lets you effortlessly convert file formats and types.
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.cloudmersive.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * Request to edit a document comprised of chunks
 */
@ApiModel(description = "Request to edit a document comprised of chunks")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2025-06-01T04:19:55.394Z")
public class BeginEditingChunkRequest {
  @SerializedName("DocumentID")
  private String documentID = null;

  @SerializedName("Base64EncodedChunk")
  private String base64EncodedChunk = null;

  @SerializedName("ChunkIndex")
  private Integer chunkIndex = null;

  @SerializedName("ChunkTotalCount")
  private Integer chunkTotalCount = null;

  public BeginEditingChunkRequest documentID(String documentID) {
    this.documentID = documentID;
    return this;
  }

   /**
   * Unique ID for this transaction or document
   * @return documentID
  **/
  @ApiModelProperty(value = "Unique ID for this transaction or document")
  public String getDocumentID() {
    return documentID;
  }

  public void setDocumentID(String documentID) {
    this.documentID = documentID;
  }

  public BeginEditingChunkRequest base64EncodedChunk(String base64EncodedChunk) {
    this.base64EncodedChunk = base64EncodedChunk;
    return this;
  }

   /**
   * The base64-encoded string content for this chunk
   * @return base64EncodedChunk
  **/
  @ApiModelProperty(value = "The base64-encoded string content for this chunk")
  public String getBase64EncodedChunk() {
    return base64EncodedChunk;
  }

  public void setBase64EncodedChunk(String base64EncodedChunk) {
    this.base64EncodedChunk = base64EncodedChunk;
  }

  public BeginEditingChunkRequest chunkIndex(Integer chunkIndex) {
    this.chunkIndex = chunkIndex;
    return this;
  }

   /**
   * The 0-based index of this chunk
   * @return chunkIndex
  **/
  @ApiModelProperty(value = "The 0-based index of this chunk")
  public Integer getChunkIndex() {
    return chunkIndex;
  }

  public void setChunkIndex(Integer chunkIndex) {
    this.chunkIndex = chunkIndex;
  }

  public BeginEditingChunkRequest chunkTotalCount(Integer chunkTotalCount) {
    this.chunkTotalCount = chunkTotalCount;
    return this;
  }

   /**
   * Total number of chunks
   * @return chunkTotalCount
  **/
  @ApiModelProperty(value = "Total number of chunks")
  public Integer getChunkTotalCount() {
    return chunkTotalCount;
  }

  public void setChunkTotalCount(Integer chunkTotalCount) {
    this.chunkTotalCount = chunkTotalCount;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BeginEditingChunkRequest beginEditingChunkRequest = (BeginEditingChunkRequest) o;
    return Objects.equals(this.documentID, beginEditingChunkRequest.documentID) &&
        Objects.equals(this.base64EncodedChunk, beginEditingChunkRequest.base64EncodedChunk) &&
        Objects.equals(this.chunkIndex, beginEditingChunkRequest.chunkIndex) &&
        Objects.equals(this.chunkTotalCount, beginEditingChunkRequest.chunkTotalCount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(documentID, base64EncodedChunk, chunkIndex, chunkTotalCount);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BeginEditingChunkRequest {\n");
    
    sb.append("    documentID: ").append(toIndentedString(documentID)).append("\n");
    sb.append("    base64EncodedChunk: ").append(toIndentedString(base64EncodedChunk)).append("\n");
    sb.append("    chunkIndex: ").append(toIndentedString(chunkIndex)).append("\n");
    sb.append("    chunkTotalCount: ").append(toIndentedString(chunkTotalCount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

