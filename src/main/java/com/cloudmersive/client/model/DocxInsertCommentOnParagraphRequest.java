/*
 * convertapi
 * Convert API lets you effortlessly convert file formats and types.
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.cloudmersive.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.cloudmersive.client.model.DocxComment;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * Input to a Insert Comment on Paragraph request
 */
@ApiModel(description = "Input to a Insert Comment on Paragraph request")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2022-09-11T01:19:39.601-07:00")
public class DocxInsertCommentOnParagraphRequest {
  @SerializedName("InputFileBytes")
  private byte[] inputFileBytes = null;

  @SerializedName("InputFileUrl")
  private String inputFileUrl = null;

  @SerializedName("ParagraphPath")
  private String paragraphPath = null;

  @SerializedName("CommentToInsert")
  private DocxComment commentToInsert = null;

  public DocxInsertCommentOnParagraphRequest inputFileBytes(byte[] inputFileBytes) {
    this.inputFileBytes = inputFileBytes;
    return this;
  }

   /**
   * Optional: Bytes of the input file to operate on
   * @return inputFileBytes
  **/
  @ApiModelProperty(value = "Optional: Bytes of the input file to operate on")
  public byte[] getInputFileBytes() {
    return inputFileBytes;
  }

  public void setInputFileBytes(byte[] inputFileBytes) {
    this.inputFileBytes = inputFileBytes;
  }

  public DocxInsertCommentOnParagraphRequest inputFileUrl(String inputFileUrl) {
    this.inputFileUrl = inputFileUrl;
    return this;
  }

   /**
   * Optional: URL of a file to operate on as input.  This can be a public URL, or you can also use the begin-editing API to upload a document and pass in the secure URL result from that operation as the URL here (this URL is not public).
   * @return inputFileUrl
  **/
  @ApiModelProperty(value = "Optional: URL of a file to operate on as input.  This can be a public URL, or you can also use the begin-editing API to upload a document and pass in the secure URL result from that operation as the URL here (this URL is not public).")
  public String getInputFileUrl() {
    return inputFileUrl;
  }

  public void setInputFileUrl(String inputFileUrl) {
    this.inputFileUrl = inputFileUrl;
  }

  public DocxInsertCommentOnParagraphRequest paragraphPath(String paragraphPath) {
    this.paragraphPath = paragraphPath;
    return this;
  }

   /**
   * Path to the paragraph to attach the comment to.  You can get the Path by retrieving all of the Paragraphs in document by calling Get Body and taking the Path property of the desired paragraph to add the comment to.
   * @return paragraphPath
  **/
  @ApiModelProperty(value = "Path to the paragraph to attach the comment to.  You can get the Path by retrieving all of the Paragraphs in document by calling Get Body and taking the Path property of the desired paragraph to add the comment to.")
  public String getParagraphPath() {
    return paragraphPath;
  }

  public void setParagraphPath(String paragraphPath) {
    this.paragraphPath = paragraphPath;
  }

  public DocxInsertCommentOnParagraphRequest commentToInsert(DocxComment commentToInsert) {
    this.commentToInsert = commentToInsert;
    return this;
  }

   /**
   * Comment to insert
   * @return commentToInsert
  **/
  @ApiModelProperty(value = "Comment to insert")
  public DocxComment getCommentToInsert() {
    return commentToInsert;
  }

  public void setCommentToInsert(DocxComment commentToInsert) {
    this.commentToInsert = commentToInsert;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DocxInsertCommentOnParagraphRequest docxInsertCommentOnParagraphRequest = (DocxInsertCommentOnParagraphRequest) o;
    return Arrays.equals(this.inputFileBytes, docxInsertCommentOnParagraphRequest.inputFileBytes) &&
        Objects.equals(this.inputFileUrl, docxInsertCommentOnParagraphRequest.inputFileUrl) &&
        Objects.equals(this.paragraphPath, docxInsertCommentOnParagraphRequest.paragraphPath) &&
        Objects.equals(this.commentToInsert, docxInsertCommentOnParagraphRequest.commentToInsert);
  }

  @Override
  public int hashCode() {
    return Objects.hash(Arrays.hashCode(inputFileBytes), inputFileUrl, paragraphPath, commentToInsert);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DocxInsertCommentOnParagraphRequest {\n");
    
    sb.append("    inputFileBytes: ").append(toIndentedString(inputFileBytes)).append("\n");
    sb.append("    inputFileUrl: ").append(toIndentedString(inputFileUrl)).append("\n");
    sb.append("    paragraphPath: ").append(toIndentedString(paragraphPath)).append("\n");
    sb.append("    commentToInsert: ").append(toIndentedString(commentToInsert)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

