/*
 * convertapi
 * Convert API lets you effortlessly convert file formats and types.
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.cloudmersive.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * Result of getting the page layout information of a PowerPoint PPTX presentation
 */
@ApiModel(description = "Result of getting the page layout information of a PowerPoint PPTX presentation")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2023-12-10T14:01:38.370-08:00")
public class PptxPageLayoutInformation {
  @SerializedName("Successful")
  private Boolean successful = null;

  @SerializedName("Orientation")
  private String orientation = null;

  @SerializedName("Width")
  private Integer width = null;

  @SerializedName("Height")
  private Integer height = null;

  public PptxPageLayoutInformation successful(Boolean successful) {
    this.successful = successful;
    return this;
  }

   /**
   * True if successful, false otherwise
   * @return successful
  **/
  @ApiModelProperty(value = "True if successful, false otherwise")
  public Boolean isSuccessful() {
    return successful;
  }

  public void setSuccessful(Boolean successful) {
    this.successful = successful;
  }

  public PptxPageLayoutInformation orientation(String orientation) {
    this.orientation = orientation;
    return this;
  }

   /**
   * Orientation of the presentation, either portrait or landscape
   * @return orientation
  **/
  @ApiModelProperty(value = "Orientation of the presentation, either portrait or landscape")
  public String getOrientation() {
    return orientation;
  }

  public void setOrientation(String orientation) {
    this.orientation = orientation;
  }

  public PptxPageLayoutInformation width(Integer width) {
    this.width = width;
    return this;
  }

   /**
   * Width of the presentation in Emu, where 1 inch equals 914400 emu.
   * @return width
  **/
  @ApiModelProperty(value = "Width of the presentation in Emu, where 1 inch equals 914400 emu.")
  public Integer getWidth() {
    return width;
  }

  public void setWidth(Integer width) {
    this.width = width;
  }

  public PptxPageLayoutInformation height(Integer height) {
    this.height = height;
    return this;
  }

   /**
   * Height of the presentation in Emu, where 1 inch equals 914400 emu.
   * @return height
  **/
  @ApiModelProperty(value = "Height of the presentation in Emu, where 1 inch equals 914400 emu.")
  public Integer getHeight() {
    return height;
  }

  public void setHeight(Integer height) {
    this.height = height;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PptxPageLayoutInformation pptxPageLayoutInformation = (PptxPageLayoutInformation) o;
    return Objects.equals(this.successful, pptxPageLayoutInformation.successful) &&
        Objects.equals(this.orientation, pptxPageLayoutInformation.orientation) &&
        Objects.equals(this.width, pptxPageLayoutInformation.width) &&
        Objects.equals(this.height, pptxPageLayoutInformation.height);
  }

  @Override
  public int hashCode() {
    return Objects.hash(successful, orientation, width, height);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PptxPageLayoutInformation {\n");
    
    sb.append("    successful: ").append(toIndentedString(successful)).append("\n");
    sb.append("    orientation: ").append(toIndentedString(orientation)).append("\n");
    sb.append("    width: ").append(toIndentedString(width)).append("\n");
    sb.append("    height: ").append(toIndentedString(height)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

