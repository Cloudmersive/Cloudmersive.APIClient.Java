/*
 * securityapi
 * The security APIs help you detect and block security threats.
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.cloudmersive.client;

import com.cloudmersive.client.invoker.ApiCallback;
import com.cloudmersive.client.invoker.ApiClient;
import com.cloudmersive.client.invoker.ApiException;
import com.cloudmersive.client.invoker.ApiResponse;
import com.cloudmersive.client.invoker.Configuration;
import com.cloudmersive.client.invoker.Pair;
import com.cloudmersive.client.invoker.ProgressRequestBody;
import com.cloudmersive.client.invoker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.cloudmersive.client.model.StringAutomaticThreatDetection;
import com.cloudmersive.client.model.StringInsecureDeserializationJsonDetection;
import com.cloudmersive.client.model.StringSqlInjectionDetectionResult;
import com.cloudmersive.client.model.StringXssProtectionResult;
import com.cloudmersive.client.model.StringXxeDetectionResult;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ContentThreatDetectionApi {
    private ApiClient apiClient;

    public ContentThreatDetectionApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ContentThreatDetectionApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for contentThreatDetectionAutomaticThreatDetectionString
     * @param value User-facing text input. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call contentThreatDetectionAutomaticThreatDetectionStringCall(String value, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = value;

        // create path and map variables
        String localVarPath = "/security/threat-detection/content/automatic/detect/string";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Apikey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call contentThreatDetectionAutomaticThreatDetectionStringValidateBeforeCall(String value, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'value' is set
        if (value == null) {
            throw new ApiException("Missing the required parameter 'value' when calling contentThreatDetectionAutomaticThreatDetectionString(Async)");
        }
        

        com.squareup.okhttp.Call call = contentThreatDetectionAutomaticThreatDetectionStringCall(value, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Automatically detect threats in an input string
     * Auto-detects a wide range of threat types in input string, including Cross-Site Scripting (XSS), SQL Injection (SQLI), XML External Entitites (XXE), Server-side Request Forgeries (SSRF), and JSON Insecure Deserialization (JID).
     * @param value User-facing text input. (required)
     * @return StringAutomaticThreatDetection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public StringAutomaticThreatDetection contentThreatDetectionAutomaticThreatDetectionString(String value) throws ApiException {
        ApiResponse<StringAutomaticThreatDetection> resp = contentThreatDetectionAutomaticThreatDetectionStringWithHttpInfo(value);
        return resp.getData();
    }

    /**
     * Automatically detect threats in an input string
     * Auto-detects a wide range of threat types in input string, including Cross-Site Scripting (XSS), SQL Injection (SQLI), XML External Entitites (XXE), Server-side Request Forgeries (SSRF), and JSON Insecure Deserialization (JID).
     * @param value User-facing text input. (required)
     * @return ApiResponse&lt;StringAutomaticThreatDetection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<StringAutomaticThreatDetection> contentThreatDetectionAutomaticThreatDetectionStringWithHttpInfo(String value) throws ApiException {
        com.squareup.okhttp.Call call = contentThreatDetectionAutomaticThreatDetectionStringValidateBeforeCall(value, null, null);
        Type localVarReturnType = new TypeToken<StringAutomaticThreatDetection>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Automatically detect threats in an input string (asynchronously)
     * Auto-detects a wide range of threat types in input string, including Cross-Site Scripting (XSS), SQL Injection (SQLI), XML External Entitites (XXE), Server-side Request Forgeries (SSRF), and JSON Insecure Deserialization (JID).
     * @param value User-facing text input. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call contentThreatDetectionAutomaticThreatDetectionStringAsync(String value, final ApiCallback<StringAutomaticThreatDetection> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = contentThreatDetectionAutomaticThreatDetectionStringValidateBeforeCall(value, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<StringAutomaticThreatDetection>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for contentThreatDetectionCheckSqlInjectionString
     * @param value User-facing text input. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call contentThreatDetectionCheckSqlInjectionStringCall(String value, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = value;

        // create path and map variables
        String localVarPath = "/security/threat-detection/content/sql-injection/detect/string";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Apikey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call contentThreatDetectionCheckSqlInjectionStringValidateBeforeCall(String value, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'value' is set
        if (value == null) {
            throw new ApiException("Missing the required parameter 'value' when calling contentThreatDetectionCheckSqlInjectionString(Async)");
        }
        

        com.squareup.okhttp.Call call = contentThreatDetectionCheckSqlInjectionStringCall(value, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Check text input for SQL Injection (SQLI) attacks
     * Detects SQL Injection (SQLI) attacks from text input.
     * @param value User-facing text input. (required)
     * @return StringSqlInjectionDetectionResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public StringSqlInjectionDetectionResult contentThreatDetectionCheckSqlInjectionString(String value) throws ApiException {
        ApiResponse<StringSqlInjectionDetectionResult> resp = contentThreatDetectionCheckSqlInjectionStringWithHttpInfo(value);
        return resp.getData();
    }

    /**
     * Check text input for SQL Injection (SQLI) attacks
     * Detects SQL Injection (SQLI) attacks from text input.
     * @param value User-facing text input. (required)
     * @return ApiResponse&lt;StringSqlInjectionDetectionResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<StringSqlInjectionDetectionResult> contentThreatDetectionCheckSqlInjectionStringWithHttpInfo(String value) throws ApiException {
        com.squareup.okhttp.Call call = contentThreatDetectionCheckSqlInjectionStringValidateBeforeCall(value, null, null);
        Type localVarReturnType = new TypeToken<StringSqlInjectionDetectionResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Check text input for SQL Injection (SQLI) attacks (asynchronously)
     * Detects SQL Injection (SQLI) attacks from text input.
     * @param value User-facing text input. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call contentThreatDetectionCheckSqlInjectionStringAsync(String value, final ApiCallback<StringSqlInjectionDetectionResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = contentThreatDetectionCheckSqlInjectionStringValidateBeforeCall(value, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<StringSqlInjectionDetectionResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for contentThreatDetectionCheckXxe
     * @param value User-facing text input. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call contentThreatDetectionCheckXxeCall(String value, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = value;

        // create path and map variables
        String localVarPath = "/security/threat-detection/content/xxe/detect/xml/string";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Apikey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call contentThreatDetectionCheckXxeValidateBeforeCall(String value, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'value' is set
        if (value == null) {
            throw new ApiException("Missing the required parameter 'value' when calling contentThreatDetectionCheckXxe(Async)");
        }
        

        com.squareup.okhttp.Call call = contentThreatDetectionCheckXxeCall(value, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Protect text input from XML External Entity (XXE) attacks
     * Detects XXE (XML External Entity) attacks from XML text input.
     * @param value User-facing text input. (required)
     * @return StringXxeDetectionResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public StringXxeDetectionResult contentThreatDetectionCheckXxe(String value) throws ApiException {
        ApiResponse<StringXxeDetectionResult> resp = contentThreatDetectionCheckXxeWithHttpInfo(value);
        return resp.getData();
    }

    /**
     * Protect text input from XML External Entity (XXE) attacks
     * Detects XXE (XML External Entity) attacks from XML text input.
     * @param value User-facing text input. (required)
     * @return ApiResponse&lt;StringXxeDetectionResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<StringXxeDetectionResult> contentThreatDetectionCheckXxeWithHttpInfo(String value) throws ApiException {
        com.squareup.okhttp.Call call = contentThreatDetectionCheckXxeValidateBeforeCall(value, null, null);
        Type localVarReturnType = new TypeToken<StringXxeDetectionResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Protect text input from XML External Entity (XXE) attacks (asynchronously)
     * Detects XXE (XML External Entity) attacks from XML text input.
     * @param value User-facing text input. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call contentThreatDetectionCheckXxeAsync(String value, final ApiCallback<StringXxeDetectionResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = contentThreatDetectionCheckXxeValidateBeforeCall(value, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<StringXxeDetectionResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for contentThreatDetectionDetectInsecureDeserializationJsonString
     * @param value User-facing text input. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call contentThreatDetectionDetectInsecureDeserializationJsonStringCall(String value, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = value;

        // create path and map variables
        String localVarPath = "/security/threat-detection/content/insecure-deserialization/json/detect/string";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Apikey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call contentThreatDetectionDetectInsecureDeserializationJsonStringValidateBeforeCall(String value, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'value' is set
        if (value == null) {
            throw new ApiException("Missing the required parameter 'value' when calling contentThreatDetectionDetectInsecureDeserializationJsonString(Async)");
        }
        

        com.squareup.okhttp.Call call = contentThreatDetectionDetectInsecureDeserializationJsonStringCall(value, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Detect Insecure Deserialization JSON (JID) attacks in a string
     * Detects Insecure Deserialization JSON (JID) attacks from text input.
     * @param value User-facing text input. (required)
     * @return StringInsecureDeserializationJsonDetection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public StringInsecureDeserializationJsonDetection contentThreatDetectionDetectInsecureDeserializationJsonString(String value) throws ApiException {
        ApiResponse<StringInsecureDeserializationJsonDetection> resp = contentThreatDetectionDetectInsecureDeserializationJsonStringWithHttpInfo(value);
        return resp.getData();
    }

    /**
     * Detect Insecure Deserialization JSON (JID) attacks in a string
     * Detects Insecure Deserialization JSON (JID) attacks from text input.
     * @param value User-facing text input. (required)
     * @return ApiResponse&lt;StringInsecureDeserializationJsonDetection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<StringInsecureDeserializationJsonDetection> contentThreatDetectionDetectInsecureDeserializationJsonStringWithHttpInfo(String value) throws ApiException {
        com.squareup.okhttp.Call call = contentThreatDetectionDetectInsecureDeserializationJsonStringValidateBeforeCall(value, null, null);
        Type localVarReturnType = new TypeToken<StringInsecureDeserializationJsonDetection>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Detect Insecure Deserialization JSON (JID) attacks in a string (asynchronously)
     * Detects Insecure Deserialization JSON (JID) attacks from text input.
     * @param value User-facing text input. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call contentThreatDetectionDetectInsecureDeserializationJsonStringAsync(String value, final ApiCallback<StringInsecureDeserializationJsonDetection> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = contentThreatDetectionDetectInsecureDeserializationJsonStringValidateBeforeCall(value, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<StringInsecureDeserializationJsonDetection>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for contentThreatDetectionProtectXss
     * @param value User-facing text input. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call contentThreatDetectionProtectXssCall(String value, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = value;

        // create path and map variables
        String localVarPath = "/security/threat-detection/content/xss/detect/string";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Apikey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call contentThreatDetectionProtectXssValidateBeforeCall(String value, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'value' is set
        if (value == null) {
            throw new ApiException("Missing the required parameter 'value' when calling contentThreatDetectionProtectXss(Async)");
        }
        

        com.squareup.okhttp.Call call = contentThreatDetectionProtectXssCall(value, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Protect text input from Cross-Site-Scripting (XSS) attacks through normalization
     * Detects and removes XSS (Cross-Site-Scripting) attacks from text input through normalization.  Returns the normalized result, as well as information on whether the original input contained an XSS risk.
     * @param value User-facing text input. (required)
     * @return StringXssProtectionResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public StringXssProtectionResult contentThreatDetectionProtectXss(String value) throws ApiException {
        ApiResponse<StringXssProtectionResult> resp = contentThreatDetectionProtectXssWithHttpInfo(value);
        return resp.getData();
    }

    /**
     * Protect text input from Cross-Site-Scripting (XSS) attacks through normalization
     * Detects and removes XSS (Cross-Site-Scripting) attacks from text input through normalization.  Returns the normalized result, as well as information on whether the original input contained an XSS risk.
     * @param value User-facing text input. (required)
     * @return ApiResponse&lt;StringXssProtectionResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<StringXssProtectionResult> contentThreatDetectionProtectXssWithHttpInfo(String value) throws ApiException {
        com.squareup.okhttp.Call call = contentThreatDetectionProtectXssValidateBeforeCall(value, null, null);
        Type localVarReturnType = new TypeToken<StringXssProtectionResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Protect text input from Cross-Site-Scripting (XSS) attacks through normalization (asynchronously)
     * Detects and removes XSS (Cross-Site-Scripting) attacks from text input through normalization.  Returns the normalized result, as well as information on whether the original input contained an XSS risk.
     * @param value User-facing text input. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call contentThreatDetectionProtectXssAsync(String value, final ApiCallback<StringXssProtectionResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = contentThreatDetectionProtectXssValidateBeforeCall(value, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<StringXssProtectionResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
