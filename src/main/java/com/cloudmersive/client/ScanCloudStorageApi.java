/*
 * virusapi
 * The Cloudmersive Virus Scan API lets you scan files and content for viruses and identify security issues with content.
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.cloudmersive.client;

import com.cloudmersive.client.invoker.ApiCallback;
import com.cloudmersive.client.invoker.ApiClient;
import com.cloudmersive.client.invoker.ApiException;
import com.cloudmersive.client.invoker.ApiResponse;
import com.cloudmersive.client.invoker.Configuration;
import com.cloudmersive.client.invoker.Pair;
import com.cloudmersive.client.invoker.ProgressRequestBody;
import com.cloudmersive.client.invoker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.cloudmersive.client.model.CloudStorageVirusScanResult;
import java.io.File;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ScanCloudStorageApi {
    private ApiClient apiClient;

    public ScanCloudStorageApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ScanCloudStorageApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for scanCloudStorageScanAwsS3File
     * @param accessKey AWS S3 access key for the S3 bucket; you can get this from My Security Credentials in the AWS console (required)
     * @param secretKey AWS S3 secret key for the S3 bucket; you can get this from My Security Credentials in the AWS console (required)
     * @param bucketRegion Name of the region of the S3 bucket, such as &#39;US-East-1&#39; (required)
     * @param bucketName Name of the S3 bucket (required)
     * @param keyName Key name (also called file name) of the file in S3 that you wish to scan for viruses (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call scanCloudStorageScanAwsS3FileCall(String accessKey, String secretKey, String bucketRegion, String bucketName, String keyName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/virus/scan/cloud-storage/aws-s3/single";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (accessKey != null)
        localVarHeaderParams.put("accessKey", apiClient.parameterToString(accessKey));
        if (secretKey != null)
        localVarHeaderParams.put("secretKey", apiClient.parameterToString(secretKey));
        if (bucketRegion != null)
        localVarHeaderParams.put("bucketRegion", apiClient.parameterToString(bucketRegion));
        if (bucketName != null)
        localVarHeaderParams.put("bucketName", apiClient.parameterToString(bucketName));
        if (keyName != null)
        localVarHeaderParams.put("keyName", apiClient.parameterToString(keyName));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Apikey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call scanCloudStorageScanAwsS3FileValidateBeforeCall(String accessKey, String secretKey, String bucketRegion, String bucketName, String keyName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'accessKey' is set
        if (accessKey == null) {
            throw new ApiException("Missing the required parameter 'accessKey' when calling scanCloudStorageScanAwsS3File(Async)");
        }
        
        // verify the required parameter 'secretKey' is set
        if (secretKey == null) {
            throw new ApiException("Missing the required parameter 'secretKey' when calling scanCloudStorageScanAwsS3File(Async)");
        }
        
        // verify the required parameter 'bucketRegion' is set
        if (bucketRegion == null) {
            throw new ApiException("Missing the required parameter 'bucketRegion' when calling scanCloudStorageScanAwsS3File(Async)");
        }
        
        // verify the required parameter 'bucketName' is set
        if (bucketName == null) {
            throw new ApiException("Missing the required parameter 'bucketName' when calling scanCloudStorageScanAwsS3File(Async)");
        }
        
        // verify the required parameter 'keyName' is set
        if (keyName == null) {
            throw new ApiException("Missing the required parameter 'keyName' when calling scanCloudStorageScanAwsS3File(Async)");
        }
        

        com.squareup.okhttp.Call call = scanCloudStorageScanAwsS3FileCall(accessKey, secretKey, bucketRegion, bucketName, keyName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Scan an AWS S3 file for viruses
     * Scan the contents of a single AWS S3 file and its content for viruses. Leverage continuously updated signatures for millions of threats, and advanced high-performance scanning capabilities.  Over 17 million virus and malware signatures.  Continuous cloud-based updates.  Wide file format support including Office, PDF, HTML, Flash.  Zip support including .Zip, .Rar, .DMG, .Tar, and other archive formats.  Multi-threat scanning across viruses, malware, trojans, ransomware, and spyware.  High-speed in-memory scanning delivers subsecond typical response time.
     * @param accessKey AWS S3 access key for the S3 bucket; you can get this from My Security Credentials in the AWS console (required)
     * @param secretKey AWS S3 secret key for the S3 bucket; you can get this from My Security Credentials in the AWS console (required)
     * @param bucketRegion Name of the region of the S3 bucket, such as &#39;US-East-1&#39; (required)
     * @param bucketName Name of the S3 bucket (required)
     * @param keyName Key name (also called file name) of the file in S3 that you wish to scan for viruses (required)
     * @return CloudStorageVirusScanResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CloudStorageVirusScanResult scanCloudStorageScanAwsS3File(String accessKey, String secretKey, String bucketRegion, String bucketName, String keyName) throws ApiException {
        ApiResponse<CloudStorageVirusScanResult> resp = scanCloudStorageScanAwsS3FileWithHttpInfo(accessKey, secretKey, bucketRegion, bucketName, keyName);
        return resp.getData();
    }

    /**
     * Scan an AWS S3 file for viruses
     * Scan the contents of a single AWS S3 file and its content for viruses. Leverage continuously updated signatures for millions of threats, and advanced high-performance scanning capabilities.  Over 17 million virus and malware signatures.  Continuous cloud-based updates.  Wide file format support including Office, PDF, HTML, Flash.  Zip support including .Zip, .Rar, .DMG, .Tar, and other archive formats.  Multi-threat scanning across viruses, malware, trojans, ransomware, and spyware.  High-speed in-memory scanning delivers subsecond typical response time.
     * @param accessKey AWS S3 access key for the S3 bucket; you can get this from My Security Credentials in the AWS console (required)
     * @param secretKey AWS S3 secret key for the S3 bucket; you can get this from My Security Credentials in the AWS console (required)
     * @param bucketRegion Name of the region of the S3 bucket, such as &#39;US-East-1&#39; (required)
     * @param bucketName Name of the S3 bucket (required)
     * @param keyName Key name (also called file name) of the file in S3 that you wish to scan for viruses (required)
     * @return ApiResponse&lt;CloudStorageVirusScanResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CloudStorageVirusScanResult> scanCloudStorageScanAwsS3FileWithHttpInfo(String accessKey, String secretKey, String bucketRegion, String bucketName, String keyName) throws ApiException {
        com.squareup.okhttp.Call call = scanCloudStorageScanAwsS3FileValidateBeforeCall(accessKey, secretKey, bucketRegion, bucketName, keyName, null, null);
        Type localVarReturnType = new TypeToken<CloudStorageVirusScanResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Scan an AWS S3 file for viruses (asynchronously)
     * Scan the contents of a single AWS S3 file and its content for viruses. Leverage continuously updated signatures for millions of threats, and advanced high-performance scanning capabilities.  Over 17 million virus and malware signatures.  Continuous cloud-based updates.  Wide file format support including Office, PDF, HTML, Flash.  Zip support including .Zip, .Rar, .DMG, .Tar, and other archive formats.  Multi-threat scanning across viruses, malware, trojans, ransomware, and spyware.  High-speed in-memory scanning delivers subsecond typical response time.
     * @param accessKey AWS S3 access key for the S3 bucket; you can get this from My Security Credentials in the AWS console (required)
     * @param secretKey AWS S3 secret key for the S3 bucket; you can get this from My Security Credentials in the AWS console (required)
     * @param bucketRegion Name of the region of the S3 bucket, such as &#39;US-East-1&#39; (required)
     * @param bucketName Name of the S3 bucket (required)
     * @param keyName Key name (also called file name) of the file in S3 that you wish to scan for viruses (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call scanCloudStorageScanAwsS3FileAsync(String accessKey, String secretKey, String bucketRegion, String bucketName, String keyName, final ApiCallback<CloudStorageVirusScanResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = scanCloudStorageScanAwsS3FileValidateBeforeCall(accessKey, secretKey, bucketRegion, bucketName, keyName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CloudStorageVirusScanResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for scanCloudStorageScanAzureBlob
     * @param connectionString Connection string for the Azure Blob Storage Account; you can get this connection string from the Access Keys tab of the Storage Account blade in the Azure Portal. (required)
     * @param containerName Name of the Blob container within the Azure Blob Storage account (required)
     * @param blobPath Path to the blob within the container, such as &#39;hello.pdf&#39; or &#39;/folder/subfolder/world.pdf&#39; (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call scanCloudStorageScanAzureBlobCall(String connectionString, String containerName, String blobPath, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/virus/scan/cloud-storage/azure-blob/single";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (connectionString != null)
        localVarHeaderParams.put("connectionString", apiClient.parameterToString(connectionString));
        if (containerName != null)
        localVarHeaderParams.put("containerName", apiClient.parameterToString(containerName));
        if (blobPath != null)
        localVarHeaderParams.put("blobPath", apiClient.parameterToString(blobPath));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Apikey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call scanCloudStorageScanAzureBlobValidateBeforeCall(String connectionString, String containerName, String blobPath, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'connectionString' is set
        if (connectionString == null) {
            throw new ApiException("Missing the required parameter 'connectionString' when calling scanCloudStorageScanAzureBlob(Async)");
        }
        
        // verify the required parameter 'containerName' is set
        if (containerName == null) {
            throw new ApiException("Missing the required parameter 'containerName' when calling scanCloudStorageScanAzureBlob(Async)");
        }
        
        // verify the required parameter 'blobPath' is set
        if (blobPath == null) {
            throw new ApiException("Missing the required parameter 'blobPath' when calling scanCloudStorageScanAzureBlob(Async)");
        }
        

        com.squareup.okhttp.Call call = scanCloudStorageScanAzureBlobCall(connectionString, containerName, blobPath, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Scan an Azure Blob for viruses
     * Scan the contents of a single Azure Blob and its content for viruses. Leverage continuously updated signatures for millions of threats, and advanced high-performance scanning capabilities.  Over 17 million virus and malware signatures.  Continuous cloud-based updates.  Wide file format support including Office, PDF, HTML, Flash.  Zip support including .Zip, .Rar, .DMG, .Tar, and other archive formats.  Multi-threat scanning across viruses, malware, trojans, ransomware, and spyware.  High-speed in-memory scanning delivers subsecond typical response time.
     * @param connectionString Connection string for the Azure Blob Storage Account; you can get this connection string from the Access Keys tab of the Storage Account blade in the Azure Portal. (required)
     * @param containerName Name of the Blob container within the Azure Blob Storage account (required)
     * @param blobPath Path to the blob within the container, such as &#39;hello.pdf&#39; or &#39;/folder/subfolder/world.pdf&#39; (required)
     * @return CloudStorageVirusScanResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CloudStorageVirusScanResult scanCloudStorageScanAzureBlob(String connectionString, String containerName, String blobPath) throws ApiException {
        ApiResponse<CloudStorageVirusScanResult> resp = scanCloudStorageScanAzureBlobWithHttpInfo(connectionString, containerName, blobPath);
        return resp.getData();
    }

    /**
     * Scan an Azure Blob for viruses
     * Scan the contents of a single Azure Blob and its content for viruses. Leverage continuously updated signatures for millions of threats, and advanced high-performance scanning capabilities.  Over 17 million virus and malware signatures.  Continuous cloud-based updates.  Wide file format support including Office, PDF, HTML, Flash.  Zip support including .Zip, .Rar, .DMG, .Tar, and other archive formats.  Multi-threat scanning across viruses, malware, trojans, ransomware, and spyware.  High-speed in-memory scanning delivers subsecond typical response time.
     * @param connectionString Connection string for the Azure Blob Storage Account; you can get this connection string from the Access Keys tab of the Storage Account blade in the Azure Portal. (required)
     * @param containerName Name of the Blob container within the Azure Blob Storage account (required)
     * @param blobPath Path to the blob within the container, such as &#39;hello.pdf&#39; or &#39;/folder/subfolder/world.pdf&#39; (required)
     * @return ApiResponse&lt;CloudStorageVirusScanResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CloudStorageVirusScanResult> scanCloudStorageScanAzureBlobWithHttpInfo(String connectionString, String containerName, String blobPath) throws ApiException {
        com.squareup.okhttp.Call call = scanCloudStorageScanAzureBlobValidateBeforeCall(connectionString, containerName, blobPath, null, null);
        Type localVarReturnType = new TypeToken<CloudStorageVirusScanResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Scan an Azure Blob for viruses (asynchronously)
     * Scan the contents of a single Azure Blob and its content for viruses. Leverage continuously updated signatures for millions of threats, and advanced high-performance scanning capabilities.  Over 17 million virus and malware signatures.  Continuous cloud-based updates.  Wide file format support including Office, PDF, HTML, Flash.  Zip support including .Zip, .Rar, .DMG, .Tar, and other archive formats.  Multi-threat scanning across viruses, malware, trojans, ransomware, and spyware.  High-speed in-memory scanning delivers subsecond typical response time.
     * @param connectionString Connection string for the Azure Blob Storage Account; you can get this connection string from the Access Keys tab of the Storage Account blade in the Azure Portal. (required)
     * @param containerName Name of the Blob container within the Azure Blob Storage account (required)
     * @param blobPath Path to the blob within the container, such as &#39;hello.pdf&#39; or &#39;/folder/subfolder/world.pdf&#39; (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call scanCloudStorageScanAzureBlobAsync(String connectionString, String containerName, String blobPath, final ApiCallback<CloudStorageVirusScanResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = scanCloudStorageScanAzureBlobValidateBeforeCall(connectionString, containerName, blobPath, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CloudStorageVirusScanResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for scanCloudStorageScanGcpStorageFile
     * @param bucketName Name of the bucket in Google Cloud Storage (required)
     * @param objectName Name of the object or file in Google Cloud Storage (required)
     * @param jsonCredentialFile Service Account credential for Google Cloud stored in a JSON file. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call scanCloudStorageScanGcpStorageFileCall(String bucketName, String objectName, File jsonCredentialFile, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/virus/scan/cloud-storage/gcp-storage/single";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (bucketName != null)
        localVarHeaderParams.put("bucketName", apiClient.parameterToString(bucketName));
        if (objectName != null)
        localVarHeaderParams.put("objectName", apiClient.parameterToString(objectName));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (jsonCredentialFile != null)
        localVarFormParams.put("jsonCredentialFile", jsonCredentialFile);

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Apikey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call scanCloudStorageScanGcpStorageFileValidateBeforeCall(String bucketName, String objectName, File jsonCredentialFile, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'bucketName' is set
        if (bucketName == null) {
            throw new ApiException("Missing the required parameter 'bucketName' when calling scanCloudStorageScanGcpStorageFile(Async)");
        }
        
        // verify the required parameter 'objectName' is set
        if (objectName == null) {
            throw new ApiException("Missing the required parameter 'objectName' when calling scanCloudStorageScanGcpStorageFile(Async)");
        }
        
        // verify the required parameter 'jsonCredentialFile' is set
        if (jsonCredentialFile == null) {
            throw new ApiException("Missing the required parameter 'jsonCredentialFile' when calling scanCloudStorageScanGcpStorageFile(Async)");
        }
        

        com.squareup.okhttp.Call call = scanCloudStorageScanGcpStorageFileCall(bucketName, objectName, jsonCredentialFile, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Scan an Google Cloud Platform (GCP) Storage file for viruses
     * Scan the contents of a single Google Cloud Platform (GCP) Storage file and its content for viruses. Leverage continuously updated signatures for millions of threats, and advanced high-performance scanning capabilities.  Over 17 million virus and malware signatures.  Continuous cloud-based updates.  Wide file format support including Office, PDF, HTML, Flash.  Zip support including .Zip, .Rar, .DMG, .Tar, and other archive formats.  Multi-threat scanning across viruses, malware, trojans, ransomware, and spyware.  High-speed in-memory scanning delivers subsecond typical response time.
     * @param bucketName Name of the bucket in Google Cloud Storage (required)
     * @param objectName Name of the object or file in Google Cloud Storage (required)
     * @param jsonCredentialFile Service Account credential for Google Cloud stored in a JSON file. (required)
     * @return CloudStorageVirusScanResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CloudStorageVirusScanResult scanCloudStorageScanGcpStorageFile(String bucketName, String objectName, File jsonCredentialFile) throws ApiException {
        ApiResponse<CloudStorageVirusScanResult> resp = scanCloudStorageScanGcpStorageFileWithHttpInfo(bucketName, objectName, jsonCredentialFile);
        return resp.getData();
    }

    /**
     * Scan an Google Cloud Platform (GCP) Storage file for viruses
     * Scan the contents of a single Google Cloud Platform (GCP) Storage file and its content for viruses. Leverage continuously updated signatures for millions of threats, and advanced high-performance scanning capabilities.  Over 17 million virus and malware signatures.  Continuous cloud-based updates.  Wide file format support including Office, PDF, HTML, Flash.  Zip support including .Zip, .Rar, .DMG, .Tar, and other archive formats.  Multi-threat scanning across viruses, malware, trojans, ransomware, and spyware.  High-speed in-memory scanning delivers subsecond typical response time.
     * @param bucketName Name of the bucket in Google Cloud Storage (required)
     * @param objectName Name of the object or file in Google Cloud Storage (required)
     * @param jsonCredentialFile Service Account credential for Google Cloud stored in a JSON file. (required)
     * @return ApiResponse&lt;CloudStorageVirusScanResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CloudStorageVirusScanResult> scanCloudStorageScanGcpStorageFileWithHttpInfo(String bucketName, String objectName, File jsonCredentialFile) throws ApiException {
        com.squareup.okhttp.Call call = scanCloudStorageScanGcpStorageFileValidateBeforeCall(bucketName, objectName, jsonCredentialFile, null, null);
        Type localVarReturnType = new TypeToken<CloudStorageVirusScanResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Scan an Google Cloud Platform (GCP) Storage file for viruses (asynchronously)
     * Scan the contents of a single Google Cloud Platform (GCP) Storage file and its content for viruses. Leverage continuously updated signatures for millions of threats, and advanced high-performance scanning capabilities.  Over 17 million virus and malware signatures.  Continuous cloud-based updates.  Wide file format support including Office, PDF, HTML, Flash.  Zip support including .Zip, .Rar, .DMG, .Tar, and other archive formats.  Multi-threat scanning across viruses, malware, trojans, ransomware, and spyware.  High-speed in-memory scanning delivers subsecond typical response time.
     * @param bucketName Name of the bucket in Google Cloud Storage (required)
     * @param objectName Name of the object or file in Google Cloud Storage (required)
     * @param jsonCredentialFile Service Account credential for Google Cloud stored in a JSON file. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call scanCloudStorageScanGcpStorageFileAsync(String bucketName, String objectName, File jsonCredentialFile, final ApiCallback<CloudStorageVirusScanResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = scanCloudStorageScanGcpStorageFileValidateBeforeCall(bucketName, objectName, jsonCredentialFile, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CloudStorageVirusScanResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
