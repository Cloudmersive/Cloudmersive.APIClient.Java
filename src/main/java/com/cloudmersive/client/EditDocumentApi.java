/*
 * convertapi
 * Convert API lets you effortlessly convert file formats and types.
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.cloudmersive.client;

import com.cloudmersive.client.invoker.ApiCallback;
import com.cloudmersive.client.invoker.ApiClient;
import com.cloudmersive.client.invoker.ApiException;
import com.cloudmersive.client.invoker.ApiResponse;
import com.cloudmersive.client.invoker.Configuration;
import com.cloudmersive.client.invoker.Pair;
import com.cloudmersive.client.invoker.ProgressRequestBody;
import com.cloudmersive.client.invoker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.cloudmersive.client.model.AppendXlsxRowRequest;
import com.cloudmersive.client.model.AppendXlsxRowResponse;
import com.cloudmersive.client.model.ClearXlsxCellRequest;
import com.cloudmersive.client.model.ClearXlsxCellResponse;
import com.cloudmersive.client.model.ClearXlsxRowRequest;
import com.cloudmersive.client.model.ClearXlsxRowResponse;
import com.cloudmersive.client.model.CreateBlankDocxRequest;
import com.cloudmersive.client.model.CreateBlankDocxResponse;
import com.cloudmersive.client.model.CreateBlankSpreadsheetRequest;
import com.cloudmersive.client.model.CreateBlankSpreadsheetResponse;
import com.cloudmersive.client.model.CreateSpreadsheetFromDataRequest;
import com.cloudmersive.client.model.CreateSpreadsheetFromDataResponse;
import com.cloudmersive.client.model.DeleteDocxTableRowRangeRequest;
import com.cloudmersive.client.model.DeleteDocxTableRowRangeResponse;
import com.cloudmersive.client.model.DeleteDocxTableRowRequest;
import com.cloudmersive.client.model.DeleteDocxTableRowResponse;
import com.cloudmersive.client.model.DisableSharedWorkbookRequest;
import com.cloudmersive.client.model.DisableSharedWorkbookResponse;
import com.cloudmersive.client.model.DocumentEditingEditSession;
import com.cloudmersive.client.model.DocxInsertCommentOnParagraphRequest;
import com.cloudmersive.client.model.DocxInsertImageRequest;
import com.cloudmersive.client.model.DocxInsertImageResponse;
import com.cloudmersive.client.model.DocxRemoveObjectRequest;
import com.cloudmersive.client.model.DocxRemoveObjectResponse;
import com.cloudmersive.client.model.DocxSetCustomMetadataPropertiesRequest;
import com.cloudmersive.client.model.DocxSetFooterAddPageNumberRequest;
import com.cloudmersive.client.model.DocxSetFooterRequest;
import com.cloudmersive.client.model.DocxSetFooterResponse;
import com.cloudmersive.client.model.DocxSetFormFieldsRequest;
import com.cloudmersive.client.model.DocxSetHeaderRequest;
import com.cloudmersive.client.model.DocxSetHeaderResponse;
import com.cloudmersive.client.model.EnableSharedWorkbookRequest;
import com.cloudmersive.client.model.EnableSharedWorkbookResponse;
import java.io.File;
import com.cloudmersive.client.model.FindDocxParagraphRequest;
import com.cloudmersive.client.model.FindDocxParagraphResponse;
import com.cloudmersive.client.model.FinishEditingRequest;
import com.cloudmersive.client.model.GetDocxBodyRequest;
import com.cloudmersive.client.model.GetDocxBodyResponse;
import com.cloudmersive.client.model.GetDocxCommentsHierarchicalResponse;
import com.cloudmersive.client.model.GetDocxCommentsResponse;
import com.cloudmersive.client.model.GetDocxContentControlsResponse;
import com.cloudmersive.client.model.GetDocxGetCommentsHierarchicalRequest;
import com.cloudmersive.client.model.GetDocxGetCommentsRequest;
import com.cloudmersive.client.model.GetDocxGetFormFieldsResponse;
import com.cloudmersive.client.model.GetDocxHeadersAndFootersRequest;
import com.cloudmersive.client.model.GetDocxHeadersAndFootersResponse;
import com.cloudmersive.client.model.GetDocxImagesRequest;
import com.cloudmersive.client.model.GetDocxImagesResponse;
import com.cloudmersive.client.model.GetDocxMetadataPropertiesResponse;
import com.cloudmersive.client.model.GetDocxPagesRequest;
import com.cloudmersive.client.model.GetDocxPagesResponse;
import com.cloudmersive.client.model.GetDocxSectionsRequest;
import com.cloudmersive.client.model.GetDocxSectionsResponse;
import com.cloudmersive.client.model.GetDocxStylesRequest;
import com.cloudmersive.client.model.GetDocxStylesResponse;
import com.cloudmersive.client.model.GetDocxTableByIndexRequest;
import com.cloudmersive.client.model.GetDocxTableByIndexResponse;
import com.cloudmersive.client.model.GetDocxTableRowRequest;
import com.cloudmersive.client.model.GetDocxTableRowResponse;
import com.cloudmersive.client.model.GetDocxTablesRequest;
import com.cloudmersive.client.model.GetDocxTablesResponse;
import com.cloudmersive.client.model.GetMacrosResponse;
import com.cloudmersive.client.model.GetXlsxCellByIdentifierRequest;
import com.cloudmersive.client.model.GetXlsxCellByIdentifierResponse;
import com.cloudmersive.client.model.GetXlsxCellRequest;
import com.cloudmersive.client.model.GetXlsxCellResponse;
import com.cloudmersive.client.model.GetXlsxColumnsRequest;
import com.cloudmersive.client.model.GetXlsxColumnsResponse;
import com.cloudmersive.client.model.GetXlsxImagesRequest;
import com.cloudmersive.client.model.GetXlsxImagesResponse;
import com.cloudmersive.client.model.GetXlsxRowsAndCellsRequest;
import com.cloudmersive.client.model.GetXlsxRowsAndCellsResponse;
import com.cloudmersive.client.model.GetXlsxSpecificRowRequest;
import com.cloudmersive.client.model.GetXlsxSpecificRowResponse;
import com.cloudmersive.client.model.GetXlsxStylesRequest;
import com.cloudmersive.client.model.GetXlsxStylesResponse;
import com.cloudmersive.client.model.GetXlsxWorksheetsRequest;
import com.cloudmersive.client.model.GetXlsxWorksheetsResponse;
import com.cloudmersive.client.model.InsertDocxCommentOnParagraphResponse;
import com.cloudmersive.client.model.InsertDocxInsertParagraphRequest;
import com.cloudmersive.client.model.InsertDocxInsertParagraphResponse;
import com.cloudmersive.client.model.InsertDocxTableRowRequest;
import com.cloudmersive.client.model.InsertDocxTableRowResponse;
import com.cloudmersive.client.model.InsertDocxTablesRequest;
import com.cloudmersive.client.model.InsertDocxTablesResponse;
import com.cloudmersive.client.model.InsertXlsxWorksheetRequest;
import com.cloudmersive.client.model.InsertXlsxWorksheetResponse;
import com.cloudmersive.client.model.MultiReplaceStringRequest;
import com.cloudmersive.client.model.RemoveDocxHeadersAndFootersRequest;
import com.cloudmersive.client.model.RemoveDocxHeadersAndFootersResponse;
import com.cloudmersive.client.model.RemoveDocxPagesRequest;
import com.cloudmersive.client.model.RemovePptxSlidesRequest;
import com.cloudmersive.client.model.RemoveXlsxWorksheetRequest;
import com.cloudmersive.client.model.RenameXlsxWorksheetRequest;
import com.cloudmersive.client.model.RenameXlsxWorksheetResponse;
import com.cloudmersive.client.model.ReplaceDocxParagraphRequest;
import com.cloudmersive.client.model.ReplaceDocxParagraphResponse;
import com.cloudmersive.client.model.ReplaceStringRequest;
import com.cloudmersive.client.model.SetXlsxCellByIdentifierRequest;
import com.cloudmersive.client.model.SetXlsxCellByIdentifierResponse;
import com.cloudmersive.client.model.SetXlsxCellRequest;
import com.cloudmersive.client.model.SetXlsxCellResponse;
import com.cloudmersive.client.model.UpdateDocxTableCellRequest;
import com.cloudmersive.client.model.UpdateDocxTableCellResponse;
import com.cloudmersive.client.model.UpdateDocxTableRowRequest;
import com.cloudmersive.client.model.UpdateDocxTableRowResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class EditDocumentApi {
    private ApiClient apiClient;

    public EditDocumentApi() {
        this(Configuration.getDefaultApiClient());
    }

    public EditDocumentApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for editDocumentBeginEditing
     * @param inputFile Input file to perform the operation on. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call editDocumentBeginEditingCall(File inputFile, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/convert/edit/begin-editing";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (inputFile != null)
        localVarFormParams.put("inputFile", inputFile);

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Apikey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call editDocumentBeginEditingValidateBeforeCall(File inputFile, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'inputFile' is set
        if (inputFile == null) {
            throw new ApiException("Missing the required parameter 'inputFile' when calling editDocumentBeginEditing(Async)");
        }
        

        com.squareup.okhttp.Call call = editDocumentBeginEditingCall(inputFile, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Begin editing a document
     * Uploads a document to Cloudmersive to begin a series of one or more editing operations.  To edit a document, first call Begin Editing on the document.  Then perform operations on the document using the secure URL returned from BeginEditing, such as Word DOCX Delete Pages and Insert Table.  Finally, perform finish editing on the URL to return the resulting edited document.  The editing URL is temporary and only stored in-memory cache, and will automatically expire from the cache after 30 minutes, and cannot be directly accessed.
     * @param inputFile Input file to perform the operation on. (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String editDocumentBeginEditing(File inputFile) throws ApiException {
        ApiResponse<String> resp = editDocumentBeginEditingWithHttpInfo(inputFile);
        return resp.getData();
    }

    /**
     * Begin editing a document
     * Uploads a document to Cloudmersive to begin a series of one or more editing operations.  To edit a document, first call Begin Editing on the document.  Then perform operations on the document using the secure URL returned from BeginEditing, such as Word DOCX Delete Pages and Insert Table.  Finally, perform finish editing on the URL to return the resulting edited document.  The editing URL is temporary and only stored in-memory cache, and will automatically expire from the cache after 30 minutes, and cannot be directly accessed.
     * @param inputFile Input file to perform the operation on. (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> editDocumentBeginEditingWithHttpInfo(File inputFile) throws ApiException {
        com.squareup.okhttp.Call call = editDocumentBeginEditingValidateBeforeCall(inputFile, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Begin editing a document (asynchronously)
     * Uploads a document to Cloudmersive to begin a series of one or more editing operations.  To edit a document, first call Begin Editing on the document.  Then perform operations on the document using the secure URL returned from BeginEditing, such as Word DOCX Delete Pages and Insert Table.  Finally, perform finish editing on the URL to return the resulting edited document.  The editing URL is temporary and only stored in-memory cache, and will automatically expire from the cache after 30 minutes, and cannot be directly accessed.
     * @param inputFile Input file to perform the operation on. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call editDocumentBeginEditingAsync(File inputFile, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = editDocumentBeginEditingValidateBeforeCall(inputFile, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for editDocumentDocxAcceptAllTrackChanges
     * @param inputFile Input file to perform the operation on. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call editDocumentDocxAcceptAllTrackChangesCall(File inputFile, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/convert/edit/docx/track-changes/accept-all";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (inputFile != null)
        localVarFormParams.put("inputFile", inputFile);

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Apikey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call editDocumentDocxAcceptAllTrackChangesValidateBeforeCall(File inputFile, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'inputFile' is set
        if (inputFile == null) {
            throw new ApiException("Missing the required parameter 'inputFile' when calling editDocumentDocxAcceptAllTrackChanges(Async)");
        }
        

        com.squareup.okhttp.Call call = editDocumentDocxAcceptAllTrackChangesCall(inputFile, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Accept all tracked changes, revisions in a Word DOCX document
     * Accepts all tracked changes and revisions in a Word DOCX document.  This will accept all pending changes in the document when tracked changes is turned on.  Track changes will remain on (if it is on) after this oepration is completed.
     * @param inputFile Input file to perform the operation on. (required)
     * @return byte[]
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public byte[] editDocumentDocxAcceptAllTrackChanges(File inputFile) throws ApiException {
        ApiResponse<byte[]> resp = editDocumentDocxAcceptAllTrackChangesWithHttpInfo(inputFile);
        return resp.getData();
    }

    /**
     * Accept all tracked changes, revisions in a Word DOCX document
     * Accepts all tracked changes and revisions in a Word DOCX document.  This will accept all pending changes in the document when tracked changes is turned on.  Track changes will remain on (if it is on) after this oepration is completed.
     * @param inputFile Input file to perform the operation on. (required)
     * @return ApiResponse&lt;byte[]&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<byte[]> editDocumentDocxAcceptAllTrackChangesWithHttpInfo(File inputFile) throws ApiException {
        com.squareup.okhttp.Call call = editDocumentDocxAcceptAllTrackChangesValidateBeforeCall(inputFile, null, null);
        Type localVarReturnType = new TypeToken<byte[]>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Accept all tracked changes, revisions in a Word DOCX document (asynchronously)
     * Accepts all tracked changes and revisions in a Word DOCX document.  This will accept all pending changes in the document when tracked changes is turned on.  Track changes will remain on (if it is on) after this oepration is completed.
     * @param inputFile Input file to perform the operation on. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call editDocumentDocxAcceptAllTrackChangesAsync(File inputFile, final ApiCallback<byte[]> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = editDocumentDocxAcceptAllTrackChangesValidateBeforeCall(inputFile, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<byte[]>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for editDocumentDocxBody
     * @param reqConfig Document input request (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call editDocumentDocxBodyCall(GetDocxBodyRequest reqConfig, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = reqConfig;

        // create path and map variables
        String localVarPath = "/convert/edit/docx/get-body";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Apikey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call editDocumentDocxBodyValidateBeforeCall(GetDocxBodyRequest reqConfig, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'reqConfig' is set
        if (reqConfig == null) {
            throw new ApiException("Missing the required parameter 'reqConfig' when calling editDocumentDocxBody(Async)");
        }
        

        com.squareup.okhttp.Call call = editDocumentDocxBodyCall(reqConfig, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get body from a Word DOCX document
     * Returns the body defined in the Word Document (DOCX) format file; this is the main content part of a DOCX document
     * @param reqConfig Document input request (required)
     * @return GetDocxBodyResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GetDocxBodyResponse editDocumentDocxBody(GetDocxBodyRequest reqConfig) throws ApiException {
        ApiResponse<GetDocxBodyResponse> resp = editDocumentDocxBodyWithHttpInfo(reqConfig);
        return resp.getData();
    }

    /**
     * Get body from a Word DOCX document
     * Returns the body defined in the Word Document (DOCX) format file; this is the main content part of a DOCX document
     * @param reqConfig Document input request (required)
     * @return ApiResponse&lt;GetDocxBodyResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GetDocxBodyResponse> editDocumentDocxBodyWithHttpInfo(GetDocxBodyRequest reqConfig) throws ApiException {
        com.squareup.okhttp.Call call = editDocumentDocxBodyValidateBeforeCall(reqConfig, null, null);
        Type localVarReturnType = new TypeToken<GetDocxBodyResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get body from a Word DOCX document (asynchronously)
     * Returns the body defined in the Word Document (DOCX) format file; this is the main content part of a DOCX document
     * @param reqConfig Document input request (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call editDocumentDocxBodyAsync(GetDocxBodyRequest reqConfig, final ApiCallback<GetDocxBodyResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = editDocumentDocxBodyValidateBeforeCall(reqConfig, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetDocxBodyResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for editDocumentDocxCreateBlankDocument
     * @param input Document input request (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call editDocumentDocxCreateBlankDocumentCall(CreateBlankDocxRequest input, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = input;

        // create path and map variables
        String localVarPath = "/convert/edit/docx/create/blank";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Apikey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call editDocumentDocxCreateBlankDocumentValidateBeforeCall(CreateBlankDocxRequest input, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'input' is set
        if (input == null) {
            throw new ApiException("Missing the required parameter 'input' when calling editDocumentDocxCreateBlankDocument(Async)");
        }
        

        com.squareup.okhttp.Call call = editDocumentDocxCreateBlankDocumentCall(input, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a blank Word DOCX document
     * Returns a blank Word DOCX Document format file.  The file is blank, with no contents.  Use additional editing commands such as Insert Paragraph or Insert Table or Insert Image to populate the document.
     * @param input Document input request (required)
     * @return CreateBlankDocxResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CreateBlankDocxResponse editDocumentDocxCreateBlankDocument(CreateBlankDocxRequest input) throws ApiException {
        ApiResponse<CreateBlankDocxResponse> resp = editDocumentDocxCreateBlankDocumentWithHttpInfo(input);
        return resp.getData();
    }

    /**
     * Create a blank Word DOCX document
     * Returns a blank Word DOCX Document format file.  The file is blank, with no contents.  Use additional editing commands such as Insert Paragraph or Insert Table or Insert Image to populate the document.
     * @param input Document input request (required)
     * @return ApiResponse&lt;CreateBlankDocxResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CreateBlankDocxResponse> editDocumentDocxCreateBlankDocumentWithHttpInfo(CreateBlankDocxRequest input) throws ApiException {
        com.squareup.okhttp.Call call = editDocumentDocxCreateBlankDocumentValidateBeforeCall(input, null, null);
        Type localVarReturnType = new TypeToken<CreateBlankDocxResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a blank Word DOCX document (asynchronously)
     * Returns a blank Word DOCX Document format file.  The file is blank, with no contents.  Use additional editing commands such as Insert Paragraph or Insert Table or Insert Image to populate the document.
     * @param input Document input request (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call editDocumentDocxCreateBlankDocumentAsync(CreateBlankDocxRequest input, final ApiCallback<CreateBlankDocxResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = editDocumentDocxCreateBlankDocumentValidateBeforeCall(input, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CreateBlankDocxResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for editDocumentDocxDeletePages
     * @param reqConfig Document input request (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call editDocumentDocxDeletePagesCall(RemoveDocxPagesRequest reqConfig, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = reqConfig;

        // create path and map variables
        String localVarPath = "/convert/edit/docx/delete-pages";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/octet-stream"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Apikey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call editDocumentDocxDeletePagesValidateBeforeCall(RemoveDocxPagesRequest reqConfig, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'reqConfig' is set
        if (reqConfig == null) {
            throw new ApiException("Missing the required parameter 'reqConfig' when calling editDocumentDocxDeletePages(Async)");
        }
        

        com.squareup.okhttp.Call call = editDocumentDocxDeletePagesCall(reqConfig, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete, remove pages from a Word DOCX document
     * Returns the edited Word Document in the Word Document (DOCX) format file with the specified pages removed
     * @param reqConfig Document input request (required)
     * @return byte[]
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public byte[] editDocumentDocxDeletePages(RemoveDocxPagesRequest reqConfig) throws ApiException {
        ApiResponse<byte[]> resp = editDocumentDocxDeletePagesWithHttpInfo(reqConfig);
        return resp.getData();
    }

    /**
     * Delete, remove pages from a Word DOCX document
     * Returns the edited Word Document in the Word Document (DOCX) format file with the specified pages removed
     * @param reqConfig Document input request (required)
     * @return ApiResponse&lt;byte[]&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<byte[]> editDocumentDocxDeletePagesWithHttpInfo(RemoveDocxPagesRequest reqConfig) throws ApiException {
        com.squareup.okhttp.Call call = editDocumentDocxDeletePagesValidateBeforeCall(reqConfig, null, null);
        Type localVarReturnType = new TypeToken<byte[]>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete, remove pages from a Word DOCX document (asynchronously)
     * Returns the edited Word Document in the Word Document (DOCX) format file with the specified pages removed
     * @param reqConfig Document input request (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call editDocumentDocxDeletePagesAsync(RemoveDocxPagesRequest reqConfig, final ApiCallback<byte[]> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = editDocumentDocxDeletePagesValidateBeforeCall(reqConfig, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<byte[]>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for editDocumentDocxDeleteTableRow
     * @param reqConfig Document input request (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call editDocumentDocxDeleteTableRowCall(DeleteDocxTableRowRequest reqConfig, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = reqConfig;

        // create path and map variables
        String localVarPath = "/convert/edit/docx/delete-table-row";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Apikey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call editDocumentDocxDeleteTableRowValidateBeforeCall(DeleteDocxTableRowRequest reqConfig, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'reqConfig' is set
        if (reqConfig == null) {
            throw new ApiException("Missing the required parameter 'reqConfig' when calling editDocumentDocxDeleteTableRow(Async)");
        }
        

        com.squareup.okhttp.Call call = editDocumentDocxDeleteTableRowCall(reqConfig, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Deletes a table row in an existing table in a Word DOCX document
     * Deletes an existing table row in a Word DOCX Document and returns the result.
     * @param reqConfig Document input request (required)
     * @return DeleteDocxTableRowResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DeleteDocxTableRowResponse editDocumentDocxDeleteTableRow(DeleteDocxTableRowRequest reqConfig) throws ApiException {
        ApiResponse<DeleteDocxTableRowResponse> resp = editDocumentDocxDeleteTableRowWithHttpInfo(reqConfig);
        return resp.getData();
    }

    /**
     * Deletes a table row in an existing table in a Word DOCX document
     * Deletes an existing table row in a Word DOCX Document and returns the result.
     * @param reqConfig Document input request (required)
     * @return ApiResponse&lt;DeleteDocxTableRowResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DeleteDocxTableRowResponse> editDocumentDocxDeleteTableRowWithHttpInfo(DeleteDocxTableRowRequest reqConfig) throws ApiException {
        com.squareup.okhttp.Call call = editDocumentDocxDeleteTableRowValidateBeforeCall(reqConfig, null, null);
        Type localVarReturnType = new TypeToken<DeleteDocxTableRowResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Deletes a table row in an existing table in a Word DOCX document (asynchronously)
     * Deletes an existing table row in a Word DOCX Document and returns the result.
     * @param reqConfig Document input request (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call editDocumentDocxDeleteTableRowAsync(DeleteDocxTableRowRequest reqConfig, final ApiCallback<DeleteDocxTableRowResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = editDocumentDocxDeleteTableRowValidateBeforeCall(reqConfig, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DeleteDocxTableRowResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for editDocumentDocxDeleteTableRowRange
     * @param reqConfig Document input request (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call editDocumentDocxDeleteTableRowRangeCall(DeleteDocxTableRowRangeRequest reqConfig, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = reqConfig;

        // create path and map variables
        String localVarPath = "/convert/edit/docx/delete-table-row/range";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Apikey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call editDocumentDocxDeleteTableRowRangeValidateBeforeCall(DeleteDocxTableRowRangeRequest reqConfig, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'reqConfig' is set
        if (reqConfig == null) {
            throw new ApiException("Missing the required parameter 'reqConfig' when calling editDocumentDocxDeleteTableRowRange(Async)");
        }
        

        com.squareup.okhttp.Call call = editDocumentDocxDeleteTableRowRangeCall(reqConfig, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Deletes a range of multiple table rows in an existing table in a Word DOCX document
     * Deletes a range of 1 or more existing table rows in a Word DOCX Document and returns the result.
     * @param reqConfig Document input request (required)
     * @return DeleteDocxTableRowRangeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DeleteDocxTableRowRangeResponse editDocumentDocxDeleteTableRowRange(DeleteDocxTableRowRangeRequest reqConfig) throws ApiException {
        ApiResponse<DeleteDocxTableRowRangeResponse> resp = editDocumentDocxDeleteTableRowRangeWithHttpInfo(reqConfig);
        return resp.getData();
    }

    /**
     * Deletes a range of multiple table rows in an existing table in a Word DOCX document
     * Deletes a range of 1 or more existing table rows in a Word DOCX Document and returns the result.
     * @param reqConfig Document input request (required)
     * @return ApiResponse&lt;DeleteDocxTableRowRangeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DeleteDocxTableRowRangeResponse> editDocumentDocxDeleteTableRowRangeWithHttpInfo(DeleteDocxTableRowRangeRequest reqConfig) throws ApiException {
        com.squareup.okhttp.Call call = editDocumentDocxDeleteTableRowRangeValidateBeforeCall(reqConfig, null, null);
        Type localVarReturnType = new TypeToken<DeleteDocxTableRowRangeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Deletes a range of multiple table rows in an existing table in a Word DOCX document (asynchronously)
     * Deletes a range of 1 or more existing table rows in a Word DOCX Document and returns the result.
     * @param reqConfig Document input request (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call editDocumentDocxDeleteTableRowRangeAsync(DeleteDocxTableRowRangeRequest reqConfig, final ApiCallback<DeleteDocxTableRowRangeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = editDocumentDocxDeleteTableRowRangeValidateBeforeCall(reqConfig, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DeleteDocxTableRowRangeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for editDocumentDocxDisableTrackChanges
     * @param inputFile Input file to perform the operation on. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call editDocumentDocxDisableTrackChangesCall(File inputFile, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/convert/edit/docx/track-changes/disable";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (inputFile != null)
        localVarFormParams.put("inputFile", inputFile);

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Apikey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call editDocumentDocxDisableTrackChangesValidateBeforeCall(File inputFile, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'inputFile' is set
        if (inputFile == null) {
            throw new ApiException("Missing the required parameter 'inputFile' when calling editDocumentDocxDisableTrackChanges(Async)");
        }
        

        com.squareup.okhttp.Call call = editDocumentDocxDisableTrackChangesCall(inputFile, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Disable track changes, revisions in a Word DOCX document
     * Diables tracking of changes and revisions in a Word DOCX document, and accepts any pending changes.  Users editing the document will no longer see changes tracked automatically.
     * @param inputFile Input file to perform the operation on. (required)
     * @return byte[]
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public byte[] editDocumentDocxDisableTrackChanges(File inputFile) throws ApiException {
        ApiResponse<byte[]> resp = editDocumentDocxDisableTrackChangesWithHttpInfo(inputFile);
        return resp.getData();
    }

    /**
     * Disable track changes, revisions in a Word DOCX document
     * Diables tracking of changes and revisions in a Word DOCX document, and accepts any pending changes.  Users editing the document will no longer see changes tracked automatically.
     * @param inputFile Input file to perform the operation on. (required)
     * @return ApiResponse&lt;byte[]&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<byte[]> editDocumentDocxDisableTrackChangesWithHttpInfo(File inputFile) throws ApiException {
        com.squareup.okhttp.Call call = editDocumentDocxDisableTrackChangesValidateBeforeCall(inputFile, null, null);
        Type localVarReturnType = new TypeToken<byte[]>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Disable track changes, revisions in a Word DOCX document (asynchronously)
     * Diables tracking of changes and revisions in a Word DOCX document, and accepts any pending changes.  Users editing the document will no longer see changes tracked automatically.
     * @param inputFile Input file to perform the operation on. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call editDocumentDocxDisableTrackChangesAsync(File inputFile, final ApiCallback<byte[]> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = editDocumentDocxDisableTrackChangesValidateBeforeCall(inputFile, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<byte[]>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for editDocumentDocxEnableTrackChanges
     * @param inputFile Input file to perform the operation on. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call editDocumentDocxEnableTrackChangesCall(File inputFile, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/convert/edit/docx/track-changes/enable";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (inputFile != null)
        localVarFormParams.put("inputFile", inputFile);

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Apikey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call editDocumentDocxEnableTrackChangesValidateBeforeCall(File inputFile, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'inputFile' is set
        if (inputFile == null) {
            throw new ApiException("Missing the required parameter 'inputFile' when calling editDocumentDocxEnableTrackChanges(Async)");
        }
        

        com.squareup.okhttp.Call call = editDocumentDocxEnableTrackChangesCall(inputFile, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Enable track changes, revisions in a Word DOCX document
     * Enables tracking of changes and revisions in a Word DOCX document.  Users editing the document will see changes tracked automatically, with edits highlighted, and the ability to accept or reject changes made to the document.
     * @param inputFile Input file to perform the operation on. (required)
     * @return byte[]
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public byte[] editDocumentDocxEnableTrackChanges(File inputFile) throws ApiException {
        ApiResponse<byte[]> resp = editDocumentDocxEnableTrackChangesWithHttpInfo(inputFile);
        return resp.getData();
    }

    /**
     * Enable track changes, revisions in a Word DOCX document
     * Enables tracking of changes and revisions in a Word DOCX document.  Users editing the document will see changes tracked automatically, with edits highlighted, and the ability to accept or reject changes made to the document.
     * @param inputFile Input file to perform the operation on. (required)
     * @return ApiResponse&lt;byte[]&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<byte[]> editDocumentDocxEnableTrackChangesWithHttpInfo(File inputFile) throws ApiException {
        com.squareup.okhttp.Call call = editDocumentDocxEnableTrackChangesValidateBeforeCall(inputFile, null, null);
        Type localVarReturnType = new TypeToken<byte[]>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Enable track changes, revisions in a Word DOCX document (asynchronously)
     * Enables tracking of changes and revisions in a Word DOCX document.  Users editing the document will see changes tracked automatically, with edits highlighted, and the ability to accept or reject changes made to the document.
     * @param inputFile Input file to perform the operation on. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call editDocumentDocxEnableTrackChangesAsync(File inputFile, final ApiCallback<byte[]> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = editDocumentDocxEnableTrackChangesValidateBeforeCall(inputFile, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<byte[]>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for editDocumentDocxFindParagraph
     * @param reqConfig Document input request (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call editDocumentDocxFindParagraphCall(FindDocxParagraphRequest reqConfig, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = reqConfig;

        // create path and map variables
        String localVarPath = "/convert/edit/docx/find/paragraph";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Apikey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call editDocumentDocxFindParagraphValidateBeforeCall(FindDocxParagraphRequest reqConfig, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'reqConfig' is set
        if (reqConfig == null) {
            throw new ApiException("Missing the required parameter 'reqConfig' when calling editDocumentDocxFindParagraph(Async)");
        }
        

        com.squareup.okhttp.Call call = editDocumentDocxFindParagraphCall(reqConfig, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Find matching paragraphs in a Word DOCX document
     * Returns the paragraphs defined in the Word Document (DOCX) format file that match the input criteria
     * @param reqConfig Document input request (required)
     * @return FindDocxParagraphResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FindDocxParagraphResponse editDocumentDocxFindParagraph(FindDocxParagraphRequest reqConfig) throws ApiException {
        ApiResponse<FindDocxParagraphResponse> resp = editDocumentDocxFindParagraphWithHttpInfo(reqConfig);
        return resp.getData();
    }

    /**
     * Find matching paragraphs in a Word DOCX document
     * Returns the paragraphs defined in the Word Document (DOCX) format file that match the input criteria
     * @param reqConfig Document input request (required)
     * @return ApiResponse&lt;FindDocxParagraphResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FindDocxParagraphResponse> editDocumentDocxFindParagraphWithHttpInfo(FindDocxParagraphRequest reqConfig) throws ApiException {
        com.squareup.okhttp.Call call = editDocumentDocxFindParagraphValidateBeforeCall(reqConfig, null, null);
        Type localVarReturnType = new TypeToken<FindDocxParagraphResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Find matching paragraphs in a Word DOCX document (asynchronously)
     * Returns the paragraphs defined in the Word Document (DOCX) format file that match the input criteria
     * @param reqConfig Document input request (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call editDocumentDocxFindParagraphAsync(FindDocxParagraphRequest reqConfig, final ApiCallback<FindDocxParagraphResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = editDocumentDocxFindParagraphValidateBeforeCall(reqConfig, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FindDocxParagraphResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for editDocumentDocxGetComments
     * @param reqConfig Document input request (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call editDocumentDocxGetCommentsCall(GetDocxGetCommentsRequest reqConfig, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = reqConfig;

        // create path and map variables
        String localVarPath = "/convert/edit/docx/get-comments/flat-list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Apikey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call editDocumentDocxGetCommentsValidateBeforeCall(GetDocxGetCommentsRequest reqConfig, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'reqConfig' is set
        if (reqConfig == null) {
            throw new ApiException("Missing the required parameter 'reqConfig' when calling editDocumentDocxGetComments(Async)");
        }
        

        com.squareup.okhttp.Call call = editDocumentDocxGetCommentsCall(reqConfig, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get comments from a Word DOCX document as a flat list
     * Returns the comments and review annotations stored in the Word Document (DOCX) format file as a flattened list (not as a hierarchy of comments and replies).
     * @param reqConfig Document input request (required)
     * @return GetDocxCommentsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GetDocxCommentsResponse editDocumentDocxGetComments(GetDocxGetCommentsRequest reqConfig) throws ApiException {
        ApiResponse<GetDocxCommentsResponse> resp = editDocumentDocxGetCommentsWithHttpInfo(reqConfig);
        return resp.getData();
    }

    /**
     * Get comments from a Word DOCX document as a flat list
     * Returns the comments and review annotations stored in the Word Document (DOCX) format file as a flattened list (not as a hierarchy of comments and replies).
     * @param reqConfig Document input request (required)
     * @return ApiResponse&lt;GetDocxCommentsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GetDocxCommentsResponse> editDocumentDocxGetCommentsWithHttpInfo(GetDocxGetCommentsRequest reqConfig) throws ApiException {
        com.squareup.okhttp.Call call = editDocumentDocxGetCommentsValidateBeforeCall(reqConfig, null, null);
        Type localVarReturnType = new TypeToken<GetDocxCommentsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get comments from a Word DOCX document as a flat list (asynchronously)
     * Returns the comments and review annotations stored in the Word Document (DOCX) format file as a flattened list (not as a hierarchy of comments and replies).
     * @param reqConfig Document input request (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call editDocumentDocxGetCommentsAsync(GetDocxGetCommentsRequest reqConfig, final ApiCallback<GetDocxCommentsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = editDocumentDocxGetCommentsValidateBeforeCall(reqConfig, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetDocxCommentsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for editDocumentDocxGetCommentsHierarchical
     * @param reqConfig Document input request (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call editDocumentDocxGetCommentsHierarchicalCall(GetDocxGetCommentsHierarchicalRequest reqConfig, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = reqConfig;

        // create path and map variables
        String localVarPath = "/convert/edit/docx/get-comments/hierarchical";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Apikey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call editDocumentDocxGetCommentsHierarchicalValidateBeforeCall(GetDocxGetCommentsHierarchicalRequest reqConfig, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'reqConfig' is set
        if (reqConfig == null) {
            throw new ApiException("Missing the required parameter 'reqConfig' when calling editDocumentDocxGetCommentsHierarchical(Async)");
        }
        

        com.squareup.okhttp.Call call = editDocumentDocxGetCommentsHierarchicalCall(reqConfig, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get comments from a Word DOCX document hierarchically
     * Returns the comments and review annotations stored in the Word Document (DOCX) format file hierarchically, where reply comments are nested as children under top-level comments in the results returned.
     * @param reqConfig Document input request (required)
     * @return GetDocxCommentsHierarchicalResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GetDocxCommentsHierarchicalResponse editDocumentDocxGetCommentsHierarchical(GetDocxGetCommentsHierarchicalRequest reqConfig) throws ApiException {
        ApiResponse<GetDocxCommentsHierarchicalResponse> resp = editDocumentDocxGetCommentsHierarchicalWithHttpInfo(reqConfig);
        return resp.getData();
    }

    /**
     * Get comments from a Word DOCX document hierarchically
     * Returns the comments and review annotations stored in the Word Document (DOCX) format file hierarchically, where reply comments are nested as children under top-level comments in the results returned.
     * @param reqConfig Document input request (required)
     * @return ApiResponse&lt;GetDocxCommentsHierarchicalResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GetDocxCommentsHierarchicalResponse> editDocumentDocxGetCommentsHierarchicalWithHttpInfo(GetDocxGetCommentsHierarchicalRequest reqConfig) throws ApiException {
        com.squareup.okhttp.Call call = editDocumentDocxGetCommentsHierarchicalValidateBeforeCall(reqConfig, null, null);
        Type localVarReturnType = new TypeToken<GetDocxCommentsHierarchicalResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get comments from a Word DOCX document hierarchically (asynchronously)
     * Returns the comments and review annotations stored in the Word Document (DOCX) format file hierarchically, where reply comments are nested as children under top-level comments in the results returned.
     * @param reqConfig Document input request (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call editDocumentDocxGetCommentsHierarchicalAsync(GetDocxGetCommentsHierarchicalRequest reqConfig, final ApiCallback<GetDocxCommentsHierarchicalResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = editDocumentDocxGetCommentsHierarchicalValidateBeforeCall(reqConfig, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetDocxCommentsHierarchicalResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for editDocumentDocxGetContentControls
     * @param inputFile Input file to perform the operation on. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call editDocumentDocxGetContentControlsCall(File inputFile, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/convert/edit/docx/get-content-controls";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (inputFile != null)
        localVarFormParams.put("inputFile", inputFile);

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Apikey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call editDocumentDocxGetContentControlsValidateBeforeCall(File inputFile, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'inputFile' is set
        if (inputFile == null) {
            throw new ApiException("Missing the required parameter 'inputFile' when calling editDocumentDocxGetContentControls(Async)");
        }
        

        com.squareup.okhttp.Call call = editDocumentDocxGetContentControlsCall(inputFile, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get all content controls (form fields) and values in a Word DOCX document
     * Returns all the content controls, used for creating form fields, in a Office Word Document (docx)
     * @param inputFile Input file to perform the operation on. (required)
     * @return GetDocxContentControlsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GetDocxContentControlsResponse editDocumentDocxGetContentControls(File inputFile) throws ApiException {
        ApiResponse<GetDocxContentControlsResponse> resp = editDocumentDocxGetContentControlsWithHttpInfo(inputFile);
        return resp.getData();
    }

    /**
     * Get all content controls (form fields) and values in a Word DOCX document
     * Returns all the content controls, used for creating form fields, in a Office Word Document (docx)
     * @param inputFile Input file to perform the operation on. (required)
     * @return ApiResponse&lt;GetDocxContentControlsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GetDocxContentControlsResponse> editDocumentDocxGetContentControlsWithHttpInfo(File inputFile) throws ApiException {
        com.squareup.okhttp.Call call = editDocumentDocxGetContentControlsValidateBeforeCall(inputFile, null, null);
        Type localVarReturnType = new TypeToken<GetDocxContentControlsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get all content controls (form fields) and values in a Word DOCX document (asynchronously)
     * Returns all the content controls, used for creating form fields, in a Office Word Document (docx)
     * @param inputFile Input file to perform the operation on. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call editDocumentDocxGetContentControlsAsync(File inputFile, final ApiCallback<GetDocxContentControlsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = editDocumentDocxGetContentControlsValidateBeforeCall(inputFile, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetDocxContentControlsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for editDocumentDocxGetFormFields
     * @param inputFile Input file to perform the operation on. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call editDocumentDocxGetFormFieldsCall(File inputFile, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/convert/edit/docx/get-form-fields";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (inputFile != null)
        localVarFormParams.put("inputFile", inputFile);

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Apikey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call editDocumentDocxGetFormFieldsValidateBeforeCall(File inputFile, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'inputFile' is set
        if (inputFile == null) {
            throw new ApiException("Missing the required parameter 'inputFile' when calling editDocumentDocxGetFormFields(Async)");
        }
        

        com.squareup.okhttp.Call call = editDocumentDocxGetFormFieldsCall(inputFile, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get all form fields in a Word DOCX document
     * Returns all the content controls, used for creating form fields, as well as handlebar style text-based form fields such as \&quot;{{FieldName}}\&quot;, in a Office Word Document (docx)
     * @param inputFile Input file to perform the operation on. (required)
     * @return GetDocxGetFormFieldsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GetDocxGetFormFieldsResponse editDocumentDocxGetFormFields(File inputFile) throws ApiException {
        ApiResponse<GetDocxGetFormFieldsResponse> resp = editDocumentDocxGetFormFieldsWithHttpInfo(inputFile);
        return resp.getData();
    }

    /**
     * Get all form fields in a Word DOCX document
     * Returns all the content controls, used for creating form fields, as well as handlebar style text-based form fields such as \&quot;{{FieldName}}\&quot;, in a Office Word Document (docx)
     * @param inputFile Input file to perform the operation on. (required)
     * @return ApiResponse&lt;GetDocxGetFormFieldsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GetDocxGetFormFieldsResponse> editDocumentDocxGetFormFieldsWithHttpInfo(File inputFile) throws ApiException {
        com.squareup.okhttp.Call call = editDocumentDocxGetFormFieldsValidateBeforeCall(inputFile, null, null);
        Type localVarReturnType = new TypeToken<GetDocxGetFormFieldsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get all form fields in a Word DOCX document (asynchronously)
     * Returns all the content controls, used for creating form fields, as well as handlebar style text-based form fields such as \&quot;{{FieldName}}\&quot;, in a Office Word Document (docx)
     * @param inputFile Input file to perform the operation on. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call editDocumentDocxGetFormFieldsAsync(File inputFile, final ApiCallback<GetDocxGetFormFieldsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = editDocumentDocxGetFormFieldsValidateBeforeCall(inputFile, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetDocxGetFormFieldsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for editDocumentDocxGetHeadersAndFooters
     * @param reqConfig Document input request (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call editDocumentDocxGetHeadersAndFootersCall(GetDocxHeadersAndFootersRequest reqConfig, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = reqConfig;

        // create path and map variables
        String localVarPath = "/convert/edit/docx/get-headers-and-footers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Apikey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call editDocumentDocxGetHeadersAndFootersValidateBeforeCall(GetDocxHeadersAndFootersRequest reqConfig, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'reqConfig' is set
        if (reqConfig == null) {
            throw new ApiException("Missing the required parameter 'reqConfig' when calling editDocumentDocxGetHeadersAndFooters(Async)");
        }
        

        com.squareup.okhttp.Call call = editDocumentDocxGetHeadersAndFootersCall(reqConfig, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get content of a footer from a Word DOCX document
     * Returns the footer content from a Word Document (DOCX) format file
     * @param reqConfig Document input request (required)
     * @return GetDocxHeadersAndFootersResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GetDocxHeadersAndFootersResponse editDocumentDocxGetHeadersAndFooters(GetDocxHeadersAndFootersRequest reqConfig) throws ApiException {
        ApiResponse<GetDocxHeadersAndFootersResponse> resp = editDocumentDocxGetHeadersAndFootersWithHttpInfo(reqConfig);
        return resp.getData();
    }

    /**
     * Get content of a footer from a Word DOCX document
     * Returns the footer content from a Word Document (DOCX) format file
     * @param reqConfig Document input request (required)
     * @return ApiResponse&lt;GetDocxHeadersAndFootersResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GetDocxHeadersAndFootersResponse> editDocumentDocxGetHeadersAndFootersWithHttpInfo(GetDocxHeadersAndFootersRequest reqConfig) throws ApiException {
        com.squareup.okhttp.Call call = editDocumentDocxGetHeadersAndFootersValidateBeforeCall(reqConfig, null, null);
        Type localVarReturnType = new TypeToken<GetDocxHeadersAndFootersResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get content of a footer from a Word DOCX document (asynchronously)
     * Returns the footer content from a Word Document (DOCX) format file
     * @param reqConfig Document input request (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call editDocumentDocxGetHeadersAndFootersAsync(GetDocxHeadersAndFootersRequest reqConfig, final ApiCallback<GetDocxHeadersAndFootersResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = editDocumentDocxGetHeadersAndFootersValidateBeforeCall(reqConfig, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetDocxHeadersAndFootersResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for editDocumentDocxGetImages
     * @param reqConfig Document input request (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call editDocumentDocxGetImagesCall(GetDocxImagesRequest reqConfig, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = reqConfig;

        // create path and map variables
        String localVarPath = "/convert/edit/docx/get-images";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Apikey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call editDocumentDocxGetImagesValidateBeforeCall(GetDocxImagesRequest reqConfig, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'reqConfig' is set
        if (reqConfig == null) {
            throw new ApiException("Missing the required parameter 'reqConfig' when calling editDocumentDocxGetImages(Async)");
        }
        

        com.squareup.okhttp.Call call = editDocumentDocxGetImagesCall(reqConfig, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get images from a Word DOCX document
     * Returns the images defined in the Word Document (DOCX) format file
     * @param reqConfig Document input request (required)
     * @return GetDocxImagesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GetDocxImagesResponse editDocumentDocxGetImages(GetDocxImagesRequest reqConfig) throws ApiException {
        ApiResponse<GetDocxImagesResponse> resp = editDocumentDocxGetImagesWithHttpInfo(reqConfig);
        return resp.getData();
    }

    /**
     * Get images from a Word DOCX document
     * Returns the images defined in the Word Document (DOCX) format file
     * @param reqConfig Document input request (required)
     * @return ApiResponse&lt;GetDocxImagesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GetDocxImagesResponse> editDocumentDocxGetImagesWithHttpInfo(GetDocxImagesRequest reqConfig) throws ApiException {
        com.squareup.okhttp.Call call = editDocumentDocxGetImagesValidateBeforeCall(reqConfig, null, null);
        Type localVarReturnType = new TypeToken<GetDocxImagesResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get images from a Word DOCX document (asynchronously)
     * Returns the images defined in the Word Document (DOCX) format file
     * @param reqConfig Document input request (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call editDocumentDocxGetImagesAsync(GetDocxImagesRequest reqConfig, final ApiCallback<GetDocxImagesResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = editDocumentDocxGetImagesValidateBeforeCall(reqConfig, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetDocxImagesResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for editDocumentDocxGetMacroInformation
     * @param inputFile Input file to perform the operation on. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call editDocumentDocxGetMacroInformationCall(File inputFile, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/convert/edit/docx/get-macros";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (inputFile != null)
        localVarFormParams.put("inputFile", inputFile);

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Apikey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call editDocumentDocxGetMacroInformationValidateBeforeCall(File inputFile, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'inputFile' is set
        if (inputFile == null) {
            throw new ApiException("Missing the required parameter 'inputFile' when calling editDocumentDocxGetMacroInformation(Async)");
        }
        

        com.squareup.okhttp.Call call = editDocumentDocxGetMacroInformationCall(inputFile, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get macro information from a Word DOCX/DOCM document
     * Returns information about the Macros (e.g. VBA) defined in the Word Document
     * @param inputFile Input file to perform the operation on. (required)
     * @return GetMacrosResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GetMacrosResponse editDocumentDocxGetMacroInformation(File inputFile) throws ApiException {
        ApiResponse<GetMacrosResponse> resp = editDocumentDocxGetMacroInformationWithHttpInfo(inputFile);
        return resp.getData();
    }

    /**
     * Get macro information from a Word DOCX/DOCM document
     * Returns information about the Macros (e.g. VBA) defined in the Word Document
     * @param inputFile Input file to perform the operation on. (required)
     * @return ApiResponse&lt;GetMacrosResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GetMacrosResponse> editDocumentDocxGetMacroInformationWithHttpInfo(File inputFile) throws ApiException {
        com.squareup.okhttp.Call call = editDocumentDocxGetMacroInformationValidateBeforeCall(inputFile, null, null);
        Type localVarReturnType = new TypeToken<GetMacrosResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get macro information from a Word DOCX/DOCM document (asynchronously)
     * Returns information about the Macros (e.g. VBA) defined in the Word Document
     * @param inputFile Input file to perform the operation on. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call editDocumentDocxGetMacroInformationAsync(File inputFile, final ApiCallback<GetMacrosResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = editDocumentDocxGetMacroInformationValidateBeforeCall(inputFile, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetMacrosResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for editDocumentDocxGetMetadataProperties
     * @param inputFile Input file to perform the operation on. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call editDocumentDocxGetMetadataPropertiesCall(File inputFile, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/convert/edit/docx/get-metadata";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (inputFile != null)
        localVarFormParams.put("inputFile", inputFile);

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Apikey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call editDocumentDocxGetMetadataPropertiesValidateBeforeCall(File inputFile, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'inputFile' is set
        if (inputFile == null) {
            throw new ApiException("Missing the required parameter 'inputFile' when calling editDocumentDocxGetMetadataProperties(Async)");
        }
        

        com.squareup.okhttp.Call call = editDocumentDocxGetMetadataPropertiesCall(inputFile, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get all metadata properties in Word DOCX document
     * Returns all the metadata properties in an Office Word Document (docx)
     * @param inputFile Input file to perform the operation on. (required)
     * @return GetDocxMetadataPropertiesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GetDocxMetadataPropertiesResponse editDocumentDocxGetMetadataProperties(File inputFile) throws ApiException {
        ApiResponse<GetDocxMetadataPropertiesResponse> resp = editDocumentDocxGetMetadataPropertiesWithHttpInfo(inputFile);
        return resp.getData();
    }

    /**
     * Get all metadata properties in Word DOCX document
     * Returns all the metadata properties in an Office Word Document (docx)
     * @param inputFile Input file to perform the operation on. (required)
     * @return ApiResponse&lt;GetDocxMetadataPropertiesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GetDocxMetadataPropertiesResponse> editDocumentDocxGetMetadataPropertiesWithHttpInfo(File inputFile) throws ApiException {
        com.squareup.okhttp.Call call = editDocumentDocxGetMetadataPropertiesValidateBeforeCall(inputFile, null, null);
        Type localVarReturnType = new TypeToken<GetDocxMetadataPropertiesResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get all metadata properties in Word DOCX document (asynchronously)
     * Returns all the metadata properties in an Office Word Document (docx)
     * @param inputFile Input file to perform the operation on. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call editDocumentDocxGetMetadataPropertiesAsync(File inputFile, final ApiCallback<GetDocxMetadataPropertiesResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = editDocumentDocxGetMetadataPropertiesValidateBeforeCall(inputFile, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetDocxMetadataPropertiesResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for editDocumentDocxGetSections
     * @param reqConfig Document input request (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call editDocumentDocxGetSectionsCall(GetDocxSectionsRequest reqConfig, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = reqConfig;

        // create path and map variables
        String localVarPath = "/convert/edit/docx/get-sections";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Apikey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call editDocumentDocxGetSectionsValidateBeforeCall(GetDocxSectionsRequest reqConfig, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'reqConfig' is set
        if (reqConfig == null) {
            throw new ApiException("Missing the required parameter 'reqConfig' when calling editDocumentDocxGetSections(Async)");
        }
        

        com.squareup.okhttp.Call call = editDocumentDocxGetSectionsCall(reqConfig, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get sections from a Word DOCX document
     * Returns the sections defined in the Word Document (DOCX) format file
     * @param reqConfig Document input request (required)
     * @return GetDocxSectionsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GetDocxSectionsResponse editDocumentDocxGetSections(GetDocxSectionsRequest reqConfig) throws ApiException {
        ApiResponse<GetDocxSectionsResponse> resp = editDocumentDocxGetSectionsWithHttpInfo(reqConfig);
        return resp.getData();
    }

    /**
     * Get sections from a Word DOCX document
     * Returns the sections defined in the Word Document (DOCX) format file
     * @param reqConfig Document input request (required)
     * @return ApiResponse&lt;GetDocxSectionsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GetDocxSectionsResponse> editDocumentDocxGetSectionsWithHttpInfo(GetDocxSectionsRequest reqConfig) throws ApiException {
        com.squareup.okhttp.Call call = editDocumentDocxGetSectionsValidateBeforeCall(reqConfig, null, null);
        Type localVarReturnType = new TypeToken<GetDocxSectionsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get sections from a Word DOCX document (asynchronously)
     * Returns the sections defined in the Word Document (DOCX) format file
     * @param reqConfig Document input request (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call editDocumentDocxGetSectionsAsync(GetDocxSectionsRequest reqConfig, final ApiCallback<GetDocxSectionsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = editDocumentDocxGetSectionsValidateBeforeCall(reqConfig, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetDocxSectionsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for editDocumentDocxGetStyles
     * @param reqConfig Document input request (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call editDocumentDocxGetStylesCall(GetDocxStylesRequest reqConfig, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = reqConfig;

        // create path and map variables
        String localVarPath = "/convert/edit/docx/get-styles";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Apikey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call editDocumentDocxGetStylesValidateBeforeCall(GetDocxStylesRequest reqConfig, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'reqConfig' is set
        if (reqConfig == null) {
            throw new ApiException("Missing the required parameter 'reqConfig' when calling editDocumentDocxGetStyles(Async)");
        }
        

        com.squareup.okhttp.Call call = editDocumentDocxGetStylesCall(reqConfig, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get styles from a Word DOCX document
     * Returns the styles defined in the Word Document (DOCX) format file
     * @param reqConfig Document input request (required)
     * @return GetDocxStylesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GetDocxStylesResponse editDocumentDocxGetStyles(GetDocxStylesRequest reqConfig) throws ApiException {
        ApiResponse<GetDocxStylesResponse> resp = editDocumentDocxGetStylesWithHttpInfo(reqConfig);
        return resp.getData();
    }

    /**
     * Get styles from a Word DOCX document
     * Returns the styles defined in the Word Document (DOCX) format file
     * @param reqConfig Document input request (required)
     * @return ApiResponse&lt;GetDocxStylesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GetDocxStylesResponse> editDocumentDocxGetStylesWithHttpInfo(GetDocxStylesRequest reqConfig) throws ApiException {
        com.squareup.okhttp.Call call = editDocumentDocxGetStylesValidateBeforeCall(reqConfig, null, null);
        Type localVarReturnType = new TypeToken<GetDocxStylesResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get styles from a Word DOCX document (asynchronously)
     * Returns the styles defined in the Word Document (DOCX) format file
     * @param reqConfig Document input request (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call editDocumentDocxGetStylesAsync(GetDocxStylesRequest reqConfig, final ApiCallback<GetDocxStylesResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = editDocumentDocxGetStylesValidateBeforeCall(reqConfig, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetDocxStylesResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for editDocumentDocxGetTableByIndex
     * @param reqConfig Document input request (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call editDocumentDocxGetTableByIndexCall(GetDocxTableByIndexRequest reqConfig, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = reqConfig;

        // create path and map variables
        String localVarPath = "/convert/edit/docx/get-table/by-index";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Apikey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call editDocumentDocxGetTableByIndexValidateBeforeCall(GetDocxTableByIndexRequest reqConfig, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'reqConfig' is set
        if (reqConfig == null) {
            throw new ApiException("Missing the required parameter 'reqConfig' when calling editDocumentDocxGetTableByIndex(Async)");
        }
        

        com.squareup.okhttp.Call call = editDocumentDocxGetTableByIndexCall(reqConfig, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a specific table by index in a Word DOCX document
     * Returns the specific table object by its 0-based index in an Office Word Document (DOCX)
     * @param reqConfig Document input request (required)
     * @return GetDocxTableByIndexResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GetDocxTableByIndexResponse editDocumentDocxGetTableByIndex(GetDocxTableByIndexRequest reqConfig) throws ApiException {
        ApiResponse<GetDocxTableByIndexResponse> resp = editDocumentDocxGetTableByIndexWithHttpInfo(reqConfig);
        return resp.getData();
    }

    /**
     * Get a specific table by index in a Word DOCX document
     * Returns the specific table object by its 0-based index in an Office Word Document (DOCX)
     * @param reqConfig Document input request (required)
     * @return ApiResponse&lt;GetDocxTableByIndexResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GetDocxTableByIndexResponse> editDocumentDocxGetTableByIndexWithHttpInfo(GetDocxTableByIndexRequest reqConfig) throws ApiException {
        com.squareup.okhttp.Call call = editDocumentDocxGetTableByIndexValidateBeforeCall(reqConfig, null, null);
        Type localVarReturnType = new TypeToken<GetDocxTableByIndexResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a specific table by index in a Word DOCX document (asynchronously)
     * Returns the specific table object by its 0-based index in an Office Word Document (DOCX)
     * @param reqConfig Document input request (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call editDocumentDocxGetTableByIndexAsync(GetDocxTableByIndexRequest reqConfig, final ApiCallback<GetDocxTableByIndexResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = editDocumentDocxGetTableByIndexValidateBeforeCall(reqConfig, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetDocxTableByIndexResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for editDocumentDocxGetTableRow
     * @param reqConfig Document input request (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call editDocumentDocxGetTableRowCall(GetDocxTableRowRequest reqConfig, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = reqConfig;

        // create path and map variables
        String localVarPath = "/convert/edit/docx/get-table-row";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Apikey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call editDocumentDocxGetTableRowValidateBeforeCall(GetDocxTableRowRequest reqConfig, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'reqConfig' is set
        if (reqConfig == null) {
            throw new ApiException("Missing the required parameter 'reqConfig' when calling editDocumentDocxGetTableRow(Async)");
        }
        

        com.squareup.okhttp.Call call = editDocumentDocxGetTableRowCall(reqConfig, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Gets the contents of an existing table row in an existing table in a Word DOCX document
     * Gets the contents of an existing table row in a Word DOCX Document and returns the result.
     * @param reqConfig Document input request (required)
     * @return GetDocxTableRowResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GetDocxTableRowResponse editDocumentDocxGetTableRow(GetDocxTableRowRequest reqConfig) throws ApiException {
        ApiResponse<GetDocxTableRowResponse> resp = editDocumentDocxGetTableRowWithHttpInfo(reqConfig);
        return resp.getData();
    }

    /**
     * Gets the contents of an existing table row in an existing table in a Word DOCX document
     * Gets the contents of an existing table row in a Word DOCX Document and returns the result.
     * @param reqConfig Document input request (required)
     * @return ApiResponse&lt;GetDocxTableRowResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GetDocxTableRowResponse> editDocumentDocxGetTableRowWithHttpInfo(GetDocxTableRowRequest reqConfig) throws ApiException {
        com.squareup.okhttp.Call call = editDocumentDocxGetTableRowValidateBeforeCall(reqConfig, null, null);
        Type localVarReturnType = new TypeToken<GetDocxTableRowResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets the contents of an existing table row in an existing table in a Word DOCX document (asynchronously)
     * Gets the contents of an existing table row in a Word DOCX Document and returns the result.
     * @param reqConfig Document input request (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call editDocumentDocxGetTableRowAsync(GetDocxTableRowRequest reqConfig, final ApiCallback<GetDocxTableRowResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = editDocumentDocxGetTableRowValidateBeforeCall(reqConfig, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetDocxTableRowResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for editDocumentDocxGetTables
     * @param reqConfig Document input request (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call editDocumentDocxGetTablesCall(GetDocxTablesRequest reqConfig, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = reqConfig;

        // create path and map variables
        String localVarPath = "/convert/edit/docx/get-tables";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Apikey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call editDocumentDocxGetTablesValidateBeforeCall(GetDocxTablesRequest reqConfig, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'reqConfig' is set
        if (reqConfig == null) {
            throw new ApiException("Missing the required parameter 'reqConfig' when calling editDocumentDocxGetTables(Async)");
        }
        

        com.squareup.okhttp.Call call = editDocumentDocxGetTablesCall(reqConfig, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get all tables in Word DOCX document
     * Returns all the table objects in an Office Word Document (docx)
     * @param reqConfig Document input request (required)
     * @return GetDocxTablesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GetDocxTablesResponse editDocumentDocxGetTables(GetDocxTablesRequest reqConfig) throws ApiException {
        ApiResponse<GetDocxTablesResponse> resp = editDocumentDocxGetTablesWithHttpInfo(reqConfig);
        return resp.getData();
    }

    /**
     * Get all tables in Word DOCX document
     * Returns all the table objects in an Office Word Document (docx)
     * @param reqConfig Document input request (required)
     * @return ApiResponse&lt;GetDocxTablesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GetDocxTablesResponse> editDocumentDocxGetTablesWithHttpInfo(GetDocxTablesRequest reqConfig) throws ApiException {
        com.squareup.okhttp.Call call = editDocumentDocxGetTablesValidateBeforeCall(reqConfig, null, null);
        Type localVarReturnType = new TypeToken<GetDocxTablesResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get all tables in Word DOCX document (asynchronously)
     * Returns all the table objects in an Office Word Document (docx)
     * @param reqConfig Document input request (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call editDocumentDocxGetTablesAsync(GetDocxTablesRequest reqConfig, final ApiCallback<GetDocxTablesResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = editDocumentDocxGetTablesValidateBeforeCall(reqConfig, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetDocxTablesResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for editDocumentDocxInsertCommentOnParagraph
     * @param reqConfig Document input request (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call editDocumentDocxInsertCommentOnParagraphCall(DocxInsertCommentOnParagraphRequest reqConfig, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = reqConfig;

        // create path and map variables
        String localVarPath = "/convert/edit/docx/insert-comment/on/paragraph";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Apikey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call editDocumentDocxInsertCommentOnParagraphValidateBeforeCall(DocxInsertCommentOnParagraphRequest reqConfig, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'reqConfig' is set
        if (reqConfig == null) {
            throw new ApiException("Missing the required parameter 'reqConfig' when calling editDocumentDocxInsertCommentOnParagraph(Async)");
        }
        

        com.squareup.okhttp.Call call = editDocumentDocxInsertCommentOnParagraphCall(reqConfig, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Insert a new comment into a Word DOCX document attached to a paragraph
     * Adds a new comment into a Word DOCX document attached to a paragraph and returns the result.  Call Finish Editing on the output URL to complete the operation.
     * @param reqConfig Document input request (required)
     * @return InsertDocxCommentOnParagraphResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InsertDocxCommentOnParagraphResponse editDocumentDocxInsertCommentOnParagraph(DocxInsertCommentOnParagraphRequest reqConfig) throws ApiException {
        ApiResponse<InsertDocxCommentOnParagraphResponse> resp = editDocumentDocxInsertCommentOnParagraphWithHttpInfo(reqConfig);
        return resp.getData();
    }

    /**
     * Insert a new comment into a Word DOCX document attached to a paragraph
     * Adds a new comment into a Word DOCX document attached to a paragraph and returns the result.  Call Finish Editing on the output URL to complete the operation.
     * @param reqConfig Document input request (required)
     * @return ApiResponse&lt;InsertDocxCommentOnParagraphResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InsertDocxCommentOnParagraphResponse> editDocumentDocxInsertCommentOnParagraphWithHttpInfo(DocxInsertCommentOnParagraphRequest reqConfig) throws ApiException {
        com.squareup.okhttp.Call call = editDocumentDocxInsertCommentOnParagraphValidateBeforeCall(reqConfig, null, null);
        Type localVarReturnType = new TypeToken<InsertDocxCommentOnParagraphResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Insert a new comment into a Word DOCX document attached to a paragraph (asynchronously)
     * Adds a new comment into a Word DOCX document attached to a paragraph and returns the result.  Call Finish Editing on the output URL to complete the operation.
     * @param reqConfig Document input request (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call editDocumentDocxInsertCommentOnParagraphAsync(DocxInsertCommentOnParagraphRequest reqConfig, final ApiCallback<InsertDocxCommentOnParagraphResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = editDocumentDocxInsertCommentOnParagraphValidateBeforeCall(reqConfig, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InsertDocxCommentOnParagraphResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for editDocumentDocxInsertImage
     * @param reqConfig Document input request (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call editDocumentDocxInsertImageCall(DocxInsertImageRequest reqConfig, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = reqConfig;

        // create path and map variables
        String localVarPath = "/convert/edit/docx/insert-image";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Apikey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call editDocumentDocxInsertImageValidateBeforeCall(DocxInsertImageRequest reqConfig, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'reqConfig' is set
        if (reqConfig == null) {
            throw new ApiException("Missing the required parameter 'reqConfig' when calling editDocumentDocxInsertImage(Async)");
        }
        

        com.squareup.okhttp.Call call = editDocumentDocxInsertImageCall(reqConfig, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Insert image into a Word DOCX document
     * Set the footer in a Word Document (DOCX).  Call Finish Editing on the output URL to complete the operation.
     * @param reqConfig Document input request (required)
     * @return DocxInsertImageResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DocxInsertImageResponse editDocumentDocxInsertImage(DocxInsertImageRequest reqConfig) throws ApiException {
        ApiResponse<DocxInsertImageResponse> resp = editDocumentDocxInsertImageWithHttpInfo(reqConfig);
        return resp.getData();
    }

    /**
     * Insert image into a Word DOCX document
     * Set the footer in a Word Document (DOCX).  Call Finish Editing on the output URL to complete the operation.
     * @param reqConfig Document input request (required)
     * @return ApiResponse&lt;DocxInsertImageResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DocxInsertImageResponse> editDocumentDocxInsertImageWithHttpInfo(DocxInsertImageRequest reqConfig) throws ApiException {
        com.squareup.okhttp.Call call = editDocumentDocxInsertImageValidateBeforeCall(reqConfig, null, null);
        Type localVarReturnType = new TypeToken<DocxInsertImageResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Insert image into a Word DOCX document (asynchronously)
     * Set the footer in a Word Document (DOCX).  Call Finish Editing on the output URL to complete the operation.
     * @param reqConfig Document input request (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call editDocumentDocxInsertImageAsync(DocxInsertImageRequest reqConfig, final ApiCallback<DocxInsertImageResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = editDocumentDocxInsertImageValidateBeforeCall(reqConfig, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DocxInsertImageResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for editDocumentDocxInsertParagraph
     * @param reqConfig Document input request (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call editDocumentDocxInsertParagraphCall(InsertDocxInsertParagraphRequest reqConfig, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = reqConfig;

        // create path and map variables
        String localVarPath = "/convert/edit/docx/insert-paragraph";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Apikey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call editDocumentDocxInsertParagraphValidateBeforeCall(InsertDocxInsertParagraphRequest reqConfig, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'reqConfig' is set
        if (reqConfig == null) {
            throw new ApiException("Missing the required parameter 'reqConfig' when calling editDocumentDocxInsertParagraph(Async)");
        }
        

        com.squareup.okhttp.Call call = editDocumentDocxInsertParagraphCall(reqConfig, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Insert a new paragraph into a Word DOCX document
     * Adds a new paragraph into a DOCX and returns the result.  You can insert at the beginning/end of a document, or before/after an existing object using its Path (location within the document).  Call Finish Editing on the output URL to complete the operation.
     * @param reqConfig Document input request (required)
     * @return InsertDocxInsertParagraphResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InsertDocxInsertParagraphResponse editDocumentDocxInsertParagraph(InsertDocxInsertParagraphRequest reqConfig) throws ApiException {
        ApiResponse<InsertDocxInsertParagraphResponse> resp = editDocumentDocxInsertParagraphWithHttpInfo(reqConfig);
        return resp.getData();
    }

    /**
     * Insert a new paragraph into a Word DOCX document
     * Adds a new paragraph into a DOCX and returns the result.  You can insert at the beginning/end of a document, or before/after an existing object using its Path (location within the document).  Call Finish Editing on the output URL to complete the operation.
     * @param reqConfig Document input request (required)
     * @return ApiResponse&lt;InsertDocxInsertParagraphResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InsertDocxInsertParagraphResponse> editDocumentDocxInsertParagraphWithHttpInfo(InsertDocxInsertParagraphRequest reqConfig) throws ApiException {
        com.squareup.okhttp.Call call = editDocumentDocxInsertParagraphValidateBeforeCall(reqConfig, null, null);
        Type localVarReturnType = new TypeToken<InsertDocxInsertParagraphResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Insert a new paragraph into a Word DOCX document (asynchronously)
     * Adds a new paragraph into a DOCX and returns the result.  You can insert at the beginning/end of a document, or before/after an existing object using its Path (location within the document).  Call Finish Editing on the output URL to complete the operation.
     * @param reqConfig Document input request (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call editDocumentDocxInsertParagraphAsync(InsertDocxInsertParagraphRequest reqConfig, final ApiCallback<InsertDocxInsertParagraphResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = editDocumentDocxInsertParagraphValidateBeforeCall(reqConfig, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InsertDocxInsertParagraphResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for editDocumentDocxInsertTable
     * @param reqConfig Document input request (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call editDocumentDocxInsertTableCall(InsertDocxTablesRequest reqConfig, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = reqConfig;

        // create path and map variables
        String localVarPath = "/convert/edit/docx/insert-table";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Apikey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call editDocumentDocxInsertTableValidateBeforeCall(InsertDocxTablesRequest reqConfig, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'reqConfig' is set
        if (reqConfig == null) {
            throw new ApiException("Missing the required parameter 'reqConfig' when calling editDocumentDocxInsertTable(Async)");
        }
        

        com.squareup.okhttp.Call call = editDocumentDocxInsertTableCall(reqConfig, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Insert a new table into a Word DOCX document
     * Adds a new table into a DOCX and returns the result.  Call Finish Editing on the output URL to complete the operation.
     * @param reqConfig Document input request (required)
     * @return InsertDocxTablesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InsertDocxTablesResponse editDocumentDocxInsertTable(InsertDocxTablesRequest reqConfig) throws ApiException {
        ApiResponse<InsertDocxTablesResponse> resp = editDocumentDocxInsertTableWithHttpInfo(reqConfig);
        return resp.getData();
    }

    /**
     * Insert a new table into a Word DOCX document
     * Adds a new table into a DOCX and returns the result.  Call Finish Editing on the output URL to complete the operation.
     * @param reqConfig Document input request (required)
     * @return ApiResponse&lt;InsertDocxTablesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InsertDocxTablesResponse> editDocumentDocxInsertTableWithHttpInfo(InsertDocxTablesRequest reqConfig) throws ApiException {
        com.squareup.okhttp.Call call = editDocumentDocxInsertTableValidateBeforeCall(reqConfig, null, null);
        Type localVarReturnType = new TypeToken<InsertDocxTablesResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Insert a new table into a Word DOCX document (asynchronously)
     * Adds a new table into a DOCX and returns the result.  Call Finish Editing on the output URL to complete the operation.
     * @param reqConfig Document input request (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call editDocumentDocxInsertTableAsync(InsertDocxTablesRequest reqConfig, final ApiCallback<InsertDocxTablesResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = editDocumentDocxInsertTableValidateBeforeCall(reqConfig, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InsertDocxTablesResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for editDocumentDocxInsertTableRow
     * @param reqConfig Document input request (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call editDocumentDocxInsertTableRowCall(InsertDocxTableRowRequest reqConfig, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = reqConfig;

        // create path and map variables
        String localVarPath = "/convert/edit/docx/insert-table-row";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Apikey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call editDocumentDocxInsertTableRowValidateBeforeCall(InsertDocxTableRowRequest reqConfig, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'reqConfig' is set
        if (reqConfig == null) {
            throw new ApiException("Missing the required parameter 'reqConfig' when calling editDocumentDocxInsertTableRow(Async)");
        }
        

        com.squareup.okhttp.Call call = editDocumentDocxInsertTableRowCall(reqConfig, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Insert a new row into an existing table in a Word DOCX document
     * Adds a new table row into a DOCX Document and returns the result.  Call Finish Editing on the output URL to complete the operation.
     * @param reqConfig Document input request (required)
     * @return InsertDocxTableRowResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InsertDocxTableRowResponse editDocumentDocxInsertTableRow(InsertDocxTableRowRequest reqConfig) throws ApiException {
        ApiResponse<InsertDocxTableRowResponse> resp = editDocumentDocxInsertTableRowWithHttpInfo(reqConfig);
        return resp.getData();
    }

    /**
     * Insert a new row into an existing table in a Word DOCX document
     * Adds a new table row into a DOCX Document and returns the result.  Call Finish Editing on the output URL to complete the operation.
     * @param reqConfig Document input request (required)
     * @return ApiResponse&lt;InsertDocxTableRowResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InsertDocxTableRowResponse> editDocumentDocxInsertTableRowWithHttpInfo(InsertDocxTableRowRequest reqConfig) throws ApiException {
        com.squareup.okhttp.Call call = editDocumentDocxInsertTableRowValidateBeforeCall(reqConfig, null, null);
        Type localVarReturnType = new TypeToken<InsertDocxTableRowResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Insert a new row into an existing table in a Word DOCX document (asynchronously)
     * Adds a new table row into a DOCX Document and returns the result.  Call Finish Editing on the output URL to complete the operation.
     * @param reqConfig Document input request (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call editDocumentDocxInsertTableRowAsync(InsertDocxTableRowRequest reqConfig, final ApiCallback<InsertDocxTableRowResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = editDocumentDocxInsertTableRowValidateBeforeCall(reqConfig, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InsertDocxTableRowResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for editDocumentDocxPages
     * @param reqConfig Document input request (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call editDocumentDocxPagesCall(GetDocxPagesRequest reqConfig, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = reqConfig;

        // create path and map variables
        String localVarPath = "/convert/edit/docx/get-pages";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Apikey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call editDocumentDocxPagesValidateBeforeCall(GetDocxPagesRequest reqConfig, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'reqConfig' is set
        if (reqConfig == null) {
            throw new ApiException("Missing the required parameter 'reqConfig' when calling editDocumentDocxPages(Async)");
        }
        

        com.squareup.okhttp.Call call = editDocumentDocxPagesCall(reqConfig, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get pages and content from a Word DOCX document
     * Returns the pages and contents of each page defined in the Word Document (DOCX) format file
     * @param reqConfig Document input request (required)
     * @return GetDocxPagesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GetDocxPagesResponse editDocumentDocxPages(GetDocxPagesRequest reqConfig) throws ApiException {
        ApiResponse<GetDocxPagesResponse> resp = editDocumentDocxPagesWithHttpInfo(reqConfig);
        return resp.getData();
    }

    /**
     * Get pages and content from a Word DOCX document
     * Returns the pages and contents of each page defined in the Word Document (DOCX) format file
     * @param reqConfig Document input request (required)
     * @return ApiResponse&lt;GetDocxPagesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GetDocxPagesResponse> editDocumentDocxPagesWithHttpInfo(GetDocxPagesRequest reqConfig) throws ApiException {
        com.squareup.okhttp.Call call = editDocumentDocxPagesValidateBeforeCall(reqConfig, null, null);
        Type localVarReturnType = new TypeToken<GetDocxPagesResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get pages and content from a Word DOCX document (asynchronously)
     * Returns the pages and contents of each page defined in the Word Document (DOCX) format file
     * @param reqConfig Document input request (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call editDocumentDocxPagesAsync(GetDocxPagesRequest reqConfig, final ApiCallback<GetDocxPagesResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = editDocumentDocxPagesValidateBeforeCall(reqConfig, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetDocxPagesResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for editDocumentDocxRemoveAllComments
     * @param inputFile Input file to perform the operation on. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call editDocumentDocxRemoveAllCommentsCall(File inputFile, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/convert/edit/docx/comments/remove-all";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (inputFile != null)
        localVarFormParams.put("inputFile", inputFile);

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Apikey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call editDocumentDocxRemoveAllCommentsValidateBeforeCall(File inputFile, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'inputFile' is set
        if (inputFile == null) {
            throw new ApiException("Missing the required parameter 'inputFile' when calling editDocumentDocxRemoveAllComments(Async)");
        }
        

        com.squareup.okhttp.Call call = editDocumentDocxRemoveAllCommentsCall(inputFile, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Remove all comments from a Word DOCX document
     * Removes all of the comments from a Word Document.
     * @param inputFile Input file to perform the operation on. (required)
     * @return byte[]
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public byte[] editDocumentDocxRemoveAllComments(File inputFile) throws ApiException {
        ApiResponse<byte[]> resp = editDocumentDocxRemoveAllCommentsWithHttpInfo(inputFile);
        return resp.getData();
    }

    /**
     * Remove all comments from a Word DOCX document
     * Removes all of the comments from a Word Document.
     * @param inputFile Input file to perform the operation on. (required)
     * @return ApiResponse&lt;byte[]&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<byte[]> editDocumentDocxRemoveAllCommentsWithHttpInfo(File inputFile) throws ApiException {
        com.squareup.okhttp.Call call = editDocumentDocxRemoveAllCommentsValidateBeforeCall(inputFile, null, null);
        Type localVarReturnType = new TypeToken<byte[]>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Remove all comments from a Word DOCX document (asynchronously)
     * Removes all of the comments from a Word Document.
     * @param inputFile Input file to perform the operation on. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call editDocumentDocxRemoveAllCommentsAsync(File inputFile, final ApiCallback<byte[]> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = editDocumentDocxRemoveAllCommentsValidateBeforeCall(inputFile, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<byte[]>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for editDocumentDocxRemoveHeadersAndFooters
     * @param reqConfig Document input request (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call editDocumentDocxRemoveHeadersAndFootersCall(RemoveDocxHeadersAndFootersRequest reqConfig, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = reqConfig;

        // create path and map variables
        String localVarPath = "/convert/edit/docx/remove-headers-and-footers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Apikey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call editDocumentDocxRemoveHeadersAndFootersValidateBeforeCall(RemoveDocxHeadersAndFootersRequest reqConfig, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'reqConfig' is set
        if (reqConfig == null) {
            throw new ApiException("Missing the required parameter 'reqConfig' when calling editDocumentDocxRemoveHeadersAndFooters(Async)");
        }
        

        com.squareup.okhttp.Call call = editDocumentDocxRemoveHeadersAndFootersCall(reqConfig, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Remove headers and footers from Word DOCX document
     * Remove all headers, or footers, or both from a Word Document (DOCX).  Call Finish Editing on the output URL to complete the operation.
     * @param reqConfig Document input request (required)
     * @return RemoveDocxHeadersAndFootersResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RemoveDocxHeadersAndFootersResponse editDocumentDocxRemoveHeadersAndFooters(RemoveDocxHeadersAndFootersRequest reqConfig) throws ApiException {
        ApiResponse<RemoveDocxHeadersAndFootersResponse> resp = editDocumentDocxRemoveHeadersAndFootersWithHttpInfo(reqConfig);
        return resp.getData();
    }

    /**
     * Remove headers and footers from Word DOCX document
     * Remove all headers, or footers, or both from a Word Document (DOCX).  Call Finish Editing on the output URL to complete the operation.
     * @param reqConfig Document input request (required)
     * @return ApiResponse&lt;RemoveDocxHeadersAndFootersResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RemoveDocxHeadersAndFootersResponse> editDocumentDocxRemoveHeadersAndFootersWithHttpInfo(RemoveDocxHeadersAndFootersRequest reqConfig) throws ApiException {
        com.squareup.okhttp.Call call = editDocumentDocxRemoveHeadersAndFootersValidateBeforeCall(reqConfig, null, null);
        Type localVarReturnType = new TypeToken<RemoveDocxHeadersAndFootersResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Remove headers and footers from Word DOCX document (asynchronously)
     * Remove all headers, or footers, or both from a Word Document (DOCX).  Call Finish Editing on the output URL to complete the operation.
     * @param reqConfig Document input request (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call editDocumentDocxRemoveHeadersAndFootersAsync(RemoveDocxHeadersAndFootersRequest reqConfig, final ApiCallback<RemoveDocxHeadersAndFootersResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = editDocumentDocxRemoveHeadersAndFootersValidateBeforeCall(reqConfig, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RemoveDocxHeadersAndFootersResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for editDocumentDocxRemoveObject
     * @param reqConfig Document input request (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call editDocumentDocxRemoveObjectCall(DocxRemoveObjectRequest reqConfig, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = reqConfig;

        // create path and map variables
        String localVarPath = "/convert/edit/docx/remove-object";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Apikey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call editDocumentDocxRemoveObjectValidateBeforeCall(DocxRemoveObjectRequest reqConfig, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'reqConfig' is set
        if (reqConfig == null) {
            throw new ApiException("Missing the required parameter 'reqConfig' when calling editDocumentDocxRemoveObject(Async)");
        }
        

        com.squareup.okhttp.Call call = editDocumentDocxRemoveObjectCall(reqConfig, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete any object in a Word DOCX document
     * Delete any object, such as a paragraph, table, image, etc. from a Word Document (DOCX).  Pass in the Path of the object you would like to delete.  You can call other functions such as Get-Tables, Get-Images, Get-Body, etc. to get the paths of the objects in the document.  Call Finish Editing on the output URL to complete the operation.
     * @param reqConfig Document input request (required)
     * @return DocxRemoveObjectResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DocxRemoveObjectResponse editDocumentDocxRemoveObject(DocxRemoveObjectRequest reqConfig) throws ApiException {
        ApiResponse<DocxRemoveObjectResponse> resp = editDocumentDocxRemoveObjectWithHttpInfo(reqConfig);
        return resp.getData();
    }

    /**
     * Delete any object in a Word DOCX document
     * Delete any object, such as a paragraph, table, image, etc. from a Word Document (DOCX).  Pass in the Path of the object you would like to delete.  You can call other functions such as Get-Tables, Get-Images, Get-Body, etc. to get the paths of the objects in the document.  Call Finish Editing on the output URL to complete the operation.
     * @param reqConfig Document input request (required)
     * @return ApiResponse&lt;DocxRemoveObjectResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DocxRemoveObjectResponse> editDocumentDocxRemoveObjectWithHttpInfo(DocxRemoveObjectRequest reqConfig) throws ApiException {
        com.squareup.okhttp.Call call = editDocumentDocxRemoveObjectValidateBeforeCall(reqConfig, null, null);
        Type localVarReturnType = new TypeToken<DocxRemoveObjectResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete any object in a Word DOCX document (asynchronously)
     * Delete any object, such as a paragraph, table, image, etc. from a Word Document (DOCX).  Pass in the Path of the object you would like to delete.  You can call other functions such as Get-Tables, Get-Images, Get-Body, etc. to get the paths of the objects in the document.  Call Finish Editing on the output URL to complete the operation.
     * @param reqConfig Document input request (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call editDocumentDocxRemoveObjectAsync(DocxRemoveObjectRequest reqConfig, final ApiCallback<DocxRemoveObjectResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = editDocumentDocxRemoveObjectValidateBeforeCall(reqConfig, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DocxRemoveObjectResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for editDocumentDocxReplace
     * @param reqConfig Document string replacement configuration input (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call editDocumentDocxReplaceCall(ReplaceStringRequest reqConfig, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = reqConfig;

        // create path and map variables
        String localVarPath = "/convert/edit/docx/replace-all";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/octet-stream"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Apikey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call editDocumentDocxReplaceValidateBeforeCall(ReplaceStringRequest reqConfig, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'reqConfig' is set
        if (reqConfig == null) {
            throw new ApiException("Missing the required parameter 'reqConfig' when calling editDocumentDocxReplace(Async)");
        }
        

        com.squareup.okhttp.Call call = editDocumentDocxReplaceCall(reqConfig, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Replace string in Word DOCX document
     * Replace all instances of a string in an Office Word Document (docx)
     * @param reqConfig Document string replacement configuration input (required)
     * @return byte[]
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public byte[] editDocumentDocxReplace(ReplaceStringRequest reqConfig) throws ApiException {
        ApiResponse<byte[]> resp = editDocumentDocxReplaceWithHttpInfo(reqConfig);
        return resp.getData();
    }

    /**
     * Replace string in Word DOCX document
     * Replace all instances of a string in an Office Word Document (docx)
     * @param reqConfig Document string replacement configuration input (required)
     * @return ApiResponse&lt;byte[]&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<byte[]> editDocumentDocxReplaceWithHttpInfo(ReplaceStringRequest reqConfig) throws ApiException {
        com.squareup.okhttp.Call call = editDocumentDocxReplaceValidateBeforeCall(reqConfig, null, null);
        Type localVarReturnType = new TypeToken<byte[]>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Replace string in Word DOCX document (asynchronously)
     * Replace all instances of a string in an Office Word Document (docx)
     * @param reqConfig Document string replacement configuration input (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call editDocumentDocxReplaceAsync(ReplaceStringRequest reqConfig, final ApiCallback<byte[]> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = editDocumentDocxReplaceValidateBeforeCall(reqConfig, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<byte[]>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for editDocumentDocxReplaceMulti
     * @param reqConfig Document string replacement configuration input (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call editDocumentDocxReplaceMultiCall(MultiReplaceStringRequest reqConfig, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = reqConfig;

        // create path and map variables
        String localVarPath = "/convert/edit/docx/replace-all/multi";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/octet-stream"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Apikey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call editDocumentDocxReplaceMultiValidateBeforeCall(MultiReplaceStringRequest reqConfig, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'reqConfig' is set
        if (reqConfig == null) {
            throw new ApiException("Missing the required parameter 'reqConfig' when calling editDocumentDocxReplaceMulti(Async)");
        }
        

        com.squareup.okhttp.Call call = editDocumentDocxReplaceMultiCall(reqConfig, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Replace multiple strings in Word DOCX document, return result
     * Replace all instances of multiple strings in an Office Word Document (docx)
     * @param reqConfig Document string replacement configuration input (required)
     * @return byte[]
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public byte[] editDocumentDocxReplaceMulti(MultiReplaceStringRequest reqConfig) throws ApiException {
        ApiResponse<byte[]> resp = editDocumentDocxReplaceMultiWithHttpInfo(reqConfig);
        return resp.getData();
    }

    /**
     * Replace multiple strings in Word DOCX document, return result
     * Replace all instances of multiple strings in an Office Word Document (docx)
     * @param reqConfig Document string replacement configuration input (required)
     * @return ApiResponse&lt;byte[]&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<byte[]> editDocumentDocxReplaceMultiWithHttpInfo(MultiReplaceStringRequest reqConfig) throws ApiException {
        com.squareup.okhttp.Call call = editDocumentDocxReplaceMultiValidateBeforeCall(reqConfig, null, null);
        Type localVarReturnType = new TypeToken<byte[]>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Replace multiple strings in Word DOCX document, return result (asynchronously)
     * Replace all instances of multiple strings in an Office Word Document (docx)
     * @param reqConfig Document string replacement configuration input (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call editDocumentDocxReplaceMultiAsync(MultiReplaceStringRequest reqConfig, final ApiCallback<byte[]> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = editDocumentDocxReplaceMultiValidateBeforeCall(reqConfig, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<byte[]>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for editDocumentDocxReplaceMultiEditSession
     * @param reqConfig Document string replacement configuration input (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call editDocumentDocxReplaceMultiEditSessionCall(MultiReplaceStringRequest reqConfig, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = reqConfig;

        // create path and map variables
        String localVarPath = "/convert/edit/docx/replace-all/multi/edit-session";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Apikey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call editDocumentDocxReplaceMultiEditSessionValidateBeforeCall(MultiReplaceStringRequest reqConfig, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'reqConfig' is set
        if (reqConfig == null) {
            throw new ApiException("Missing the required parameter 'reqConfig' when calling editDocumentDocxReplaceMultiEditSession(Async)");
        }
        

        com.squareup.okhttp.Call call = editDocumentDocxReplaceMultiEditSessionCall(reqConfig, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Replace multiple strings in Word DOCX document, return edit session
     * Replace all instances of multiple strings in an Office Word Document (docx).  Returns an edit session URL so that you can chain together multiple edit operations without having to send the entire document contents back and forth multiple times.  Call the Finish Editing API to retrieve the final document once editing is complete.
     * @param reqConfig Document string replacement configuration input (required)
     * @return DocumentEditingEditSession
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DocumentEditingEditSession editDocumentDocxReplaceMultiEditSession(MultiReplaceStringRequest reqConfig) throws ApiException {
        ApiResponse<DocumentEditingEditSession> resp = editDocumentDocxReplaceMultiEditSessionWithHttpInfo(reqConfig);
        return resp.getData();
    }

    /**
     * Replace multiple strings in Word DOCX document, return edit session
     * Replace all instances of multiple strings in an Office Word Document (docx).  Returns an edit session URL so that you can chain together multiple edit operations without having to send the entire document contents back and forth multiple times.  Call the Finish Editing API to retrieve the final document once editing is complete.
     * @param reqConfig Document string replacement configuration input (required)
     * @return ApiResponse&lt;DocumentEditingEditSession&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DocumentEditingEditSession> editDocumentDocxReplaceMultiEditSessionWithHttpInfo(MultiReplaceStringRequest reqConfig) throws ApiException {
        com.squareup.okhttp.Call call = editDocumentDocxReplaceMultiEditSessionValidateBeforeCall(reqConfig, null, null);
        Type localVarReturnType = new TypeToken<DocumentEditingEditSession>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Replace multiple strings in Word DOCX document, return edit session (asynchronously)
     * Replace all instances of multiple strings in an Office Word Document (docx).  Returns an edit session URL so that you can chain together multiple edit operations without having to send the entire document contents back and forth multiple times.  Call the Finish Editing API to retrieve the final document once editing is complete.
     * @param reqConfig Document string replacement configuration input (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call editDocumentDocxReplaceMultiEditSessionAsync(MultiReplaceStringRequest reqConfig, final ApiCallback<DocumentEditingEditSession> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = editDocumentDocxReplaceMultiEditSessionValidateBeforeCall(reqConfig, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DocumentEditingEditSession>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for editDocumentDocxReplaceParagraph
     * @param reqConfig Document input request (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call editDocumentDocxReplaceParagraphCall(ReplaceDocxParagraphRequest reqConfig, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = reqConfig;

        // create path and map variables
        String localVarPath = "/convert/edit/docx/replace/paragraph";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Apikey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call editDocumentDocxReplaceParagraphValidateBeforeCall(ReplaceDocxParagraphRequest reqConfig, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'reqConfig' is set
        if (reqConfig == null) {
            throw new ApiException("Missing the required parameter 'reqConfig' when calling editDocumentDocxReplaceParagraph(Async)");
        }
        

        com.squareup.okhttp.Call call = editDocumentDocxReplaceParagraphCall(reqConfig, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Replace matching paragraphs in a Word DOCX document
     * Returns the edited Word Document (DOCX) format file with the matching paragraphs replaced as requested.  Replace a paragraph with another object such as an image.  Useful for performing templating operations.
     * @param reqConfig Document input request (required)
     * @return ReplaceDocxParagraphResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ReplaceDocxParagraphResponse editDocumentDocxReplaceParagraph(ReplaceDocxParagraphRequest reqConfig) throws ApiException {
        ApiResponse<ReplaceDocxParagraphResponse> resp = editDocumentDocxReplaceParagraphWithHttpInfo(reqConfig);
        return resp.getData();
    }

    /**
     * Replace matching paragraphs in a Word DOCX document
     * Returns the edited Word Document (DOCX) format file with the matching paragraphs replaced as requested.  Replace a paragraph with another object such as an image.  Useful for performing templating operations.
     * @param reqConfig Document input request (required)
     * @return ApiResponse&lt;ReplaceDocxParagraphResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ReplaceDocxParagraphResponse> editDocumentDocxReplaceParagraphWithHttpInfo(ReplaceDocxParagraphRequest reqConfig) throws ApiException {
        com.squareup.okhttp.Call call = editDocumentDocxReplaceParagraphValidateBeforeCall(reqConfig, null, null);
        Type localVarReturnType = new TypeToken<ReplaceDocxParagraphResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Replace matching paragraphs in a Word DOCX document (asynchronously)
     * Returns the edited Word Document (DOCX) format file with the matching paragraphs replaced as requested.  Replace a paragraph with another object such as an image.  Useful for performing templating operations.
     * @param reqConfig Document input request (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call editDocumentDocxReplaceParagraphAsync(ReplaceDocxParagraphRequest reqConfig, final ApiCallback<ReplaceDocxParagraphResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = editDocumentDocxReplaceParagraphValidateBeforeCall(reqConfig, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ReplaceDocxParagraphResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for editDocumentDocxSetCustomMetadataProperties
     * @param input  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call editDocumentDocxSetCustomMetadataPropertiesCall(DocxSetCustomMetadataPropertiesRequest input, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = input;

        // create path and map variables
        String localVarPath = "/convert/edit/docx/set-metadata/custom-property";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Apikey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call editDocumentDocxSetCustomMetadataPropertiesValidateBeforeCall(DocxSetCustomMetadataPropertiesRequest input, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'input' is set
        if (input == null) {
            throw new ApiException("Missing the required parameter 'input' when calling editDocumentDocxSetCustomMetadataProperties(Async)");
        }
        

        com.squareup.okhttp.Call call = editDocumentDocxSetCustomMetadataPropertiesCall(input, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Set custom property metadata properties in Word DOCX document
     * Sets the custom property metadata for the metadata properties in an Office Word Document (docx)
     * @param input  (required)
     * @return byte[]
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public byte[] editDocumentDocxSetCustomMetadataProperties(DocxSetCustomMetadataPropertiesRequest input) throws ApiException {
        ApiResponse<byte[]> resp = editDocumentDocxSetCustomMetadataPropertiesWithHttpInfo(input);
        return resp.getData();
    }

    /**
     * Set custom property metadata properties in Word DOCX document
     * Sets the custom property metadata for the metadata properties in an Office Word Document (docx)
     * @param input  (required)
     * @return ApiResponse&lt;byte[]&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<byte[]> editDocumentDocxSetCustomMetadataPropertiesWithHttpInfo(DocxSetCustomMetadataPropertiesRequest input) throws ApiException {
        com.squareup.okhttp.Call call = editDocumentDocxSetCustomMetadataPropertiesValidateBeforeCall(input, null, null);
        Type localVarReturnType = new TypeToken<byte[]>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Set custom property metadata properties in Word DOCX document (asynchronously)
     * Sets the custom property metadata for the metadata properties in an Office Word Document (docx)
     * @param input  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call editDocumentDocxSetCustomMetadataPropertiesAsync(DocxSetCustomMetadataPropertiesRequest input, final ApiCallback<byte[]> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = editDocumentDocxSetCustomMetadataPropertiesValidateBeforeCall(input, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<byte[]>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for editDocumentDocxSetFooter
     * @param reqConfig Document input request (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call editDocumentDocxSetFooterCall(DocxSetFooterRequest reqConfig, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = reqConfig;

        // create path and map variables
        String localVarPath = "/convert/edit/docx/set-footer";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Apikey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call editDocumentDocxSetFooterValidateBeforeCall(DocxSetFooterRequest reqConfig, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'reqConfig' is set
        if (reqConfig == null) {
            throw new ApiException("Missing the required parameter 'reqConfig' when calling editDocumentDocxSetFooter(Async)");
        }
        

        com.squareup.okhttp.Call call = editDocumentDocxSetFooterCall(reqConfig, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Set the footer in a Word DOCX document
     * Set the footer in a Word Document (DOCX).  Call Finish Editing on the output URL to complete the operation.
     * @param reqConfig Document input request (required)
     * @return DocxSetFooterResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DocxSetFooterResponse editDocumentDocxSetFooter(DocxSetFooterRequest reqConfig) throws ApiException {
        ApiResponse<DocxSetFooterResponse> resp = editDocumentDocxSetFooterWithHttpInfo(reqConfig);
        return resp.getData();
    }

    /**
     * Set the footer in a Word DOCX document
     * Set the footer in a Word Document (DOCX).  Call Finish Editing on the output URL to complete the operation.
     * @param reqConfig Document input request (required)
     * @return ApiResponse&lt;DocxSetFooterResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DocxSetFooterResponse> editDocumentDocxSetFooterWithHttpInfo(DocxSetFooterRequest reqConfig) throws ApiException {
        com.squareup.okhttp.Call call = editDocumentDocxSetFooterValidateBeforeCall(reqConfig, null, null);
        Type localVarReturnType = new TypeToken<DocxSetFooterResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Set the footer in a Word DOCX document (asynchronously)
     * Set the footer in a Word Document (DOCX).  Call Finish Editing on the output URL to complete the operation.
     * @param reqConfig Document input request (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call editDocumentDocxSetFooterAsync(DocxSetFooterRequest reqConfig, final ApiCallback<DocxSetFooterResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = editDocumentDocxSetFooterValidateBeforeCall(reqConfig, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DocxSetFooterResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for editDocumentDocxSetFooterAddPageNumber
     * @param reqConfig Document input request (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call editDocumentDocxSetFooterAddPageNumberCall(DocxSetFooterAddPageNumberRequest reqConfig, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = reqConfig;

        // create path and map variables
        String localVarPath = "/convert/edit/docx/set-footer/add-page-number";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Apikey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call editDocumentDocxSetFooterAddPageNumberValidateBeforeCall(DocxSetFooterAddPageNumberRequest reqConfig, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'reqConfig' is set
        if (reqConfig == null) {
            throw new ApiException("Missing the required parameter 'reqConfig' when calling editDocumentDocxSetFooterAddPageNumber(Async)");
        }
        

        com.squareup.okhttp.Call call = editDocumentDocxSetFooterAddPageNumberCall(reqConfig, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add page number to footer in a Word DOCX document
     * Set the footer in a Word Document (DOCX) to contain a page number.  Call Finish Editing on the output URL to complete the operation.
     * @param reqConfig Document input request (required)
     * @return DocxSetFooterResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DocxSetFooterResponse editDocumentDocxSetFooterAddPageNumber(DocxSetFooterAddPageNumberRequest reqConfig) throws ApiException {
        ApiResponse<DocxSetFooterResponse> resp = editDocumentDocxSetFooterAddPageNumberWithHttpInfo(reqConfig);
        return resp.getData();
    }

    /**
     * Add page number to footer in a Word DOCX document
     * Set the footer in a Word Document (DOCX) to contain a page number.  Call Finish Editing on the output URL to complete the operation.
     * @param reqConfig Document input request (required)
     * @return ApiResponse&lt;DocxSetFooterResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DocxSetFooterResponse> editDocumentDocxSetFooterAddPageNumberWithHttpInfo(DocxSetFooterAddPageNumberRequest reqConfig) throws ApiException {
        com.squareup.okhttp.Call call = editDocumentDocxSetFooterAddPageNumberValidateBeforeCall(reqConfig, null, null);
        Type localVarReturnType = new TypeToken<DocxSetFooterResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add page number to footer in a Word DOCX document (asynchronously)
     * Set the footer in a Word Document (DOCX) to contain a page number.  Call Finish Editing on the output URL to complete the operation.
     * @param reqConfig Document input request (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call editDocumentDocxSetFooterAddPageNumberAsync(DocxSetFooterAddPageNumberRequest reqConfig, final ApiCallback<DocxSetFooterResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = editDocumentDocxSetFooterAddPageNumberValidateBeforeCall(reqConfig, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DocxSetFooterResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for editDocumentDocxSetFormFields
     * @param reqConfig  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call editDocumentDocxSetFormFieldsCall(DocxSetFormFieldsRequest reqConfig, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = reqConfig;

        // create path and map variables
        String localVarPath = "/convert/edit/docx/set-form-fields";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Apikey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call editDocumentDocxSetFormFieldsValidateBeforeCall(DocxSetFormFieldsRequest reqConfig, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'reqConfig' is set
        if (reqConfig == null) {
            throw new ApiException("Missing the required parameter 'reqConfig' when calling editDocumentDocxSetFormFields(Async)");
        }
        

        com.squareup.okhttp.Call call = editDocumentDocxSetFormFieldsCall(reqConfig, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Set and fill values for form fields in a Word DOCX document
     * Modifies a Office Word Document (docx) by filling in form fields using the provided values.
     * @param reqConfig  (required)
     * @return byte[]
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public byte[] editDocumentDocxSetFormFields(DocxSetFormFieldsRequest reqConfig) throws ApiException {
        ApiResponse<byte[]> resp = editDocumentDocxSetFormFieldsWithHttpInfo(reqConfig);
        return resp.getData();
    }

    /**
     * Set and fill values for form fields in a Word DOCX document
     * Modifies a Office Word Document (docx) by filling in form fields using the provided values.
     * @param reqConfig  (required)
     * @return ApiResponse&lt;byte[]&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<byte[]> editDocumentDocxSetFormFieldsWithHttpInfo(DocxSetFormFieldsRequest reqConfig) throws ApiException {
        com.squareup.okhttp.Call call = editDocumentDocxSetFormFieldsValidateBeforeCall(reqConfig, null, null);
        Type localVarReturnType = new TypeToken<byte[]>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Set and fill values for form fields in a Word DOCX document (asynchronously)
     * Modifies a Office Word Document (docx) by filling in form fields using the provided values.
     * @param reqConfig  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call editDocumentDocxSetFormFieldsAsync(DocxSetFormFieldsRequest reqConfig, final ApiCallback<byte[]> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = editDocumentDocxSetFormFieldsValidateBeforeCall(reqConfig, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<byte[]>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for editDocumentDocxSetHeader
     * @param reqConfig Document input request (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call editDocumentDocxSetHeaderCall(DocxSetHeaderRequest reqConfig, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = reqConfig;

        // create path and map variables
        String localVarPath = "/convert/edit/docx/set-header";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Apikey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call editDocumentDocxSetHeaderValidateBeforeCall(DocxSetHeaderRequest reqConfig, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'reqConfig' is set
        if (reqConfig == null) {
            throw new ApiException("Missing the required parameter 'reqConfig' when calling editDocumentDocxSetHeader(Async)");
        }
        

        com.squareup.okhttp.Call call = editDocumentDocxSetHeaderCall(reqConfig, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Set the header in a Word DOCX document
     * Set the header in a Word Document (DOCX).  Call Finish Editing on the output URL to complete the operation.
     * @param reqConfig Document input request (required)
     * @return DocxSetHeaderResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DocxSetHeaderResponse editDocumentDocxSetHeader(DocxSetHeaderRequest reqConfig) throws ApiException {
        ApiResponse<DocxSetHeaderResponse> resp = editDocumentDocxSetHeaderWithHttpInfo(reqConfig);
        return resp.getData();
    }

    /**
     * Set the header in a Word DOCX document
     * Set the header in a Word Document (DOCX).  Call Finish Editing on the output URL to complete the operation.
     * @param reqConfig Document input request (required)
     * @return ApiResponse&lt;DocxSetHeaderResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DocxSetHeaderResponse> editDocumentDocxSetHeaderWithHttpInfo(DocxSetHeaderRequest reqConfig) throws ApiException {
        com.squareup.okhttp.Call call = editDocumentDocxSetHeaderValidateBeforeCall(reqConfig, null, null);
        Type localVarReturnType = new TypeToken<DocxSetHeaderResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Set the header in a Word DOCX document (asynchronously)
     * Set the header in a Word Document (DOCX).  Call Finish Editing on the output URL to complete the operation.
     * @param reqConfig Document input request (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call editDocumentDocxSetHeaderAsync(DocxSetHeaderRequest reqConfig, final ApiCallback<DocxSetHeaderResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = editDocumentDocxSetHeaderValidateBeforeCall(reqConfig, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DocxSetHeaderResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for editDocumentDocxUpdateTableCell
     * @param reqConfig Document input request (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call editDocumentDocxUpdateTableCellCall(UpdateDocxTableCellRequest reqConfig, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = reqConfig;

        // create path and map variables
        String localVarPath = "/convert/edit/docx/update-table-cell";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Apikey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call editDocumentDocxUpdateTableCellValidateBeforeCall(UpdateDocxTableCellRequest reqConfig, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'reqConfig' is set
        if (reqConfig == null) {
            throw new ApiException("Missing the required parameter 'reqConfig' when calling editDocumentDocxUpdateTableCell(Async)");
        }
        

        com.squareup.okhttp.Call call = editDocumentDocxUpdateTableCellCall(reqConfig, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update, set contents of a table cell in an existing table in a Word DOCX document
     * Sets the contents of a table cell into a DOCX Document and returns the result.  Call Finish Editing on the output URL to complete the operation.
     * @param reqConfig Document input request (required)
     * @return UpdateDocxTableCellResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public UpdateDocxTableCellResponse editDocumentDocxUpdateTableCell(UpdateDocxTableCellRequest reqConfig) throws ApiException {
        ApiResponse<UpdateDocxTableCellResponse> resp = editDocumentDocxUpdateTableCellWithHttpInfo(reqConfig);
        return resp.getData();
    }

    /**
     * Update, set contents of a table cell in an existing table in a Word DOCX document
     * Sets the contents of a table cell into a DOCX Document and returns the result.  Call Finish Editing on the output URL to complete the operation.
     * @param reqConfig Document input request (required)
     * @return ApiResponse&lt;UpdateDocxTableCellResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<UpdateDocxTableCellResponse> editDocumentDocxUpdateTableCellWithHttpInfo(UpdateDocxTableCellRequest reqConfig) throws ApiException {
        com.squareup.okhttp.Call call = editDocumentDocxUpdateTableCellValidateBeforeCall(reqConfig, null, null);
        Type localVarReturnType = new TypeToken<UpdateDocxTableCellResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update, set contents of a table cell in an existing table in a Word DOCX document (asynchronously)
     * Sets the contents of a table cell into a DOCX Document and returns the result.  Call Finish Editing on the output URL to complete the operation.
     * @param reqConfig Document input request (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call editDocumentDocxUpdateTableCellAsync(UpdateDocxTableCellRequest reqConfig, final ApiCallback<UpdateDocxTableCellResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = editDocumentDocxUpdateTableCellValidateBeforeCall(reqConfig, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<UpdateDocxTableCellResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for editDocumentDocxUpdateTableRow
     * @param reqConfig Document input request (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call editDocumentDocxUpdateTableRowCall(UpdateDocxTableRowRequest reqConfig, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = reqConfig;

        // create path and map variables
        String localVarPath = "/convert/edit/docx/update-table-row";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Apikey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call editDocumentDocxUpdateTableRowValidateBeforeCall(UpdateDocxTableRowRequest reqConfig, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'reqConfig' is set
        if (reqConfig == null) {
            throw new ApiException("Missing the required parameter 'reqConfig' when calling editDocumentDocxUpdateTableRow(Async)");
        }
        

        com.squareup.okhttp.Call call = editDocumentDocxUpdateTableRowCall(reqConfig, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update, set contents of a table row in an existing table in a Word DOCX document
     * Sets the contents of a table row into a DOCX Document and returns the result.  Call Finish Editing on the output URL to complete the operation.
     * @param reqConfig Document input request (required)
     * @return UpdateDocxTableRowResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public UpdateDocxTableRowResponse editDocumentDocxUpdateTableRow(UpdateDocxTableRowRequest reqConfig) throws ApiException {
        ApiResponse<UpdateDocxTableRowResponse> resp = editDocumentDocxUpdateTableRowWithHttpInfo(reqConfig);
        return resp.getData();
    }

    /**
     * Update, set contents of a table row in an existing table in a Word DOCX document
     * Sets the contents of a table row into a DOCX Document and returns the result.  Call Finish Editing on the output URL to complete the operation.
     * @param reqConfig Document input request (required)
     * @return ApiResponse&lt;UpdateDocxTableRowResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<UpdateDocxTableRowResponse> editDocumentDocxUpdateTableRowWithHttpInfo(UpdateDocxTableRowRequest reqConfig) throws ApiException {
        com.squareup.okhttp.Call call = editDocumentDocxUpdateTableRowValidateBeforeCall(reqConfig, null, null);
        Type localVarReturnType = new TypeToken<UpdateDocxTableRowResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update, set contents of a table row in an existing table in a Word DOCX document (asynchronously)
     * Sets the contents of a table row into a DOCX Document and returns the result.  Call Finish Editing on the output URL to complete the operation.
     * @param reqConfig Document input request (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call editDocumentDocxUpdateTableRowAsync(UpdateDocxTableRowRequest reqConfig, final ApiCallback<UpdateDocxTableRowResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = editDocumentDocxUpdateTableRowValidateBeforeCall(reqConfig, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<UpdateDocxTableRowResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for editDocumentFinishEditing
     * @param reqConfig Cloudmersive Document URL to complete editing on (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call editDocumentFinishEditingCall(FinishEditingRequest reqConfig, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = reqConfig;

        // create path and map variables
        String localVarPath = "/convert/edit/finish-editing";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/octet-stream"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Apikey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call editDocumentFinishEditingValidateBeforeCall(FinishEditingRequest reqConfig, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'reqConfig' is set
        if (reqConfig == null) {
            throw new ApiException("Missing the required parameter 'reqConfig' when calling editDocumentFinishEditing(Async)");
        }
        

        com.squareup.okhttp.Call call = editDocumentFinishEditingCall(reqConfig, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Finish editing document, and download result from document editing
     * Once done editing a document, download the result.  Begin editing a document by calling begin-editing, then perform operations, then call finish-editing to get the result.
     * @param reqConfig Cloudmersive Document URL to complete editing on (required)
     * @return byte[]
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public byte[] editDocumentFinishEditing(FinishEditingRequest reqConfig) throws ApiException {
        ApiResponse<byte[]> resp = editDocumentFinishEditingWithHttpInfo(reqConfig);
        return resp.getData();
    }

    /**
     * Finish editing document, and download result from document editing
     * Once done editing a document, download the result.  Begin editing a document by calling begin-editing, then perform operations, then call finish-editing to get the result.
     * @param reqConfig Cloudmersive Document URL to complete editing on (required)
     * @return ApiResponse&lt;byte[]&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<byte[]> editDocumentFinishEditingWithHttpInfo(FinishEditingRequest reqConfig) throws ApiException {
        com.squareup.okhttp.Call call = editDocumentFinishEditingValidateBeforeCall(reqConfig, null, null);
        Type localVarReturnType = new TypeToken<byte[]>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Finish editing document, and download result from document editing (asynchronously)
     * Once done editing a document, download the result.  Begin editing a document by calling begin-editing, then perform operations, then call finish-editing to get the result.
     * @param reqConfig Cloudmersive Document URL to complete editing on (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call editDocumentFinishEditingAsync(FinishEditingRequest reqConfig, final ApiCallback<byte[]> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = editDocumentFinishEditingValidateBeforeCall(reqConfig, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<byte[]>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for editDocumentPptxDeleteSlides
     * @param reqConfig Presentation input request (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call editDocumentPptxDeleteSlidesCall(RemovePptxSlidesRequest reqConfig, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = reqConfig;

        // create path and map variables
        String localVarPath = "/convert/edit/pptx/delete-slides";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/octet-stream"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Apikey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call editDocumentPptxDeleteSlidesValidateBeforeCall(RemovePptxSlidesRequest reqConfig, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'reqConfig' is set
        if (reqConfig == null) {
            throw new ApiException("Missing the required parameter 'reqConfig' when calling editDocumentPptxDeleteSlides(Async)");
        }
        

        com.squareup.okhttp.Call call = editDocumentPptxDeleteSlidesCall(reqConfig, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete, remove slides from a PowerPoint PPTX presentation document
     * Edits the input PowerPoint PPTX presentation document to remove the specified slides
     * @param reqConfig Presentation input request (required)
     * @return byte[]
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public byte[] editDocumentPptxDeleteSlides(RemovePptxSlidesRequest reqConfig) throws ApiException {
        ApiResponse<byte[]> resp = editDocumentPptxDeleteSlidesWithHttpInfo(reqConfig);
        return resp.getData();
    }

    /**
     * Delete, remove slides from a PowerPoint PPTX presentation document
     * Edits the input PowerPoint PPTX presentation document to remove the specified slides
     * @param reqConfig Presentation input request (required)
     * @return ApiResponse&lt;byte[]&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<byte[]> editDocumentPptxDeleteSlidesWithHttpInfo(RemovePptxSlidesRequest reqConfig) throws ApiException {
        com.squareup.okhttp.Call call = editDocumentPptxDeleteSlidesValidateBeforeCall(reqConfig, null, null);
        Type localVarReturnType = new TypeToken<byte[]>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete, remove slides from a PowerPoint PPTX presentation document (asynchronously)
     * Edits the input PowerPoint PPTX presentation document to remove the specified slides
     * @param reqConfig Presentation input request (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call editDocumentPptxDeleteSlidesAsync(RemovePptxSlidesRequest reqConfig, final ApiCallback<byte[]> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = editDocumentPptxDeleteSlidesValidateBeforeCall(reqConfig, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<byte[]>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for editDocumentPptxGetMacroInformation
     * @param inputFile Input file to perform the operation on. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call editDocumentPptxGetMacroInformationCall(File inputFile, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/convert/edit/pptx/get-macros";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (inputFile != null)
        localVarFormParams.put("inputFile", inputFile);

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Apikey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call editDocumentPptxGetMacroInformationValidateBeforeCall(File inputFile, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'inputFile' is set
        if (inputFile == null) {
            throw new ApiException("Missing the required parameter 'inputFile' when calling editDocumentPptxGetMacroInformation(Async)");
        }
        

        com.squareup.okhttp.Call call = editDocumentPptxGetMacroInformationCall(inputFile, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get macro information from a PowerPoint PPTX/PPTM presentation document
     * Returns information about the Macros (e.g. VBA) defined in the PowerPoint Document
     * @param inputFile Input file to perform the operation on. (required)
     * @return GetMacrosResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GetMacrosResponse editDocumentPptxGetMacroInformation(File inputFile) throws ApiException {
        ApiResponse<GetMacrosResponse> resp = editDocumentPptxGetMacroInformationWithHttpInfo(inputFile);
        return resp.getData();
    }

    /**
     * Get macro information from a PowerPoint PPTX/PPTM presentation document
     * Returns information about the Macros (e.g. VBA) defined in the PowerPoint Document
     * @param inputFile Input file to perform the operation on. (required)
     * @return ApiResponse&lt;GetMacrosResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GetMacrosResponse> editDocumentPptxGetMacroInformationWithHttpInfo(File inputFile) throws ApiException {
        com.squareup.okhttp.Call call = editDocumentPptxGetMacroInformationValidateBeforeCall(inputFile, null, null);
        Type localVarReturnType = new TypeToken<GetMacrosResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get macro information from a PowerPoint PPTX/PPTM presentation document (asynchronously)
     * Returns information about the Macros (e.g. VBA) defined in the PowerPoint Document
     * @param inputFile Input file to perform the operation on. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call editDocumentPptxGetMacroInformationAsync(File inputFile, final ApiCallback<GetMacrosResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = editDocumentPptxGetMacroInformationValidateBeforeCall(inputFile, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetMacrosResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for editDocumentPptxReplace
     * @param reqConfig Replacement document configuration input (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call editDocumentPptxReplaceCall(ReplaceStringRequest reqConfig, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = reqConfig;

        // create path and map variables
        String localVarPath = "/convert/edit/pptx/replace-all";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/octet-stream"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Apikey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call editDocumentPptxReplaceValidateBeforeCall(ReplaceStringRequest reqConfig, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'reqConfig' is set
        if (reqConfig == null) {
            throw new ApiException("Missing the required parameter 'reqConfig' when calling editDocumentPptxReplace(Async)");
        }
        

        com.squareup.okhttp.Call call = editDocumentPptxReplaceCall(reqConfig, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Replace string in PowerPoint PPTX presentation
     * Replace all instances of a string in an Office PowerPoint Document (pptx)
     * @param reqConfig Replacement document configuration input (required)
     * @return byte[]
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public byte[] editDocumentPptxReplace(ReplaceStringRequest reqConfig) throws ApiException {
        ApiResponse<byte[]> resp = editDocumentPptxReplaceWithHttpInfo(reqConfig);
        return resp.getData();
    }

    /**
     * Replace string in PowerPoint PPTX presentation
     * Replace all instances of a string in an Office PowerPoint Document (pptx)
     * @param reqConfig Replacement document configuration input (required)
     * @return ApiResponse&lt;byte[]&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<byte[]> editDocumentPptxReplaceWithHttpInfo(ReplaceStringRequest reqConfig) throws ApiException {
        com.squareup.okhttp.Call call = editDocumentPptxReplaceValidateBeforeCall(reqConfig, null, null);
        Type localVarReturnType = new TypeToken<byte[]>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Replace string in PowerPoint PPTX presentation (asynchronously)
     * Replace all instances of a string in an Office PowerPoint Document (pptx)
     * @param reqConfig Replacement document configuration input (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call editDocumentPptxReplaceAsync(ReplaceStringRequest reqConfig, final ApiCallback<byte[]> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = editDocumentPptxReplaceValidateBeforeCall(reqConfig, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<byte[]>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for editDocumentXlsxAppendRow
     * @param input Document input request (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call editDocumentXlsxAppendRowCall(AppendXlsxRowRequest input, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = input;

        // create path and map variables
        String localVarPath = "/convert/edit/xlsx/append-row";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Apikey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call editDocumentXlsxAppendRowValidateBeforeCall(AppendXlsxRowRequest input, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'input' is set
        if (input == null) {
            throw new ApiException("Missing the required parameter 'input' when calling editDocumentXlsxAppendRow(Async)");
        }
        

        com.squareup.okhttp.Call call = editDocumentXlsxAppendRowCall(input, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Append row to a Excel XLSX spreadsheet, worksheet
     * Appends a row to the end of an Excel Spreadsheet worksheet.
     * @param input Document input request (required)
     * @return AppendXlsxRowResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AppendXlsxRowResponse editDocumentXlsxAppendRow(AppendXlsxRowRequest input) throws ApiException {
        ApiResponse<AppendXlsxRowResponse> resp = editDocumentXlsxAppendRowWithHttpInfo(input);
        return resp.getData();
    }

    /**
     * Append row to a Excel XLSX spreadsheet, worksheet
     * Appends a row to the end of an Excel Spreadsheet worksheet.
     * @param input Document input request (required)
     * @return ApiResponse&lt;AppendXlsxRowResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AppendXlsxRowResponse> editDocumentXlsxAppendRowWithHttpInfo(AppendXlsxRowRequest input) throws ApiException {
        com.squareup.okhttp.Call call = editDocumentXlsxAppendRowValidateBeforeCall(input, null, null);
        Type localVarReturnType = new TypeToken<AppendXlsxRowResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Append row to a Excel XLSX spreadsheet, worksheet (asynchronously)
     * Appends a row to the end of an Excel Spreadsheet worksheet.
     * @param input Document input request (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call editDocumentXlsxAppendRowAsync(AppendXlsxRowRequest input, final ApiCallback<AppendXlsxRowResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = editDocumentXlsxAppendRowValidateBeforeCall(input, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AppendXlsxRowResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for editDocumentXlsxClearCellByIndex
     * @param input Document input request (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call editDocumentXlsxClearCellByIndexCall(ClearXlsxCellRequest input, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = input;

        // create path and map variables
        String localVarPath = "/convert/edit/xlsx/clear-cell/by-index";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Apikey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call editDocumentXlsxClearCellByIndexValidateBeforeCall(ClearXlsxCellRequest input, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'input' is set
        if (input == null) {
            throw new ApiException("Missing the required parameter 'input' when calling editDocumentXlsxClearCellByIndex(Async)");
        }
        

        com.squareup.okhttp.Call call = editDocumentXlsxClearCellByIndexCall(input, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Clear cell contents in an Excel XLSX spreadsheet, worksheet by index
     * Clears, sets to blank, the contents of a specific cell in an Excel XLSX spreadsheet, worksheet
     * @param input Document input request (required)
     * @return ClearXlsxCellResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ClearXlsxCellResponse editDocumentXlsxClearCellByIndex(ClearXlsxCellRequest input) throws ApiException {
        ApiResponse<ClearXlsxCellResponse> resp = editDocumentXlsxClearCellByIndexWithHttpInfo(input);
        return resp.getData();
    }

    /**
     * Clear cell contents in an Excel XLSX spreadsheet, worksheet by index
     * Clears, sets to blank, the contents of a specific cell in an Excel XLSX spreadsheet, worksheet
     * @param input Document input request (required)
     * @return ApiResponse&lt;ClearXlsxCellResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ClearXlsxCellResponse> editDocumentXlsxClearCellByIndexWithHttpInfo(ClearXlsxCellRequest input) throws ApiException {
        com.squareup.okhttp.Call call = editDocumentXlsxClearCellByIndexValidateBeforeCall(input, null, null);
        Type localVarReturnType = new TypeToken<ClearXlsxCellResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Clear cell contents in an Excel XLSX spreadsheet, worksheet by index (asynchronously)
     * Clears, sets to blank, the contents of a specific cell in an Excel XLSX spreadsheet, worksheet
     * @param input Document input request (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call editDocumentXlsxClearCellByIndexAsync(ClearXlsxCellRequest input, final ApiCallback<ClearXlsxCellResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = editDocumentXlsxClearCellByIndexValidateBeforeCall(input, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ClearXlsxCellResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for editDocumentXlsxClearRow
     * @param input Document input request (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call editDocumentXlsxClearRowCall(ClearXlsxRowRequest input, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = input;

        // create path and map variables
        String localVarPath = "/convert/edit/xlsx/clear-row";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Apikey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call editDocumentXlsxClearRowValidateBeforeCall(ClearXlsxRowRequest input, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'input' is set
        if (input == null) {
            throw new ApiException("Missing the required parameter 'input' when calling editDocumentXlsxClearRow(Async)");
        }
        

        com.squareup.okhttp.Call call = editDocumentXlsxClearRowCall(input, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Clear row from a Excel XLSX spreadsheet, worksheet
     * Clears data from a specific row in the Excel Spreadsheet worksheet, leaving a blank row. Use the Get Rows And Cells API to enumerate available rows in a spreadsheet.
     * @param input Document input request (required)
     * @return ClearXlsxRowResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ClearXlsxRowResponse editDocumentXlsxClearRow(ClearXlsxRowRequest input) throws ApiException {
        ApiResponse<ClearXlsxRowResponse> resp = editDocumentXlsxClearRowWithHttpInfo(input);
        return resp.getData();
    }

    /**
     * Clear row from a Excel XLSX spreadsheet, worksheet
     * Clears data from a specific row in the Excel Spreadsheet worksheet, leaving a blank row. Use the Get Rows And Cells API to enumerate available rows in a spreadsheet.
     * @param input Document input request (required)
     * @return ApiResponse&lt;ClearXlsxRowResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ClearXlsxRowResponse> editDocumentXlsxClearRowWithHttpInfo(ClearXlsxRowRequest input) throws ApiException {
        com.squareup.okhttp.Call call = editDocumentXlsxClearRowValidateBeforeCall(input, null, null);
        Type localVarReturnType = new TypeToken<ClearXlsxRowResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Clear row from a Excel XLSX spreadsheet, worksheet (asynchronously)
     * Clears data from a specific row in the Excel Spreadsheet worksheet, leaving a blank row. Use the Get Rows And Cells API to enumerate available rows in a spreadsheet.
     * @param input Document input request (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call editDocumentXlsxClearRowAsync(ClearXlsxRowRequest input, final ApiCallback<ClearXlsxRowResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = editDocumentXlsxClearRowValidateBeforeCall(input, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ClearXlsxRowResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for editDocumentXlsxCreateBlankSpreadsheet
     * @param input Document input request (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call editDocumentXlsxCreateBlankSpreadsheetCall(CreateBlankSpreadsheetRequest input, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = input;

        // create path and map variables
        String localVarPath = "/convert/edit/xlsx/create/blank";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Apikey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call editDocumentXlsxCreateBlankSpreadsheetValidateBeforeCall(CreateBlankSpreadsheetRequest input, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'input' is set
        if (input == null) {
            throw new ApiException("Missing the required parameter 'input' when calling editDocumentXlsxCreateBlankSpreadsheet(Async)");
        }
        

        com.squareup.okhttp.Call call = editDocumentXlsxCreateBlankSpreadsheetCall(input, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a blank Excel XLSX spreadsheet
     * Returns a blank Excel XLSX Spreadsheet (XLSX) format file
     * @param input Document input request (required)
     * @return CreateBlankSpreadsheetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CreateBlankSpreadsheetResponse editDocumentXlsxCreateBlankSpreadsheet(CreateBlankSpreadsheetRequest input) throws ApiException {
        ApiResponse<CreateBlankSpreadsheetResponse> resp = editDocumentXlsxCreateBlankSpreadsheetWithHttpInfo(input);
        return resp.getData();
    }

    /**
     * Create a blank Excel XLSX spreadsheet
     * Returns a blank Excel XLSX Spreadsheet (XLSX) format file
     * @param input Document input request (required)
     * @return ApiResponse&lt;CreateBlankSpreadsheetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CreateBlankSpreadsheetResponse> editDocumentXlsxCreateBlankSpreadsheetWithHttpInfo(CreateBlankSpreadsheetRequest input) throws ApiException {
        com.squareup.okhttp.Call call = editDocumentXlsxCreateBlankSpreadsheetValidateBeforeCall(input, null, null);
        Type localVarReturnType = new TypeToken<CreateBlankSpreadsheetResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a blank Excel XLSX spreadsheet (asynchronously)
     * Returns a blank Excel XLSX Spreadsheet (XLSX) format file
     * @param input Document input request (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call editDocumentXlsxCreateBlankSpreadsheetAsync(CreateBlankSpreadsheetRequest input, final ApiCallback<CreateBlankSpreadsheetResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = editDocumentXlsxCreateBlankSpreadsheetValidateBeforeCall(input, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CreateBlankSpreadsheetResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for editDocumentXlsxCreateSpreadsheetFromData
     * @param input Document input request (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call editDocumentXlsxCreateSpreadsheetFromDataCall(CreateSpreadsheetFromDataRequest input, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = input;

        // create path and map variables
        String localVarPath = "/convert/edit/xlsx/create/from/data";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Apikey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call editDocumentXlsxCreateSpreadsheetFromDataValidateBeforeCall(CreateSpreadsheetFromDataRequest input, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'input' is set
        if (input == null) {
            throw new ApiException("Missing the required parameter 'input' when calling editDocumentXlsxCreateSpreadsheetFromData(Async)");
        }
        

        com.squareup.okhttp.Call call = editDocumentXlsxCreateSpreadsheetFromDataCall(input, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a new Excel XLSX spreadsheet from column and row data
     * Returns a new Excel XLSX Spreadsheet (XLSX) format file populated with column and row data specified as input
     * @param input Document input request (required)
     * @return CreateSpreadsheetFromDataResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CreateSpreadsheetFromDataResponse editDocumentXlsxCreateSpreadsheetFromData(CreateSpreadsheetFromDataRequest input) throws ApiException {
        ApiResponse<CreateSpreadsheetFromDataResponse> resp = editDocumentXlsxCreateSpreadsheetFromDataWithHttpInfo(input);
        return resp.getData();
    }

    /**
     * Create a new Excel XLSX spreadsheet from column and row data
     * Returns a new Excel XLSX Spreadsheet (XLSX) format file populated with column and row data specified as input
     * @param input Document input request (required)
     * @return ApiResponse&lt;CreateSpreadsheetFromDataResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CreateSpreadsheetFromDataResponse> editDocumentXlsxCreateSpreadsheetFromDataWithHttpInfo(CreateSpreadsheetFromDataRequest input) throws ApiException {
        com.squareup.okhttp.Call call = editDocumentXlsxCreateSpreadsheetFromDataValidateBeforeCall(input, null, null);
        Type localVarReturnType = new TypeToken<CreateSpreadsheetFromDataResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a new Excel XLSX spreadsheet from column and row data (asynchronously)
     * Returns a new Excel XLSX Spreadsheet (XLSX) format file populated with column and row data specified as input
     * @param input Document input request (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call editDocumentXlsxCreateSpreadsheetFromDataAsync(CreateSpreadsheetFromDataRequest input, final ApiCallback<CreateSpreadsheetFromDataResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = editDocumentXlsxCreateSpreadsheetFromDataValidateBeforeCall(input, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CreateSpreadsheetFromDataResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for editDocumentXlsxDeleteWorksheet
     * @param reqConfig Spreadsheet input request (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call editDocumentXlsxDeleteWorksheetCall(RemoveXlsxWorksheetRequest reqConfig, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = reqConfig;

        // create path and map variables
        String localVarPath = "/convert/edit/xlsx/delete-worksheet";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/octet-stream"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Apikey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call editDocumentXlsxDeleteWorksheetValidateBeforeCall(RemoveXlsxWorksheetRequest reqConfig, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'reqConfig' is set
        if (reqConfig == null) {
            throw new ApiException("Missing the required parameter 'reqConfig' when calling editDocumentXlsxDeleteWorksheet(Async)");
        }
        

        com.squareup.okhttp.Call call = editDocumentXlsxDeleteWorksheetCall(reqConfig, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete, remove worksheet from an Excel XLSX spreadsheet document
     * Edits the input Excel XLSX spreadsheet document to remove the specified worksheet (tab).  Use the Get Worksheets API to enumerate available worksheets in a spreadsheet.
     * @param reqConfig Spreadsheet input request (required)
     * @return byte[]
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public byte[] editDocumentXlsxDeleteWorksheet(RemoveXlsxWorksheetRequest reqConfig) throws ApiException {
        ApiResponse<byte[]> resp = editDocumentXlsxDeleteWorksheetWithHttpInfo(reqConfig);
        return resp.getData();
    }

    /**
     * Delete, remove worksheet from an Excel XLSX spreadsheet document
     * Edits the input Excel XLSX spreadsheet document to remove the specified worksheet (tab).  Use the Get Worksheets API to enumerate available worksheets in a spreadsheet.
     * @param reqConfig Spreadsheet input request (required)
     * @return ApiResponse&lt;byte[]&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<byte[]> editDocumentXlsxDeleteWorksheetWithHttpInfo(RemoveXlsxWorksheetRequest reqConfig) throws ApiException {
        com.squareup.okhttp.Call call = editDocumentXlsxDeleteWorksheetValidateBeforeCall(reqConfig, null, null);
        Type localVarReturnType = new TypeToken<byte[]>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete, remove worksheet from an Excel XLSX spreadsheet document (asynchronously)
     * Edits the input Excel XLSX spreadsheet document to remove the specified worksheet (tab).  Use the Get Worksheets API to enumerate available worksheets in a spreadsheet.
     * @param reqConfig Spreadsheet input request (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call editDocumentXlsxDeleteWorksheetAsync(RemoveXlsxWorksheetRequest reqConfig, final ApiCallback<byte[]> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = editDocumentXlsxDeleteWorksheetValidateBeforeCall(reqConfig, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<byte[]>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for editDocumentXlsxDisableSharedWorkbook
     * @param input Document input request (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call editDocumentXlsxDisableSharedWorkbookCall(DisableSharedWorkbookRequest input, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = input;

        // create path and map variables
        String localVarPath = "/convert/edit/xlsx/configuration/disable-shared-workbook";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Apikey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call editDocumentXlsxDisableSharedWorkbookValidateBeforeCall(DisableSharedWorkbookRequest input, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'input' is set
        if (input == null) {
            throw new ApiException("Missing the required parameter 'input' when calling editDocumentXlsxDisableSharedWorkbook(Async)");
        }
        

        com.squareup.okhttp.Call call = editDocumentXlsxDisableSharedWorkbookCall(input, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Disable Shared Workbook (legacy) in Excel XLSX spreadsheet
     * Disable the Shared Workbook (legacy) mode in an Excel XLSX spreadsheet
     * @param input Document input request (required)
     * @return DisableSharedWorkbookResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DisableSharedWorkbookResponse editDocumentXlsxDisableSharedWorkbook(DisableSharedWorkbookRequest input) throws ApiException {
        ApiResponse<DisableSharedWorkbookResponse> resp = editDocumentXlsxDisableSharedWorkbookWithHttpInfo(input);
        return resp.getData();
    }

    /**
     * Disable Shared Workbook (legacy) in Excel XLSX spreadsheet
     * Disable the Shared Workbook (legacy) mode in an Excel XLSX spreadsheet
     * @param input Document input request (required)
     * @return ApiResponse&lt;DisableSharedWorkbookResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DisableSharedWorkbookResponse> editDocumentXlsxDisableSharedWorkbookWithHttpInfo(DisableSharedWorkbookRequest input) throws ApiException {
        com.squareup.okhttp.Call call = editDocumentXlsxDisableSharedWorkbookValidateBeforeCall(input, null, null);
        Type localVarReturnType = new TypeToken<DisableSharedWorkbookResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Disable Shared Workbook (legacy) in Excel XLSX spreadsheet (asynchronously)
     * Disable the Shared Workbook (legacy) mode in an Excel XLSX spreadsheet
     * @param input Document input request (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call editDocumentXlsxDisableSharedWorkbookAsync(DisableSharedWorkbookRequest input, final ApiCallback<DisableSharedWorkbookResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = editDocumentXlsxDisableSharedWorkbookValidateBeforeCall(input, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DisableSharedWorkbookResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for editDocumentXlsxEnableSharedWorkbook
     * @param input Document input request (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call editDocumentXlsxEnableSharedWorkbookCall(EnableSharedWorkbookRequest input, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = input;

        // create path and map variables
        String localVarPath = "/convert/edit/xlsx/configuration/enable-shared-workbook";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Apikey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call editDocumentXlsxEnableSharedWorkbookValidateBeforeCall(EnableSharedWorkbookRequest input, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'input' is set
        if (input == null) {
            throw new ApiException("Missing the required parameter 'input' when calling editDocumentXlsxEnableSharedWorkbook(Async)");
        }
        

        com.squareup.okhttp.Call call = editDocumentXlsxEnableSharedWorkbookCall(input, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Enable Shared Workbook (legacy) in Excel XLSX spreadsheet
     * Enables the Shared Workbook (legacy) mode in an Excel XLSX spreadsheet
     * @param input Document input request (required)
     * @return EnableSharedWorkbookResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EnableSharedWorkbookResponse editDocumentXlsxEnableSharedWorkbook(EnableSharedWorkbookRequest input) throws ApiException {
        ApiResponse<EnableSharedWorkbookResponse> resp = editDocumentXlsxEnableSharedWorkbookWithHttpInfo(input);
        return resp.getData();
    }

    /**
     * Enable Shared Workbook (legacy) in Excel XLSX spreadsheet
     * Enables the Shared Workbook (legacy) mode in an Excel XLSX spreadsheet
     * @param input Document input request (required)
     * @return ApiResponse&lt;EnableSharedWorkbookResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EnableSharedWorkbookResponse> editDocumentXlsxEnableSharedWorkbookWithHttpInfo(EnableSharedWorkbookRequest input) throws ApiException {
        com.squareup.okhttp.Call call = editDocumentXlsxEnableSharedWorkbookValidateBeforeCall(input, null, null);
        Type localVarReturnType = new TypeToken<EnableSharedWorkbookResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Enable Shared Workbook (legacy) in Excel XLSX spreadsheet (asynchronously)
     * Enables the Shared Workbook (legacy) mode in an Excel XLSX spreadsheet
     * @param input Document input request (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call editDocumentXlsxEnableSharedWorkbookAsync(EnableSharedWorkbookRequest input, final ApiCallback<EnableSharedWorkbookResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = editDocumentXlsxEnableSharedWorkbookValidateBeforeCall(input, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EnableSharedWorkbookResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for editDocumentXlsxGetCellByIdentifier
     * @param input Document input request (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call editDocumentXlsxGetCellByIdentifierCall(GetXlsxCellByIdentifierRequest input, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = input;

        // create path and map variables
        String localVarPath = "/convert/edit/xlsx/get-cell/by-identifier";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Apikey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call editDocumentXlsxGetCellByIdentifierValidateBeforeCall(GetXlsxCellByIdentifierRequest input, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'input' is set
        if (input == null) {
            throw new ApiException("Missing the required parameter 'input' when calling editDocumentXlsxGetCellByIdentifier(Async)");
        }
        

        com.squareup.okhttp.Call call = editDocumentXlsxGetCellByIdentifierCall(input, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get cell from an Excel XLSX spreadsheet, worksheet by cell identifier
     * Returns the value of a specific cell based on its identifier (e.g. A1, B22, C33, etc.) in the Excel Spreadsheet worksheet
     * @param input Document input request (required)
     * @return GetXlsxCellByIdentifierResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GetXlsxCellByIdentifierResponse editDocumentXlsxGetCellByIdentifier(GetXlsxCellByIdentifierRequest input) throws ApiException {
        ApiResponse<GetXlsxCellByIdentifierResponse> resp = editDocumentXlsxGetCellByIdentifierWithHttpInfo(input);
        return resp.getData();
    }

    /**
     * Get cell from an Excel XLSX spreadsheet, worksheet by cell identifier
     * Returns the value of a specific cell based on its identifier (e.g. A1, B22, C33, etc.) in the Excel Spreadsheet worksheet
     * @param input Document input request (required)
     * @return ApiResponse&lt;GetXlsxCellByIdentifierResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GetXlsxCellByIdentifierResponse> editDocumentXlsxGetCellByIdentifierWithHttpInfo(GetXlsxCellByIdentifierRequest input) throws ApiException {
        com.squareup.okhttp.Call call = editDocumentXlsxGetCellByIdentifierValidateBeforeCall(input, null, null);
        Type localVarReturnType = new TypeToken<GetXlsxCellByIdentifierResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get cell from an Excel XLSX spreadsheet, worksheet by cell identifier (asynchronously)
     * Returns the value of a specific cell based on its identifier (e.g. A1, B22, C33, etc.) in the Excel Spreadsheet worksheet
     * @param input Document input request (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call editDocumentXlsxGetCellByIdentifierAsync(GetXlsxCellByIdentifierRequest input, final ApiCallback<GetXlsxCellByIdentifierResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = editDocumentXlsxGetCellByIdentifierValidateBeforeCall(input, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetXlsxCellByIdentifierResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for editDocumentXlsxGetCellByIndex
     * @param input Document input request (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call editDocumentXlsxGetCellByIndexCall(GetXlsxCellRequest input, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = input;

        // create path and map variables
        String localVarPath = "/convert/edit/xlsx/get-cell/by-index";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Apikey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call editDocumentXlsxGetCellByIndexValidateBeforeCall(GetXlsxCellRequest input, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'input' is set
        if (input == null) {
            throw new ApiException("Missing the required parameter 'input' when calling editDocumentXlsxGetCellByIndex(Async)");
        }
        

        com.squareup.okhttp.Call call = editDocumentXlsxGetCellByIndexCall(input, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get cell from an Excel XLSX spreadsheet, worksheet by index
     * Returns the value and definition of a specific cell in a specific row in the Excel Spreadsheet worksheet
     * @param input Document input request (required)
     * @return GetXlsxCellResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GetXlsxCellResponse editDocumentXlsxGetCellByIndex(GetXlsxCellRequest input) throws ApiException {
        ApiResponse<GetXlsxCellResponse> resp = editDocumentXlsxGetCellByIndexWithHttpInfo(input);
        return resp.getData();
    }

    /**
     * Get cell from an Excel XLSX spreadsheet, worksheet by index
     * Returns the value and definition of a specific cell in a specific row in the Excel Spreadsheet worksheet
     * @param input Document input request (required)
     * @return ApiResponse&lt;GetXlsxCellResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GetXlsxCellResponse> editDocumentXlsxGetCellByIndexWithHttpInfo(GetXlsxCellRequest input) throws ApiException {
        com.squareup.okhttp.Call call = editDocumentXlsxGetCellByIndexValidateBeforeCall(input, null, null);
        Type localVarReturnType = new TypeToken<GetXlsxCellResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get cell from an Excel XLSX spreadsheet, worksheet by index (asynchronously)
     * Returns the value and definition of a specific cell in a specific row in the Excel Spreadsheet worksheet
     * @param input Document input request (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call editDocumentXlsxGetCellByIndexAsync(GetXlsxCellRequest input, final ApiCallback<GetXlsxCellResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = editDocumentXlsxGetCellByIndexValidateBeforeCall(input, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetXlsxCellResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for editDocumentXlsxGetColumns
     * @param input Document input request (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call editDocumentXlsxGetColumnsCall(GetXlsxColumnsRequest input, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = input;

        // create path and map variables
        String localVarPath = "/convert/edit/xlsx/get-columns";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Apikey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call editDocumentXlsxGetColumnsValidateBeforeCall(GetXlsxColumnsRequest input, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'input' is set
        if (input == null) {
            throw new ApiException("Missing the required parameter 'input' when calling editDocumentXlsxGetColumns(Async)");
        }
        

        com.squareup.okhttp.Call call = editDocumentXlsxGetColumnsCall(input, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get columns from a Excel XLSX spreadsheet, worksheet
     * Returns the columns defined in the Excel Spreadsheet worksheet
     * @param input Document input request (required)
     * @return GetXlsxColumnsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GetXlsxColumnsResponse editDocumentXlsxGetColumns(GetXlsxColumnsRequest input) throws ApiException {
        ApiResponse<GetXlsxColumnsResponse> resp = editDocumentXlsxGetColumnsWithHttpInfo(input);
        return resp.getData();
    }

    /**
     * Get columns from a Excel XLSX spreadsheet, worksheet
     * Returns the columns defined in the Excel Spreadsheet worksheet
     * @param input Document input request (required)
     * @return ApiResponse&lt;GetXlsxColumnsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GetXlsxColumnsResponse> editDocumentXlsxGetColumnsWithHttpInfo(GetXlsxColumnsRequest input) throws ApiException {
        com.squareup.okhttp.Call call = editDocumentXlsxGetColumnsValidateBeforeCall(input, null, null);
        Type localVarReturnType = new TypeToken<GetXlsxColumnsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get columns from a Excel XLSX spreadsheet, worksheet (asynchronously)
     * Returns the columns defined in the Excel Spreadsheet worksheet
     * @param input Document input request (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call editDocumentXlsxGetColumnsAsync(GetXlsxColumnsRequest input, final ApiCallback<GetXlsxColumnsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = editDocumentXlsxGetColumnsValidateBeforeCall(input, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetXlsxColumnsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for editDocumentXlsxGetImages
     * @param input Document input request (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call editDocumentXlsxGetImagesCall(GetXlsxImagesRequest input, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = input;

        // create path and map variables
        String localVarPath = "/convert/edit/xlsx/get-images";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Apikey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call editDocumentXlsxGetImagesValidateBeforeCall(GetXlsxImagesRequest input, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'input' is set
        if (input == null) {
            throw new ApiException("Missing the required parameter 'input' when calling editDocumentXlsxGetImages(Async)");
        }
        

        com.squareup.okhttp.Call call = editDocumentXlsxGetImagesCall(input, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get images from a Excel XLSX spreadsheet, worksheet
     * Returns the images defined in the Excel Spreadsheet worksheet
     * @param input Document input request (required)
     * @return GetXlsxImagesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GetXlsxImagesResponse editDocumentXlsxGetImages(GetXlsxImagesRequest input) throws ApiException {
        ApiResponse<GetXlsxImagesResponse> resp = editDocumentXlsxGetImagesWithHttpInfo(input);
        return resp.getData();
    }

    /**
     * Get images from a Excel XLSX spreadsheet, worksheet
     * Returns the images defined in the Excel Spreadsheet worksheet
     * @param input Document input request (required)
     * @return ApiResponse&lt;GetXlsxImagesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GetXlsxImagesResponse> editDocumentXlsxGetImagesWithHttpInfo(GetXlsxImagesRequest input) throws ApiException {
        com.squareup.okhttp.Call call = editDocumentXlsxGetImagesValidateBeforeCall(input, null, null);
        Type localVarReturnType = new TypeToken<GetXlsxImagesResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get images from a Excel XLSX spreadsheet, worksheet (asynchronously)
     * Returns the images defined in the Excel Spreadsheet worksheet
     * @param input Document input request (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call editDocumentXlsxGetImagesAsync(GetXlsxImagesRequest input, final ApiCallback<GetXlsxImagesResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = editDocumentXlsxGetImagesValidateBeforeCall(input, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetXlsxImagesResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for editDocumentXlsxGetMacroInformation
     * @param inputFile Input file to perform the operation on. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call editDocumentXlsxGetMacroInformationCall(File inputFile, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/convert/edit/xlsx/get-macros";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (inputFile != null)
        localVarFormParams.put("inputFile", inputFile);

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Apikey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call editDocumentXlsxGetMacroInformationValidateBeforeCall(File inputFile, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'inputFile' is set
        if (inputFile == null) {
            throw new ApiException("Missing the required parameter 'inputFile' when calling editDocumentXlsxGetMacroInformation(Async)");
        }
        

        com.squareup.okhttp.Call call = editDocumentXlsxGetMacroInformationCall(inputFile, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get macro information from a Excel XLSX/XLSM spreadsheet, worksheet
     * Returns information about the Macros (e.g. VBA) defined in the Excel Spreadsheet
     * @param inputFile Input file to perform the operation on. (required)
     * @return GetMacrosResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GetMacrosResponse editDocumentXlsxGetMacroInformation(File inputFile) throws ApiException {
        ApiResponse<GetMacrosResponse> resp = editDocumentXlsxGetMacroInformationWithHttpInfo(inputFile);
        return resp.getData();
    }

    /**
     * Get macro information from a Excel XLSX/XLSM spreadsheet, worksheet
     * Returns information about the Macros (e.g. VBA) defined in the Excel Spreadsheet
     * @param inputFile Input file to perform the operation on. (required)
     * @return ApiResponse&lt;GetMacrosResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GetMacrosResponse> editDocumentXlsxGetMacroInformationWithHttpInfo(File inputFile) throws ApiException {
        com.squareup.okhttp.Call call = editDocumentXlsxGetMacroInformationValidateBeforeCall(inputFile, null, null);
        Type localVarReturnType = new TypeToken<GetMacrosResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get macro information from a Excel XLSX/XLSM spreadsheet, worksheet (asynchronously)
     * Returns information about the Macros (e.g. VBA) defined in the Excel Spreadsheet
     * @param inputFile Input file to perform the operation on. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call editDocumentXlsxGetMacroInformationAsync(File inputFile, final ApiCallback<GetMacrosResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = editDocumentXlsxGetMacroInformationValidateBeforeCall(inputFile, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetMacrosResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for editDocumentXlsxGetRowsAndCells
     * @param input Document input request (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call editDocumentXlsxGetRowsAndCellsCall(GetXlsxRowsAndCellsRequest input, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = input;

        // create path and map variables
        String localVarPath = "/convert/edit/xlsx/get-rows-and-cells";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Apikey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call editDocumentXlsxGetRowsAndCellsValidateBeforeCall(GetXlsxRowsAndCellsRequest input, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'input' is set
        if (input == null) {
            throw new ApiException("Missing the required parameter 'input' when calling editDocumentXlsxGetRowsAndCells(Async)");
        }
        

        com.squareup.okhttp.Call call = editDocumentXlsxGetRowsAndCellsCall(input, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get rows and cells from a Excel XLSX spreadsheet, worksheet
     * Returns the rows and cells defined in the Excel Spreadsheet worksheet
     * @param input Document input request (required)
     * @return GetXlsxRowsAndCellsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GetXlsxRowsAndCellsResponse editDocumentXlsxGetRowsAndCells(GetXlsxRowsAndCellsRequest input) throws ApiException {
        ApiResponse<GetXlsxRowsAndCellsResponse> resp = editDocumentXlsxGetRowsAndCellsWithHttpInfo(input);
        return resp.getData();
    }

    /**
     * Get rows and cells from a Excel XLSX spreadsheet, worksheet
     * Returns the rows and cells defined in the Excel Spreadsheet worksheet
     * @param input Document input request (required)
     * @return ApiResponse&lt;GetXlsxRowsAndCellsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GetXlsxRowsAndCellsResponse> editDocumentXlsxGetRowsAndCellsWithHttpInfo(GetXlsxRowsAndCellsRequest input) throws ApiException {
        com.squareup.okhttp.Call call = editDocumentXlsxGetRowsAndCellsValidateBeforeCall(input, null, null);
        Type localVarReturnType = new TypeToken<GetXlsxRowsAndCellsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get rows and cells from a Excel XLSX spreadsheet, worksheet (asynchronously)
     * Returns the rows and cells defined in the Excel Spreadsheet worksheet
     * @param input Document input request (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call editDocumentXlsxGetRowsAndCellsAsync(GetXlsxRowsAndCellsRequest input, final ApiCallback<GetXlsxRowsAndCellsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = editDocumentXlsxGetRowsAndCellsValidateBeforeCall(input, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetXlsxRowsAndCellsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for editDocumentXlsxGetSpecificRow
     * @param input Document input request (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call editDocumentXlsxGetSpecificRowCall(GetXlsxSpecificRowRequest input, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = input;

        // create path and map variables
        String localVarPath = "/convert/edit/xlsx/get-specific-row";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Apikey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call editDocumentXlsxGetSpecificRowValidateBeforeCall(GetXlsxSpecificRowRequest input, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'input' is set
        if (input == null) {
            throw new ApiException("Missing the required parameter 'input' when calling editDocumentXlsxGetSpecificRow(Async)");
        }
        

        com.squareup.okhttp.Call call = editDocumentXlsxGetSpecificRowCall(input, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a specific row from a Excel XLSX spreadsheet, worksheet by path
     * Returns the specific row and its cells defined in the Excel Spreadsheet worksheet based on the specified path.
     * @param input Document input request (required)
     * @return GetXlsxSpecificRowResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GetXlsxSpecificRowResponse editDocumentXlsxGetSpecificRow(GetXlsxSpecificRowRequest input) throws ApiException {
        ApiResponse<GetXlsxSpecificRowResponse> resp = editDocumentXlsxGetSpecificRowWithHttpInfo(input);
        return resp.getData();
    }

    /**
     * Get a specific row from a Excel XLSX spreadsheet, worksheet by path
     * Returns the specific row and its cells defined in the Excel Spreadsheet worksheet based on the specified path.
     * @param input Document input request (required)
     * @return ApiResponse&lt;GetXlsxSpecificRowResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GetXlsxSpecificRowResponse> editDocumentXlsxGetSpecificRowWithHttpInfo(GetXlsxSpecificRowRequest input) throws ApiException {
        com.squareup.okhttp.Call call = editDocumentXlsxGetSpecificRowValidateBeforeCall(input, null, null);
        Type localVarReturnType = new TypeToken<GetXlsxSpecificRowResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a specific row from a Excel XLSX spreadsheet, worksheet by path (asynchronously)
     * Returns the specific row and its cells defined in the Excel Spreadsheet worksheet based on the specified path.
     * @param input Document input request (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call editDocumentXlsxGetSpecificRowAsync(GetXlsxSpecificRowRequest input, final ApiCallback<GetXlsxSpecificRowResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = editDocumentXlsxGetSpecificRowValidateBeforeCall(input, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetXlsxSpecificRowResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for editDocumentXlsxGetStyles
     * @param input Document input request (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call editDocumentXlsxGetStylesCall(GetXlsxStylesRequest input, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = input;

        // create path and map variables
        String localVarPath = "/convert/edit/xlsx/get-styles";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Apikey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call editDocumentXlsxGetStylesValidateBeforeCall(GetXlsxStylesRequest input, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'input' is set
        if (input == null) {
            throw new ApiException("Missing the required parameter 'input' when calling editDocumentXlsxGetStyles(Async)");
        }
        

        com.squareup.okhttp.Call call = editDocumentXlsxGetStylesCall(input, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get styles from a Excel XLSX spreadsheet, worksheet
     * Returns the style defined in the Excel Spreadsheet
     * @param input Document input request (required)
     * @return GetXlsxStylesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GetXlsxStylesResponse editDocumentXlsxGetStyles(GetXlsxStylesRequest input) throws ApiException {
        ApiResponse<GetXlsxStylesResponse> resp = editDocumentXlsxGetStylesWithHttpInfo(input);
        return resp.getData();
    }

    /**
     * Get styles from a Excel XLSX spreadsheet, worksheet
     * Returns the style defined in the Excel Spreadsheet
     * @param input Document input request (required)
     * @return ApiResponse&lt;GetXlsxStylesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GetXlsxStylesResponse> editDocumentXlsxGetStylesWithHttpInfo(GetXlsxStylesRequest input) throws ApiException {
        com.squareup.okhttp.Call call = editDocumentXlsxGetStylesValidateBeforeCall(input, null, null);
        Type localVarReturnType = new TypeToken<GetXlsxStylesResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get styles from a Excel XLSX spreadsheet, worksheet (asynchronously)
     * Returns the style defined in the Excel Spreadsheet
     * @param input Document input request (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call editDocumentXlsxGetStylesAsync(GetXlsxStylesRequest input, final ApiCallback<GetXlsxStylesResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = editDocumentXlsxGetStylesValidateBeforeCall(input, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetXlsxStylesResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for editDocumentXlsxGetWorksheets
     * @param input Document input request (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call editDocumentXlsxGetWorksheetsCall(GetXlsxWorksheetsRequest input, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = input;

        // create path and map variables
        String localVarPath = "/convert/edit/xlsx/get-worksheets";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Apikey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call editDocumentXlsxGetWorksheetsValidateBeforeCall(GetXlsxWorksheetsRequest input, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'input' is set
        if (input == null) {
            throw new ApiException("Missing the required parameter 'input' when calling editDocumentXlsxGetWorksheets(Async)");
        }
        

        com.squareup.okhttp.Call call = editDocumentXlsxGetWorksheetsCall(input, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get worksheets from a Excel XLSX spreadsheet
     * Returns the worksheets (tabs) defined in the Excel Spreadsheet (XLSX) format file
     * @param input Document input request (required)
     * @return GetXlsxWorksheetsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GetXlsxWorksheetsResponse editDocumentXlsxGetWorksheets(GetXlsxWorksheetsRequest input) throws ApiException {
        ApiResponse<GetXlsxWorksheetsResponse> resp = editDocumentXlsxGetWorksheetsWithHttpInfo(input);
        return resp.getData();
    }

    /**
     * Get worksheets from a Excel XLSX spreadsheet
     * Returns the worksheets (tabs) defined in the Excel Spreadsheet (XLSX) format file
     * @param input Document input request (required)
     * @return ApiResponse&lt;GetXlsxWorksheetsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GetXlsxWorksheetsResponse> editDocumentXlsxGetWorksheetsWithHttpInfo(GetXlsxWorksheetsRequest input) throws ApiException {
        com.squareup.okhttp.Call call = editDocumentXlsxGetWorksheetsValidateBeforeCall(input, null, null);
        Type localVarReturnType = new TypeToken<GetXlsxWorksheetsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get worksheets from a Excel XLSX spreadsheet (asynchronously)
     * Returns the worksheets (tabs) defined in the Excel Spreadsheet (XLSX) format file
     * @param input Document input request (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call editDocumentXlsxGetWorksheetsAsync(GetXlsxWorksheetsRequest input, final ApiCallback<GetXlsxWorksheetsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = editDocumentXlsxGetWorksheetsValidateBeforeCall(input, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetXlsxWorksheetsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for editDocumentXlsxInsertWorksheet
     * @param input Document input request (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call editDocumentXlsxInsertWorksheetCall(InsertXlsxWorksheetRequest input, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = input;

        // create path and map variables
        String localVarPath = "/convert/edit/xlsx/insert-worksheet";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Apikey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call editDocumentXlsxInsertWorksheetValidateBeforeCall(InsertXlsxWorksheetRequest input, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'input' is set
        if (input == null) {
            throw new ApiException("Missing the required parameter 'input' when calling editDocumentXlsxInsertWorksheet(Async)");
        }
        

        com.squareup.okhttp.Call call = editDocumentXlsxInsertWorksheetCall(input, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Insert a new worksheet into an Excel XLSX spreadsheet
     * Inserts a new worksheet into an Excel Spreadsheet
     * @param input Document input request (required)
     * @return InsertXlsxWorksheetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InsertXlsxWorksheetResponse editDocumentXlsxInsertWorksheet(InsertXlsxWorksheetRequest input) throws ApiException {
        ApiResponse<InsertXlsxWorksheetResponse> resp = editDocumentXlsxInsertWorksheetWithHttpInfo(input);
        return resp.getData();
    }

    /**
     * Insert a new worksheet into an Excel XLSX spreadsheet
     * Inserts a new worksheet into an Excel Spreadsheet
     * @param input Document input request (required)
     * @return ApiResponse&lt;InsertXlsxWorksheetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InsertXlsxWorksheetResponse> editDocumentXlsxInsertWorksheetWithHttpInfo(InsertXlsxWorksheetRequest input) throws ApiException {
        com.squareup.okhttp.Call call = editDocumentXlsxInsertWorksheetValidateBeforeCall(input, null, null);
        Type localVarReturnType = new TypeToken<InsertXlsxWorksheetResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Insert a new worksheet into an Excel XLSX spreadsheet (asynchronously)
     * Inserts a new worksheet into an Excel Spreadsheet
     * @param input Document input request (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call editDocumentXlsxInsertWorksheetAsync(InsertXlsxWorksheetRequest input, final ApiCallback<InsertXlsxWorksheetResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = editDocumentXlsxInsertWorksheetValidateBeforeCall(input, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InsertXlsxWorksheetResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for editDocumentXlsxRenameWorksheet
     * @param input Document input request (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call editDocumentXlsxRenameWorksheetCall(RenameXlsxWorksheetRequest input, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = input;

        // create path and map variables
        String localVarPath = "/convert/edit/xlsx/rename-worksheet";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Apikey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call editDocumentXlsxRenameWorksheetValidateBeforeCall(RenameXlsxWorksheetRequest input, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'input' is set
        if (input == null) {
            throw new ApiException("Missing the required parameter 'input' when calling editDocumentXlsxRenameWorksheet(Async)");
        }
        

        com.squareup.okhttp.Call call = editDocumentXlsxRenameWorksheetCall(input, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Rename a specific worksheet in a Excel XLSX spreadsheet
     * Edits the input Excel XLSX spreadsheet document to rename a specified worksheet (tab).  Use the Get Worksheets API to enumerate available worksheets in a spreadsheet.
     * @param input Document input request (required)
     * @return RenameXlsxWorksheetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RenameXlsxWorksheetResponse editDocumentXlsxRenameWorksheet(RenameXlsxWorksheetRequest input) throws ApiException {
        ApiResponse<RenameXlsxWorksheetResponse> resp = editDocumentXlsxRenameWorksheetWithHttpInfo(input);
        return resp.getData();
    }

    /**
     * Rename a specific worksheet in a Excel XLSX spreadsheet
     * Edits the input Excel XLSX spreadsheet document to rename a specified worksheet (tab).  Use the Get Worksheets API to enumerate available worksheets in a spreadsheet.
     * @param input Document input request (required)
     * @return ApiResponse&lt;RenameXlsxWorksheetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RenameXlsxWorksheetResponse> editDocumentXlsxRenameWorksheetWithHttpInfo(RenameXlsxWorksheetRequest input) throws ApiException {
        com.squareup.okhttp.Call call = editDocumentXlsxRenameWorksheetValidateBeforeCall(input, null, null);
        Type localVarReturnType = new TypeToken<RenameXlsxWorksheetResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Rename a specific worksheet in a Excel XLSX spreadsheet (asynchronously)
     * Edits the input Excel XLSX spreadsheet document to rename a specified worksheet (tab).  Use the Get Worksheets API to enumerate available worksheets in a spreadsheet.
     * @param input Document input request (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call editDocumentXlsxRenameWorksheetAsync(RenameXlsxWorksheetRequest input, final ApiCallback<RenameXlsxWorksheetResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = editDocumentXlsxRenameWorksheetValidateBeforeCall(input, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RenameXlsxWorksheetResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for editDocumentXlsxSetCellByIdentifier
     * @param input Document input request (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call editDocumentXlsxSetCellByIdentifierCall(SetXlsxCellByIdentifierRequest input, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = input;

        // create path and map variables
        String localVarPath = "/convert/edit/xlsx/set-cell/by-identifier";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Apikey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call editDocumentXlsxSetCellByIdentifierValidateBeforeCall(SetXlsxCellByIdentifierRequest input, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'input' is set
        if (input == null) {
            throw new ApiException("Missing the required parameter 'input' when calling editDocumentXlsxSetCellByIdentifier(Async)");
        }
        

        com.squareup.okhttp.Call call = editDocumentXlsxSetCellByIdentifierCall(input, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Set, update cell contents in an Excel XLSX spreadsheet, worksheet by cell identifier
     * Sets, updates the contents of a specific cell in an Excel XLSX spreadsheet, worksheet using its cell identifier (e.g. A1, B22, C33) in the worksheet
     * @param input Document input request (required)
     * @return SetXlsxCellByIdentifierResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SetXlsxCellByIdentifierResponse editDocumentXlsxSetCellByIdentifier(SetXlsxCellByIdentifierRequest input) throws ApiException {
        ApiResponse<SetXlsxCellByIdentifierResponse> resp = editDocumentXlsxSetCellByIdentifierWithHttpInfo(input);
        return resp.getData();
    }

    /**
     * Set, update cell contents in an Excel XLSX spreadsheet, worksheet by cell identifier
     * Sets, updates the contents of a specific cell in an Excel XLSX spreadsheet, worksheet using its cell identifier (e.g. A1, B22, C33) in the worksheet
     * @param input Document input request (required)
     * @return ApiResponse&lt;SetXlsxCellByIdentifierResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SetXlsxCellByIdentifierResponse> editDocumentXlsxSetCellByIdentifierWithHttpInfo(SetXlsxCellByIdentifierRequest input) throws ApiException {
        com.squareup.okhttp.Call call = editDocumentXlsxSetCellByIdentifierValidateBeforeCall(input, null, null);
        Type localVarReturnType = new TypeToken<SetXlsxCellByIdentifierResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Set, update cell contents in an Excel XLSX spreadsheet, worksheet by cell identifier (asynchronously)
     * Sets, updates the contents of a specific cell in an Excel XLSX spreadsheet, worksheet using its cell identifier (e.g. A1, B22, C33) in the worksheet
     * @param input Document input request (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call editDocumentXlsxSetCellByIdentifierAsync(SetXlsxCellByIdentifierRequest input, final ApiCallback<SetXlsxCellByIdentifierResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = editDocumentXlsxSetCellByIdentifierValidateBeforeCall(input, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SetXlsxCellByIdentifierResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for editDocumentXlsxSetCellByIndex
     * @param input Document input request (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call editDocumentXlsxSetCellByIndexCall(SetXlsxCellRequest input, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = input;

        // create path and map variables
        String localVarPath = "/convert/edit/xlsx/set-cell/by-index";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Apikey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call editDocumentXlsxSetCellByIndexValidateBeforeCall(SetXlsxCellRequest input, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'input' is set
        if (input == null) {
            throw new ApiException("Missing the required parameter 'input' when calling editDocumentXlsxSetCellByIndex(Async)");
        }
        

        com.squareup.okhttp.Call call = editDocumentXlsxSetCellByIndexCall(input, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Set, update cell contents in an Excel XLSX spreadsheet, worksheet by index
     * Sets, updates the contents of a specific cell in an Excel XLSX spreadsheet, worksheet
     * @param input Document input request (required)
     * @return SetXlsxCellResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SetXlsxCellResponse editDocumentXlsxSetCellByIndex(SetXlsxCellRequest input) throws ApiException {
        ApiResponse<SetXlsxCellResponse> resp = editDocumentXlsxSetCellByIndexWithHttpInfo(input);
        return resp.getData();
    }

    /**
     * Set, update cell contents in an Excel XLSX spreadsheet, worksheet by index
     * Sets, updates the contents of a specific cell in an Excel XLSX spreadsheet, worksheet
     * @param input Document input request (required)
     * @return ApiResponse&lt;SetXlsxCellResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SetXlsxCellResponse> editDocumentXlsxSetCellByIndexWithHttpInfo(SetXlsxCellRequest input) throws ApiException {
        com.squareup.okhttp.Call call = editDocumentXlsxSetCellByIndexValidateBeforeCall(input, null, null);
        Type localVarReturnType = new TypeToken<SetXlsxCellResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Set, update cell contents in an Excel XLSX spreadsheet, worksheet by index (asynchronously)
     * Sets, updates the contents of a specific cell in an Excel XLSX spreadsheet, worksheet
     * @param input Document input request (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call editDocumentXlsxSetCellByIndexAsync(SetXlsxCellRequest input, final ApiCallback<SetXlsxCellResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = editDocumentXlsxSetCellByIndexValidateBeforeCall(input, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SetXlsxCellResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
