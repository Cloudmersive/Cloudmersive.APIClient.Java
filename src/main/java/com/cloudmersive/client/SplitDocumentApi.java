/*
 * convertapi
 * Convert API lets you effortlessly convert file formats and types.
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.cloudmersive.client;

import com.cloudmersive.client.invoker.ApiCallback;
import com.cloudmersive.client.invoker.ApiClient;
import com.cloudmersive.client.invoker.ApiException;
import com.cloudmersive.client.invoker.ApiResponse;
import com.cloudmersive.client.invoker.Configuration;
import com.cloudmersive.client.invoker.Pair;
import com.cloudmersive.client.invoker.ProgressRequestBody;
import com.cloudmersive.client.invoker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.io.File;
import com.cloudmersive.client.model.JobStatusResult;
import com.cloudmersive.client.model.PptxSplitAdvancedRequest;
import com.cloudmersive.client.model.PptxSplitAdvancedResponse;
import com.cloudmersive.client.model.SplitBatchJobCreateResult;
import com.cloudmersive.client.model.SplitDocxDocumentResult;
import com.cloudmersive.client.model.SplitPdfResult;
import com.cloudmersive.client.model.SplitPptxPresentationResult;
import com.cloudmersive.client.model.SplitTextDocumentByLinesResult;
import com.cloudmersive.client.model.SplitTextDocumentByStringResult;
import com.cloudmersive.client.model.SplitXlsxWorksheetResult;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SplitDocumentApi {
    private ApiClient apiClient;

    public SplitDocumentApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SplitDocumentApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for splitDocumentBatchJobCreate
     * @param inputFile Input file to perform the operation on. (required)
     * @param returnDocumentContents Set to true to return the contents of each presentation directly, set to false to only return URLs to each resulting presentation.  Default is true. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call splitDocumentBatchJobCreateCall(File inputFile, Boolean returnDocumentContents, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/convert/split/batch-job/create";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (returnDocumentContents != null)
        localVarHeaderParams.put("returnDocumentContents", apiClient.parameterToString(returnDocumentContents));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (inputFile != null)
        localVarFormParams.put("inputFile", inputFile);

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Apikey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call splitDocumentBatchJobCreateValidateBeforeCall(File inputFile, Boolean returnDocumentContents, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'inputFile' is set
        if (inputFile == null) {
            throw new ApiException("Missing the required parameter 'inputFile' when calling splitDocumentBatchJobCreate(Async)");
        }
        

        com.squareup.okhttp.Call call = splitDocumentBatchJobCreateCall(inputFile, returnDocumentContents, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Split a single Document into Separate Documents by Page as a Batch Job
     * Split a Document (PPTX supported), comprised of multiple pages into separate files, with each containing exactly one page.  This API is designed for large jobs that could take a long time to create and so runs as a batch job that returns a Job ID that you can use with the GetAsyncJobStatus API to check on the status of the Job and ultimately get the output result.  This API automatically detects the document type and then performs the split by using the document type-specific API needed to perform the split.  This API is only available for Cloudmersive Managed Instance and Private Cloud deployments.
     * @param inputFile Input file to perform the operation on. (required)
     * @param returnDocumentContents Set to true to return the contents of each presentation directly, set to false to only return URLs to each resulting presentation.  Default is true. (optional)
     * @return SplitBatchJobCreateResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SplitBatchJobCreateResult splitDocumentBatchJobCreate(File inputFile, Boolean returnDocumentContents) throws ApiException {
        ApiResponse<SplitBatchJobCreateResult> resp = splitDocumentBatchJobCreateWithHttpInfo(inputFile, returnDocumentContents);
        return resp.getData();
    }

    /**
     * Split a single Document into Separate Documents by Page as a Batch Job
     * Split a Document (PPTX supported), comprised of multiple pages into separate files, with each containing exactly one page.  This API is designed for large jobs that could take a long time to create and so runs as a batch job that returns a Job ID that you can use with the GetAsyncJobStatus API to check on the status of the Job and ultimately get the output result.  This API automatically detects the document type and then performs the split by using the document type-specific API needed to perform the split.  This API is only available for Cloudmersive Managed Instance and Private Cloud deployments.
     * @param inputFile Input file to perform the operation on. (required)
     * @param returnDocumentContents Set to true to return the contents of each presentation directly, set to false to only return URLs to each resulting presentation.  Default is true. (optional)
     * @return ApiResponse&lt;SplitBatchJobCreateResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SplitBatchJobCreateResult> splitDocumentBatchJobCreateWithHttpInfo(File inputFile, Boolean returnDocumentContents) throws ApiException {
        com.squareup.okhttp.Call call = splitDocumentBatchJobCreateValidateBeforeCall(inputFile, returnDocumentContents, null, null);
        Type localVarReturnType = new TypeToken<SplitBatchJobCreateResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Split a single Document into Separate Documents by Page as a Batch Job (asynchronously)
     * Split a Document (PPTX supported), comprised of multiple pages into separate files, with each containing exactly one page.  This API is designed for large jobs that could take a long time to create and so runs as a batch job that returns a Job ID that you can use with the GetAsyncJobStatus API to check on the status of the Job and ultimately get the output result.  This API automatically detects the document type and then performs the split by using the document type-specific API needed to perform the split.  This API is only available for Cloudmersive Managed Instance and Private Cloud deployments.
     * @param inputFile Input file to perform the operation on. (required)
     * @param returnDocumentContents Set to true to return the contents of each presentation directly, set to false to only return URLs to each resulting presentation.  Default is true. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call splitDocumentBatchJobCreateAsync(File inputFile, Boolean returnDocumentContents, final ApiCallback<SplitBatchJobCreateResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = splitDocumentBatchJobCreateValidateBeforeCall(inputFile, returnDocumentContents, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SplitBatchJobCreateResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for splitDocumentDocx
     * @param inputFile Input file to perform the operation on. (required)
     * @param returnDocumentContents Set to true to return the contents of each Worksheet directly, set to false to only return URLs to each resulting document.  Default is true. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call splitDocumentDocxCall(File inputFile, Boolean returnDocumentContents, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/convert/split/docx";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (returnDocumentContents != null)
        localVarHeaderParams.put("returnDocumentContents", apiClient.parameterToString(returnDocumentContents));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (inputFile != null)
        localVarFormParams.put("inputFile", inputFile);

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Apikey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call splitDocumentDocxValidateBeforeCall(File inputFile, Boolean returnDocumentContents, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'inputFile' is set
        if (inputFile == null) {
            throw new ApiException("Missing the required parameter 'inputFile' when calling splitDocumentDocx(Async)");
        }
        

        com.squareup.okhttp.Call call = splitDocumentDocxCall(inputFile, returnDocumentContents, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Split a single Word Document DOCX into Separate Documents by Page
     * Split a Word DOCX Document, comprised of multiple pages into separate Word DOCX document files, with each containing exactly one page.
     * @param inputFile Input file to perform the operation on. (required)
     * @param returnDocumentContents Set to true to return the contents of each Worksheet directly, set to false to only return URLs to each resulting document.  Default is true. (optional)
     * @return SplitDocxDocumentResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SplitDocxDocumentResult splitDocumentDocx(File inputFile, Boolean returnDocumentContents) throws ApiException {
        ApiResponse<SplitDocxDocumentResult> resp = splitDocumentDocxWithHttpInfo(inputFile, returnDocumentContents);
        return resp.getData();
    }

    /**
     * Split a single Word Document DOCX into Separate Documents by Page
     * Split a Word DOCX Document, comprised of multiple pages into separate Word DOCX document files, with each containing exactly one page.
     * @param inputFile Input file to perform the operation on. (required)
     * @param returnDocumentContents Set to true to return the contents of each Worksheet directly, set to false to only return URLs to each resulting document.  Default is true. (optional)
     * @return ApiResponse&lt;SplitDocxDocumentResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SplitDocxDocumentResult> splitDocumentDocxWithHttpInfo(File inputFile, Boolean returnDocumentContents) throws ApiException {
        com.squareup.okhttp.Call call = splitDocumentDocxValidateBeforeCall(inputFile, returnDocumentContents, null, null);
        Type localVarReturnType = new TypeToken<SplitDocxDocumentResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Split a single Word Document DOCX into Separate Documents by Page (asynchronously)
     * Split a Word DOCX Document, comprised of multiple pages into separate Word DOCX document files, with each containing exactly one page.
     * @param inputFile Input file to perform the operation on. (required)
     * @param returnDocumentContents Set to true to return the contents of each Worksheet directly, set to false to only return URLs to each resulting document.  Default is true. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call splitDocumentDocxAsync(File inputFile, Boolean returnDocumentContents, final ApiCallback<SplitDocxDocumentResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = splitDocumentDocxValidateBeforeCall(inputFile, returnDocumentContents, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SplitDocxDocumentResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for splitDocumentGetAsyncJobStatus
     * @param asyncJobID  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call splitDocumentGetAsyncJobStatusCall(String asyncJobID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/convert/split/batch-job/status";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (asyncJobID != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("AsyncJobID", asyncJobID));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Apikey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call splitDocumentGetAsyncJobStatusValidateBeforeCall(String asyncJobID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'asyncJobID' is set
        if (asyncJobID == null) {
            throw new ApiException("Missing the required parameter 'asyncJobID' when calling splitDocumentGetAsyncJobStatus(Async)");
        }
        

        com.squareup.okhttp.Call call = splitDocumentGetAsyncJobStatusCall(asyncJobID, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the status and result of a Split Document Batch Job
     * Returns the result of the Async Job - possible states can be STARTED or COMPLETED.  This API is only available for Cloudmersive Managed Instance and Private Cloud deployments.
     * @param asyncJobID  (required)
     * @return JobStatusResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public JobStatusResult splitDocumentGetAsyncJobStatus(String asyncJobID) throws ApiException {
        ApiResponse<JobStatusResult> resp = splitDocumentGetAsyncJobStatusWithHttpInfo(asyncJobID);
        return resp.getData();
    }

    /**
     * Get the status and result of a Split Document Batch Job
     * Returns the result of the Async Job - possible states can be STARTED or COMPLETED.  This API is only available for Cloudmersive Managed Instance and Private Cloud deployments.
     * @param asyncJobID  (required)
     * @return ApiResponse&lt;JobStatusResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<JobStatusResult> splitDocumentGetAsyncJobStatusWithHttpInfo(String asyncJobID) throws ApiException {
        com.squareup.okhttp.Call call = splitDocumentGetAsyncJobStatusValidateBeforeCall(asyncJobID, null, null);
        Type localVarReturnType = new TypeToken<JobStatusResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the status and result of a Split Document Batch Job (asynchronously)
     * Returns the result of the Async Job - possible states can be STARTED or COMPLETED.  This API is only available for Cloudmersive Managed Instance and Private Cloud deployments.
     * @param asyncJobID  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call splitDocumentGetAsyncJobStatusAsync(String asyncJobID, final ApiCallback<JobStatusResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = splitDocumentGetAsyncJobStatusValidateBeforeCall(asyncJobID, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<JobStatusResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for splitDocumentPdfByPage
     * @param inputFile Input file to perform the operation on. (required)
     * @param returnDocumentContents Set to true to directly return all of the document contents in the DocumentContents field; set to false to return contents as temporary URLs (more efficient for large operations).  Default is false. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call splitDocumentPdfByPageCall(File inputFile, Boolean returnDocumentContents, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/convert/split/pdf";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (returnDocumentContents != null)
        localVarHeaderParams.put("returnDocumentContents", apiClient.parameterToString(returnDocumentContents));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (inputFile != null)
        localVarFormParams.put("inputFile", inputFile);

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Apikey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call splitDocumentPdfByPageValidateBeforeCall(File inputFile, Boolean returnDocumentContents, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'inputFile' is set
        if (inputFile == null) {
            throw new ApiException("Missing the required parameter 'inputFile' when calling splitDocumentPdfByPage(Async)");
        }
        

        com.squareup.okhttp.Call call = splitDocumentPdfByPageCall(inputFile, returnDocumentContents, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Split a PDF file into separate PDF files, one per page
     * Split an input PDF file into separate pages, comprised of one PDF file per page.
     * @param inputFile Input file to perform the operation on. (required)
     * @param returnDocumentContents Set to true to directly return all of the document contents in the DocumentContents field; set to false to return contents as temporary URLs (more efficient for large operations).  Default is false. (optional)
     * @return SplitPdfResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SplitPdfResult splitDocumentPdfByPage(File inputFile, Boolean returnDocumentContents) throws ApiException {
        ApiResponse<SplitPdfResult> resp = splitDocumentPdfByPageWithHttpInfo(inputFile, returnDocumentContents);
        return resp.getData();
    }

    /**
     * Split a PDF file into separate PDF files, one per page
     * Split an input PDF file into separate pages, comprised of one PDF file per page.
     * @param inputFile Input file to perform the operation on. (required)
     * @param returnDocumentContents Set to true to directly return all of the document contents in the DocumentContents field; set to false to return contents as temporary URLs (more efficient for large operations).  Default is false. (optional)
     * @return ApiResponse&lt;SplitPdfResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SplitPdfResult> splitDocumentPdfByPageWithHttpInfo(File inputFile, Boolean returnDocumentContents) throws ApiException {
        com.squareup.okhttp.Call call = splitDocumentPdfByPageValidateBeforeCall(inputFile, returnDocumentContents, null, null);
        Type localVarReturnType = new TypeToken<SplitPdfResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Split a PDF file into separate PDF files, one per page (asynchronously)
     * Split an input PDF file into separate pages, comprised of one PDF file per page.
     * @param inputFile Input file to perform the operation on. (required)
     * @param returnDocumentContents Set to true to directly return all of the document contents in the DocumentContents field; set to false to return contents as temporary URLs (more efficient for large operations).  Default is false. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call splitDocumentPdfByPageAsync(File inputFile, Boolean returnDocumentContents, final ApiCallback<SplitPdfResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = splitDocumentPdfByPageValidateBeforeCall(inputFile, returnDocumentContents, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SplitPdfResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for splitDocumentPptx
     * @param inputFile Input file to perform the operation on. (required)
     * @param returnDocumentContents Set to true to return the contents of each presentation directly, set to false to only return URLs to each resulting presentation.  Default is true. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call splitDocumentPptxCall(File inputFile, Boolean returnDocumentContents, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/convert/split/pptx";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (returnDocumentContents != null)
        localVarHeaderParams.put("returnDocumentContents", apiClient.parameterToString(returnDocumentContents));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (inputFile != null)
        localVarFormParams.put("inputFile", inputFile);

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Apikey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call splitDocumentPptxValidateBeforeCall(File inputFile, Boolean returnDocumentContents, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'inputFile' is set
        if (inputFile == null) {
            throw new ApiException("Missing the required parameter 'inputFile' when calling splitDocumentPptx(Async)");
        }
        

        com.squareup.okhttp.Call call = splitDocumentPptxCall(inputFile, returnDocumentContents, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Split a single PowerPoint Presentation PPTX into Separate Slides
     * Split an PowerPoint PPTX Presentation, comprised of multiple slides into separate PowerPoint PPTX presentation files, with each containing exactly one slide.
     * @param inputFile Input file to perform the operation on. (required)
     * @param returnDocumentContents Set to true to return the contents of each presentation directly, set to false to only return URLs to each resulting presentation.  Default is true. (optional)
     * @return SplitPptxPresentationResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SplitPptxPresentationResult splitDocumentPptx(File inputFile, Boolean returnDocumentContents) throws ApiException {
        ApiResponse<SplitPptxPresentationResult> resp = splitDocumentPptxWithHttpInfo(inputFile, returnDocumentContents);
        return resp.getData();
    }

    /**
     * Split a single PowerPoint Presentation PPTX into Separate Slides
     * Split an PowerPoint PPTX Presentation, comprised of multiple slides into separate PowerPoint PPTX presentation files, with each containing exactly one slide.
     * @param inputFile Input file to perform the operation on. (required)
     * @param returnDocumentContents Set to true to return the contents of each presentation directly, set to false to only return URLs to each resulting presentation.  Default is true. (optional)
     * @return ApiResponse&lt;SplitPptxPresentationResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SplitPptxPresentationResult> splitDocumentPptxWithHttpInfo(File inputFile, Boolean returnDocumentContents) throws ApiException {
        com.squareup.okhttp.Call call = splitDocumentPptxValidateBeforeCall(inputFile, returnDocumentContents, null, null);
        Type localVarReturnType = new TypeToken<SplitPptxPresentationResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Split a single PowerPoint Presentation PPTX into Separate Slides (asynchronously)
     * Split an PowerPoint PPTX Presentation, comprised of multiple slides into separate PowerPoint PPTX presentation files, with each containing exactly one slide.
     * @param inputFile Input file to perform the operation on. (required)
     * @param returnDocumentContents Set to true to return the contents of each presentation directly, set to false to only return URLs to each resulting presentation.  Default is true. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call splitDocumentPptxAsync(File inputFile, Boolean returnDocumentContents, final ApiCallback<SplitPptxPresentationResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = splitDocumentPptxValidateBeforeCall(inputFile, returnDocumentContents, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SplitPptxPresentationResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for splitDocumentPptxAdvanced
     * @param request  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call splitDocumentPptxAdvancedCall(PptxSplitAdvancedRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = request;

        // create path and map variables
        String localVarPath = "/convert/split/pptx/advanced";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Apikey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call splitDocumentPptxAdvancedValidateBeforeCall(PptxSplitAdvancedRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling splitDocumentPptxAdvanced(Async)");
        }
        

        com.squareup.okhttp.Call call = splitDocumentPptxAdvancedCall(request, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Split a single PowerPoint Presentation PPTX into Separate Presentations
     * Split a PowerPoint PPTX Presentation, comprised of multiple slides into separate PowerPoint PPTX presentations of customizeable size.
     * @param request  (required)
     * @return PptxSplitAdvancedResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PptxSplitAdvancedResponse splitDocumentPptxAdvanced(PptxSplitAdvancedRequest request) throws ApiException {
        ApiResponse<PptxSplitAdvancedResponse> resp = splitDocumentPptxAdvancedWithHttpInfo(request);
        return resp.getData();
    }

    /**
     * Split a single PowerPoint Presentation PPTX into Separate Presentations
     * Split a PowerPoint PPTX Presentation, comprised of multiple slides into separate PowerPoint PPTX presentations of customizeable size.
     * @param request  (required)
     * @return ApiResponse&lt;PptxSplitAdvancedResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PptxSplitAdvancedResponse> splitDocumentPptxAdvancedWithHttpInfo(PptxSplitAdvancedRequest request) throws ApiException {
        com.squareup.okhttp.Call call = splitDocumentPptxAdvancedValidateBeforeCall(request, null, null);
        Type localVarReturnType = new TypeToken<PptxSplitAdvancedResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Split a single PowerPoint Presentation PPTX into Separate Presentations (asynchronously)
     * Split a PowerPoint PPTX Presentation, comprised of multiple slides into separate PowerPoint PPTX presentations of customizeable size.
     * @param request  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call splitDocumentPptxAdvancedAsync(PptxSplitAdvancedRequest request, final ApiCallback<PptxSplitAdvancedResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = splitDocumentPptxAdvancedValidateBeforeCall(request, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PptxSplitAdvancedResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for splitDocumentTxtByLine
     * @param inputFile Input file to perform the operation on. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call splitDocumentTxtByLineCall(File inputFile, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/convert/split/txt/by-line";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (inputFile != null)
        localVarFormParams.put("inputFile", inputFile);

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Apikey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call splitDocumentTxtByLineValidateBeforeCall(File inputFile, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'inputFile' is set
        if (inputFile == null) {
            throw new ApiException("Missing the required parameter 'inputFile' when calling splitDocumentTxtByLine(Async)");
        }
        

        com.squareup.okhttp.Call call = splitDocumentTxtByLineCall(inputFile, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Split a single Text file (txt) into lines
     * Split a Text (txt) Document by line, returning each line separately in order.  Supports multiple types of newlines.
     * @param inputFile Input file to perform the operation on. (required)
     * @return SplitTextDocumentByLinesResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SplitTextDocumentByLinesResult splitDocumentTxtByLine(File inputFile) throws ApiException {
        ApiResponse<SplitTextDocumentByLinesResult> resp = splitDocumentTxtByLineWithHttpInfo(inputFile);
        return resp.getData();
    }

    /**
     * Split a single Text file (txt) into lines
     * Split a Text (txt) Document by line, returning each line separately in order.  Supports multiple types of newlines.
     * @param inputFile Input file to perform the operation on. (required)
     * @return ApiResponse&lt;SplitTextDocumentByLinesResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SplitTextDocumentByLinesResult> splitDocumentTxtByLineWithHttpInfo(File inputFile) throws ApiException {
        com.squareup.okhttp.Call call = splitDocumentTxtByLineValidateBeforeCall(inputFile, null, null);
        Type localVarReturnType = new TypeToken<SplitTextDocumentByLinesResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Split a single Text file (txt) into lines (asynchronously)
     * Split a Text (txt) Document by line, returning each line separately in order.  Supports multiple types of newlines.
     * @param inputFile Input file to perform the operation on. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call splitDocumentTxtByLineAsync(File inputFile, final ApiCallback<SplitTextDocumentByLinesResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = splitDocumentTxtByLineValidateBeforeCall(inputFile, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SplitTextDocumentByLinesResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for splitDocumentTxtByString
     * @param inputFile Input file to perform the operation on. (required)
     * @param splitDelimiter Required; String to split up the input file on (required)
     * @param skipEmptyElements Optional; If true, empty elements will be skipped in the output (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call splitDocumentTxtByStringCall(File inputFile, String splitDelimiter, Boolean skipEmptyElements, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/convert/split/txt/by-string";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (splitDelimiter != null)
        localVarHeaderParams.put("splitDelimiter", apiClient.parameterToString(splitDelimiter));
        if (skipEmptyElements != null)
        localVarHeaderParams.put("skipEmptyElements", apiClient.parameterToString(skipEmptyElements));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (inputFile != null)
        localVarFormParams.put("inputFile", inputFile);

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Apikey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call splitDocumentTxtByStringValidateBeforeCall(File inputFile, String splitDelimiter, Boolean skipEmptyElements, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'inputFile' is set
        if (inputFile == null) {
            throw new ApiException("Missing the required parameter 'inputFile' when calling splitDocumentTxtByString(Async)");
        }
        
        // verify the required parameter 'splitDelimiter' is set
        if (splitDelimiter == null) {
            throw new ApiException("Missing the required parameter 'splitDelimiter' when calling splitDocumentTxtByString(Async)");
        }
        

        com.squareup.okhttp.Call call = splitDocumentTxtByStringCall(inputFile, splitDelimiter, skipEmptyElements, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Split a single Text file (txt) by a string delimiter
     * Split a Text (txt) Document by a string delimiter, returning each component of the string as an array of strings.
     * @param inputFile Input file to perform the operation on. (required)
     * @param splitDelimiter Required; String to split up the input file on (required)
     * @param skipEmptyElements Optional; If true, empty elements will be skipped in the output (optional)
     * @return SplitTextDocumentByStringResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SplitTextDocumentByStringResult splitDocumentTxtByString(File inputFile, String splitDelimiter, Boolean skipEmptyElements) throws ApiException {
        ApiResponse<SplitTextDocumentByStringResult> resp = splitDocumentTxtByStringWithHttpInfo(inputFile, splitDelimiter, skipEmptyElements);
        return resp.getData();
    }

    /**
     * Split a single Text file (txt) by a string delimiter
     * Split a Text (txt) Document by a string delimiter, returning each component of the string as an array of strings.
     * @param inputFile Input file to perform the operation on. (required)
     * @param splitDelimiter Required; String to split up the input file on (required)
     * @param skipEmptyElements Optional; If true, empty elements will be skipped in the output (optional)
     * @return ApiResponse&lt;SplitTextDocumentByStringResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SplitTextDocumentByStringResult> splitDocumentTxtByStringWithHttpInfo(File inputFile, String splitDelimiter, Boolean skipEmptyElements) throws ApiException {
        com.squareup.okhttp.Call call = splitDocumentTxtByStringValidateBeforeCall(inputFile, splitDelimiter, skipEmptyElements, null, null);
        Type localVarReturnType = new TypeToken<SplitTextDocumentByStringResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Split a single Text file (txt) by a string delimiter (asynchronously)
     * Split a Text (txt) Document by a string delimiter, returning each component of the string as an array of strings.
     * @param inputFile Input file to perform the operation on. (required)
     * @param splitDelimiter Required; String to split up the input file on (required)
     * @param skipEmptyElements Optional; If true, empty elements will be skipped in the output (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call splitDocumentTxtByStringAsync(File inputFile, String splitDelimiter, Boolean skipEmptyElements, final ApiCallback<SplitTextDocumentByStringResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = splitDocumentTxtByStringValidateBeforeCall(inputFile, splitDelimiter, skipEmptyElements, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SplitTextDocumentByStringResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for splitDocumentXlsx
     * @param inputFile Input file to perform the operation on. (required)
     * @param returnDocumentContents Set to true to return the contents of each Worksheet directly, set to false to only return URLs to each resulting worksheet.  Default is true. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call splitDocumentXlsxCall(File inputFile, Boolean returnDocumentContents, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/convert/split/xlsx";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (returnDocumentContents != null)
        localVarHeaderParams.put("returnDocumentContents", apiClient.parameterToString(returnDocumentContents));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (inputFile != null)
        localVarFormParams.put("inputFile", inputFile);

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Apikey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call splitDocumentXlsxValidateBeforeCall(File inputFile, Boolean returnDocumentContents, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'inputFile' is set
        if (inputFile == null) {
            throw new ApiException("Missing the required parameter 'inputFile' when calling splitDocumentXlsx(Async)");
        }
        

        com.squareup.okhttp.Call call = splitDocumentXlsxCall(inputFile, returnDocumentContents, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Split a single Excel XLSX into Separate Worksheets
     * Split an Excel XLSX Spreadsheet, comprised of multiple Worksheets (or Tabs) into separate Excel XLSX spreadsheet files, with each containing exactly one Worksheet.
     * @param inputFile Input file to perform the operation on. (required)
     * @param returnDocumentContents Set to true to return the contents of each Worksheet directly, set to false to only return URLs to each resulting worksheet.  Default is true. (optional)
     * @return SplitXlsxWorksheetResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SplitXlsxWorksheetResult splitDocumentXlsx(File inputFile, Boolean returnDocumentContents) throws ApiException {
        ApiResponse<SplitXlsxWorksheetResult> resp = splitDocumentXlsxWithHttpInfo(inputFile, returnDocumentContents);
        return resp.getData();
    }

    /**
     * Split a single Excel XLSX into Separate Worksheets
     * Split an Excel XLSX Spreadsheet, comprised of multiple Worksheets (or Tabs) into separate Excel XLSX spreadsheet files, with each containing exactly one Worksheet.
     * @param inputFile Input file to perform the operation on. (required)
     * @param returnDocumentContents Set to true to return the contents of each Worksheet directly, set to false to only return URLs to each resulting worksheet.  Default is true. (optional)
     * @return ApiResponse&lt;SplitXlsxWorksheetResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SplitXlsxWorksheetResult> splitDocumentXlsxWithHttpInfo(File inputFile, Boolean returnDocumentContents) throws ApiException {
        com.squareup.okhttp.Call call = splitDocumentXlsxValidateBeforeCall(inputFile, returnDocumentContents, null, null);
        Type localVarReturnType = new TypeToken<SplitXlsxWorksheetResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Split a single Excel XLSX into Separate Worksheets (asynchronously)
     * Split an Excel XLSX Spreadsheet, comprised of multiple Worksheets (or Tabs) into separate Excel XLSX spreadsheet files, with each containing exactly one Worksheet.
     * @param inputFile Input file to perform the operation on. (required)
     * @param returnDocumentContents Set to true to return the contents of each Worksheet directly, set to false to only return URLs to each resulting worksheet.  Default is true. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call splitDocumentXlsxAsync(File inputFile, Boolean returnDocumentContents, final ApiCallback<SplitXlsxWorksheetResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = splitDocumentXlsxValidateBeforeCall(inputFile, returnDocumentContents, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SplitXlsxWorksheetResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
