/*
 * convertapi
 * Convert API lets you effortlessly convert file formats and types.
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.cloudmersive.client;

import com.cloudmersive.client.invoker.ApiCallback;
import com.cloudmersive.client.invoker.ApiClient;
import com.cloudmersive.client.invoker.ApiException;
import com.cloudmersive.client.invoker.ApiResponse;
import com.cloudmersive.client.invoker.Configuration;
import com.cloudmersive.client.invoker.Pair;
import com.cloudmersive.client.invoker.ProgressRequestBody;
import com.cloudmersive.client.invoker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.io.File;
import com.cloudmersive.client.model.XmlAddAttributeWithXPathResult;
import com.cloudmersive.client.model.XmlAddChildWithXPathResult;
import com.cloudmersive.client.model.XmlFilterWithXPathResult;
import com.cloudmersive.client.model.XmlQueryWithXQueryMultiResult;
import com.cloudmersive.client.model.XmlQueryWithXQueryResult;
import com.cloudmersive.client.model.XmlRemoveAllChildrenWithXPathResult;
import com.cloudmersive.client.model.XmlRemoveWithXPathResult;
import com.cloudmersive.client.model.XmlReplaceWithXPathResult;
import com.cloudmersive.client.model.XmlSetValueWithXPathResult;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ConvertDataApi {
    private ApiClient apiClient;

    public ConvertDataApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ConvertDataApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for convertDataCsvToJson
     * @param inputFile Input file to perform the operation on. (required)
     * @param columnNamesFromFirstRow Optional; If true, the first row will be used as the labels for the columns; if false, columns will be named Column0, Column1, etc.  Default is true.  Set to false if you are not using column headings, or have an irregular column structure. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call convertDataCsvToJsonCall(File inputFile, Boolean columnNamesFromFirstRow, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/convert/csv/to/json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (columnNamesFromFirstRow != null)
        localVarHeaderParams.put("columnNamesFromFirstRow", apiClient.parameterToString(columnNamesFromFirstRow));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (inputFile != null)
        localVarFormParams.put("inputFile", inputFile);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Apikey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call convertDataCsvToJsonValidateBeforeCall(File inputFile, Boolean columnNamesFromFirstRow, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'inputFile' is set
        if (inputFile == null) {
            throw new ApiException("Missing the required parameter 'inputFile' when calling convertDataCsvToJson(Async)");
        }
        

        com.squareup.okhttp.Call call = convertDataCsvToJsonCall(inputFile, columnNamesFromFirstRow, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Convert CSV to JSON conversion
     * Convert a CSV file to a JSON object array
     * @param inputFile Input file to perform the operation on. (required)
     * @param columnNamesFromFirstRow Optional; If true, the first row will be used as the labels for the columns; if false, columns will be named Column0, Column1, etc.  Default is true.  Set to false if you are not using column headings, or have an irregular column structure. (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object convertDataCsvToJson(File inputFile, Boolean columnNamesFromFirstRow) throws ApiException {
        ApiResponse<Object> resp = convertDataCsvToJsonWithHttpInfo(inputFile, columnNamesFromFirstRow);
        return resp.getData();
    }

    /**
     * Convert CSV to JSON conversion
     * Convert a CSV file to a JSON object array
     * @param inputFile Input file to perform the operation on. (required)
     * @param columnNamesFromFirstRow Optional; If true, the first row will be used as the labels for the columns; if false, columns will be named Column0, Column1, etc.  Default is true.  Set to false if you are not using column headings, or have an irregular column structure. (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> convertDataCsvToJsonWithHttpInfo(File inputFile, Boolean columnNamesFromFirstRow) throws ApiException {
        com.squareup.okhttp.Call call = convertDataCsvToJsonValidateBeforeCall(inputFile, columnNamesFromFirstRow, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Convert CSV to JSON conversion (asynchronously)
     * Convert a CSV file to a JSON object array
     * @param inputFile Input file to perform the operation on. (required)
     * @param columnNamesFromFirstRow Optional; If true, the first row will be used as the labels for the columns; if false, columns will be named Column0, Column1, etc.  Default is true.  Set to false if you are not using column headings, or have an irregular column structure. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call convertDataCsvToJsonAsync(File inputFile, Boolean columnNamesFromFirstRow, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = convertDataCsvToJsonValidateBeforeCall(inputFile, columnNamesFromFirstRow, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for convertDataCsvToXml
     * @param inputFile Input file to perform the operation on. (required)
     * @param columnNamesFromFirstRow Optional; If true, the first row will be used as the labels for the columns; if false, columns will be named Column0, Column1, etc.  Default is true.  Set to false if you are not using column headings, or have an irregular column structure. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call convertDataCsvToXmlCall(File inputFile, Boolean columnNamesFromFirstRow, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/convert/csv/to/xml";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (columnNamesFromFirstRow != null)
        localVarHeaderParams.put("columnNamesFromFirstRow", apiClient.parameterToString(columnNamesFromFirstRow));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (inputFile != null)
        localVarFormParams.put("inputFile", inputFile);

        final String[] localVarAccepts = {
            "application/octet-stream"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Apikey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call convertDataCsvToXmlValidateBeforeCall(File inputFile, Boolean columnNamesFromFirstRow, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'inputFile' is set
        if (inputFile == null) {
            throw new ApiException("Missing the required parameter 'inputFile' when calling convertDataCsvToXml(Async)");
        }
        

        com.squareup.okhttp.Call call = convertDataCsvToXmlCall(inputFile, columnNamesFromFirstRow, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Convert CSV to XML conversion
     * Convert a CSV file to a XML file
     * @param inputFile Input file to perform the operation on. (required)
     * @param columnNamesFromFirstRow Optional; If true, the first row will be used as the labels for the columns; if false, columns will be named Column0, Column1, etc.  Default is true.  Set to false if you are not using column headings, or have an irregular column structure. (optional)
     * @return byte[]
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public byte[] convertDataCsvToXml(File inputFile, Boolean columnNamesFromFirstRow) throws ApiException {
        ApiResponse<byte[]> resp = convertDataCsvToXmlWithHttpInfo(inputFile, columnNamesFromFirstRow);
        return resp.getData();
    }

    /**
     * Convert CSV to XML conversion
     * Convert a CSV file to a XML file
     * @param inputFile Input file to perform the operation on. (required)
     * @param columnNamesFromFirstRow Optional; If true, the first row will be used as the labels for the columns; if false, columns will be named Column0, Column1, etc.  Default is true.  Set to false if you are not using column headings, or have an irregular column structure. (optional)
     * @return ApiResponse&lt;byte[]&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<byte[]> convertDataCsvToXmlWithHttpInfo(File inputFile, Boolean columnNamesFromFirstRow) throws ApiException {
        com.squareup.okhttp.Call call = convertDataCsvToXmlValidateBeforeCall(inputFile, columnNamesFromFirstRow, null, null);
        Type localVarReturnType = new TypeToken<byte[]>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Convert CSV to XML conversion (asynchronously)
     * Convert a CSV file to a XML file
     * @param inputFile Input file to perform the operation on. (required)
     * @param columnNamesFromFirstRow Optional; If true, the first row will be used as the labels for the columns; if false, columns will be named Column0, Column1, etc.  Default is true.  Set to false if you are not using column headings, or have an irregular column structure. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call convertDataCsvToXmlAsync(File inputFile, Boolean columnNamesFromFirstRow, final ApiCallback<byte[]> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = convertDataCsvToXmlValidateBeforeCall(inputFile, columnNamesFromFirstRow, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<byte[]>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for convertDataJsonStringToXml
     * @param jsonString Input JSON String to convert to XML (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call convertDataJsonStringToXmlCall(String jsonString, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/convert/json-string/to/xml";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (jsonString != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("JsonString", jsonString));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Apikey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call convertDataJsonStringToXmlValidateBeforeCall(String jsonString, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'jsonString' is set
        if (jsonString == null) {
            throw new ApiException("Missing the required parameter 'jsonString' when calling convertDataJsonStringToXml(Async)");
        }
        

        com.squareup.okhttp.Call call = convertDataJsonStringToXmlCall(jsonString, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Convert JSON String to XML conversion
     * Convert a JSON object into XML
     * @param jsonString Input JSON String to convert to XML (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object convertDataJsonStringToXml(String jsonString) throws ApiException {
        ApiResponse<Object> resp = convertDataJsonStringToXmlWithHttpInfo(jsonString);
        return resp.getData();
    }

    /**
     * Convert JSON String to XML conversion
     * Convert a JSON object into XML
     * @param jsonString Input JSON String to convert to XML (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> convertDataJsonStringToXmlWithHttpInfo(String jsonString) throws ApiException {
        com.squareup.okhttp.Call call = convertDataJsonStringToXmlValidateBeforeCall(jsonString, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Convert JSON String to XML conversion (asynchronously)
     * Convert a JSON object into XML
     * @param jsonString Input JSON String to convert to XML (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call convertDataJsonStringToXmlAsync(String jsonString, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = convertDataJsonStringToXmlValidateBeforeCall(jsonString, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for convertDataJsonToXml
     * @param jsonObject Input JSON Object to convert to XML (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call convertDataJsonToXmlCall(Object jsonObject, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = jsonObject;

        // create path and map variables
        String localVarPath = "/convert/json/to/xml";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Apikey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call convertDataJsonToXmlValidateBeforeCall(Object jsonObject, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'jsonObject' is set
        if (jsonObject == null) {
            throw new ApiException("Missing the required parameter 'jsonObject' when calling convertDataJsonToXml(Async)");
        }
        

        com.squareup.okhttp.Call call = convertDataJsonToXmlCall(jsonObject, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Convert JSON Object to XML conversion
     * Convert a JSON object into XML
     * @param jsonObject Input JSON Object to convert to XML (required)
     * @return byte[]
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public byte[] convertDataJsonToXml(Object jsonObject) throws ApiException {
        ApiResponse<byte[]> resp = convertDataJsonToXmlWithHttpInfo(jsonObject);
        return resp.getData();
    }

    /**
     * Convert JSON Object to XML conversion
     * Convert a JSON object into XML
     * @param jsonObject Input JSON Object to convert to XML (required)
     * @return ApiResponse&lt;byte[]&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<byte[]> convertDataJsonToXmlWithHttpInfo(Object jsonObject) throws ApiException {
        com.squareup.okhttp.Call call = convertDataJsonToXmlValidateBeforeCall(jsonObject, null, null);
        Type localVarReturnType = new TypeToken<byte[]>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Convert JSON Object to XML conversion (asynchronously)
     * Convert a JSON object into XML
     * @param jsonObject Input JSON Object to convert to XML (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call convertDataJsonToXmlAsync(Object jsonObject, final ApiCallback<byte[]> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = convertDataJsonToXmlValidateBeforeCall(jsonObject, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<byte[]>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for convertDataXlsToJson
     * @param inputFile Input file to perform the operation on. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call convertDataXlsToJsonCall(File inputFile, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/convert/xls/to/json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (inputFile != null)
        localVarFormParams.put("inputFile", inputFile);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Apikey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call convertDataXlsToJsonValidateBeforeCall(File inputFile, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'inputFile' is set
        if (inputFile == null) {
            throw new ApiException("Missing the required parameter 'inputFile' when calling convertDataXlsToJson(Async)");
        }
        

        com.squareup.okhttp.Call call = convertDataXlsToJsonCall(inputFile, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Convert Excel (97-2003) XLS to JSON conversion
     * Convert an Excel (97-2003) XLS file to a JSON object array
     * @param inputFile Input file to perform the operation on. (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object convertDataXlsToJson(File inputFile) throws ApiException {
        ApiResponse<Object> resp = convertDataXlsToJsonWithHttpInfo(inputFile);
        return resp.getData();
    }

    /**
     * Convert Excel (97-2003) XLS to JSON conversion
     * Convert an Excel (97-2003) XLS file to a JSON object array
     * @param inputFile Input file to perform the operation on. (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> convertDataXlsToJsonWithHttpInfo(File inputFile) throws ApiException {
        com.squareup.okhttp.Call call = convertDataXlsToJsonValidateBeforeCall(inputFile, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Convert Excel (97-2003) XLS to JSON conversion (asynchronously)
     * Convert an Excel (97-2003) XLS file to a JSON object array
     * @param inputFile Input file to perform the operation on. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call convertDataXlsToJsonAsync(File inputFile, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = convertDataXlsToJsonValidateBeforeCall(inputFile, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for convertDataXlsxToJson
     * @param inputFile Input file to perform the operation on. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call convertDataXlsxToJsonCall(File inputFile, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/convert/xlsx/to/json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (inputFile != null)
        localVarFormParams.put("inputFile", inputFile);

        final String[] localVarAccepts = {
            "application/octet-stream"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Apikey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call convertDataXlsxToJsonValidateBeforeCall(File inputFile, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'inputFile' is set
        if (inputFile == null) {
            throw new ApiException("Missing the required parameter 'inputFile' when calling convertDataXlsxToJson(Async)");
        }
        

        com.squareup.okhttp.Call call = convertDataXlsxToJsonCall(inputFile, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Convert Excel XLSX to JSON conversion
     * Convert an Excel XLSX file to a JSON object array
     * @param inputFile Input file to perform the operation on. (required)
     * @return byte[]
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public byte[] convertDataXlsxToJson(File inputFile) throws ApiException {
        ApiResponse<byte[]> resp = convertDataXlsxToJsonWithHttpInfo(inputFile);
        return resp.getData();
    }

    /**
     * Convert Excel XLSX to JSON conversion
     * Convert an Excel XLSX file to a JSON object array
     * @param inputFile Input file to perform the operation on. (required)
     * @return ApiResponse&lt;byte[]&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<byte[]> convertDataXlsxToJsonWithHttpInfo(File inputFile) throws ApiException {
        com.squareup.okhttp.Call call = convertDataXlsxToJsonValidateBeforeCall(inputFile, null, null);
        Type localVarReturnType = new TypeToken<byte[]>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Convert Excel XLSX to JSON conversion (asynchronously)
     * Convert an Excel XLSX file to a JSON object array
     * @param inputFile Input file to perform the operation on. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call convertDataXlsxToJsonAsync(File inputFile, final ApiCallback<byte[]> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = convertDataXlsxToJsonValidateBeforeCall(inputFile, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<byte[]>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for convertDataXlsxToXml
     * @param inputFile Input file to perform the operation on. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call convertDataXlsxToXmlCall(File inputFile, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/convert/xlsx/to/xml";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (inputFile != null)
        localVarFormParams.put("inputFile", inputFile);

        final String[] localVarAccepts = {
            "application/octet-stream"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Apikey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call convertDataXlsxToXmlValidateBeforeCall(File inputFile, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'inputFile' is set
        if (inputFile == null) {
            throw new ApiException("Missing the required parameter 'inputFile' when calling convertDataXlsxToXml(Async)");
        }
        

        com.squareup.okhttp.Call call = convertDataXlsxToXmlCall(inputFile, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Convert Excel XLSX to XML conversion
     * Convert an Excel XLSX file to a XML file
     * @param inputFile Input file to perform the operation on. (required)
     * @return byte[]
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public byte[] convertDataXlsxToXml(File inputFile) throws ApiException {
        ApiResponse<byte[]> resp = convertDataXlsxToXmlWithHttpInfo(inputFile);
        return resp.getData();
    }

    /**
     * Convert Excel XLSX to XML conversion
     * Convert an Excel XLSX file to a XML file
     * @param inputFile Input file to perform the operation on. (required)
     * @return ApiResponse&lt;byte[]&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<byte[]> convertDataXlsxToXmlWithHttpInfo(File inputFile) throws ApiException {
        com.squareup.okhttp.Call call = convertDataXlsxToXmlValidateBeforeCall(inputFile, null, null);
        Type localVarReturnType = new TypeToken<byte[]>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Convert Excel XLSX to XML conversion (asynchronously)
     * Convert an Excel XLSX file to a XML file
     * @param inputFile Input file to perform the operation on. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call convertDataXlsxToXmlAsync(File inputFile, final ApiCallback<byte[]> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = convertDataXlsxToXmlValidateBeforeCall(inputFile, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<byte[]>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for convertDataXmlEditAddAttributeWithXPath
     * @param inputFile Input XML file to perform the operation on. (required)
     * @param xpathExpression Valid XML XPath query expression (required)
     * @param xmlAttributeName Name of the XML attribute to add (required)
     * @param xmlAttributeValue Value of the XML attribute to add (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call convertDataXmlEditAddAttributeWithXPathCall(File inputFile, String xpathExpression, String xmlAttributeName, String xmlAttributeValue, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/convert/xml/edit/xpath/add-attribute";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xpathExpression != null)
        localVarHeaderParams.put("XPathExpression", apiClient.parameterToString(xpathExpression));
        if (xmlAttributeName != null)
        localVarHeaderParams.put("XmlAttributeName", apiClient.parameterToString(xmlAttributeName));
        if (xmlAttributeValue != null)
        localVarHeaderParams.put("XmlAttributeValue", apiClient.parameterToString(xmlAttributeValue));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (inputFile != null)
        localVarFormParams.put("inputFile", inputFile);

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Apikey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call convertDataXmlEditAddAttributeWithXPathValidateBeforeCall(File inputFile, String xpathExpression, String xmlAttributeName, String xmlAttributeValue, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'inputFile' is set
        if (inputFile == null) {
            throw new ApiException("Missing the required parameter 'inputFile' when calling convertDataXmlEditAddAttributeWithXPath(Async)");
        }
        
        // verify the required parameter 'xpathExpression' is set
        if (xpathExpression == null) {
            throw new ApiException("Missing the required parameter 'xpathExpression' when calling convertDataXmlEditAddAttributeWithXPath(Async)");
        }
        
        // verify the required parameter 'xmlAttributeName' is set
        if (xmlAttributeName == null) {
            throw new ApiException("Missing the required parameter 'xmlAttributeName' when calling convertDataXmlEditAddAttributeWithXPath(Async)");
        }
        
        // verify the required parameter 'xmlAttributeValue' is set
        if (xmlAttributeValue == null) {
            throw new ApiException("Missing the required parameter 'xmlAttributeValue' when calling convertDataXmlEditAddAttributeWithXPath(Async)");
        }
        

        com.squareup.okhttp.Call call = convertDataXmlEditAddAttributeWithXPathCall(inputFile, xpathExpression, xmlAttributeName, xmlAttributeValue, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Adds an attribute to all XML nodes matching XPath expression
     * Return the reuslts of editing an XML document by adding an attribute to all of the nodes that match an input XPath expression.
     * @param inputFile Input XML file to perform the operation on. (required)
     * @param xpathExpression Valid XML XPath query expression (required)
     * @param xmlAttributeName Name of the XML attribute to add (required)
     * @param xmlAttributeValue Value of the XML attribute to add (required)
     * @return XmlAddAttributeWithXPathResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public XmlAddAttributeWithXPathResult convertDataXmlEditAddAttributeWithXPath(File inputFile, String xpathExpression, String xmlAttributeName, String xmlAttributeValue) throws ApiException {
        ApiResponse<XmlAddAttributeWithXPathResult> resp = convertDataXmlEditAddAttributeWithXPathWithHttpInfo(inputFile, xpathExpression, xmlAttributeName, xmlAttributeValue);
        return resp.getData();
    }

    /**
     * Adds an attribute to all XML nodes matching XPath expression
     * Return the reuslts of editing an XML document by adding an attribute to all of the nodes that match an input XPath expression.
     * @param inputFile Input XML file to perform the operation on. (required)
     * @param xpathExpression Valid XML XPath query expression (required)
     * @param xmlAttributeName Name of the XML attribute to add (required)
     * @param xmlAttributeValue Value of the XML attribute to add (required)
     * @return ApiResponse&lt;XmlAddAttributeWithXPathResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<XmlAddAttributeWithXPathResult> convertDataXmlEditAddAttributeWithXPathWithHttpInfo(File inputFile, String xpathExpression, String xmlAttributeName, String xmlAttributeValue) throws ApiException {
        com.squareup.okhttp.Call call = convertDataXmlEditAddAttributeWithXPathValidateBeforeCall(inputFile, xpathExpression, xmlAttributeName, xmlAttributeValue, null, null);
        Type localVarReturnType = new TypeToken<XmlAddAttributeWithXPathResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Adds an attribute to all XML nodes matching XPath expression (asynchronously)
     * Return the reuslts of editing an XML document by adding an attribute to all of the nodes that match an input XPath expression.
     * @param inputFile Input XML file to perform the operation on. (required)
     * @param xpathExpression Valid XML XPath query expression (required)
     * @param xmlAttributeName Name of the XML attribute to add (required)
     * @param xmlAttributeValue Value of the XML attribute to add (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call convertDataXmlEditAddAttributeWithXPathAsync(File inputFile, String xpathExpression, String xmlAttributeName, String xmlAttributeValue, final ApiCallback<XmlAddAttributeWithXPathResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = convertDataXmlEditAddAttributeWithXPathValidateBeforeCall(inputFile, xpathExpression, xmlAttributeName, xmlAttributeValue, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<XmlAddAttributeWithXPathResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for convertDataXmlEditAddChildWithXPath
     * @param inputFile Input XML file to perform the operation on. (required)
     * @param xpathExpression Valid XML XPath query expression (required)
     * @param xmlNodeToAdd XML Node to add as a child (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call convertDataXmlEditAddChildWithXPathCall(File inputFile, String xpathExpression, String xmlNodeToAdd, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/convert/xml/edit/xpath/add-child";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xpathExpression != null)
        localVarHeaderParams.put("XPathExpression", apiClient.parameterToString(xpathExpression));
        if (xmlNodeToAdd != null)
        localVarHeaderParams.put("XmlNodeToAdd", apiClient.parameterToString(xmlNodeToAdd));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (inputFile != null)
        localVarFormParams.put("inputFile", inputFile);

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Apikey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call convertDataXmlEditAddChildWithXPathValidateBeforeCall(File inputFile, String xpathExpression, String xmlNodeToAdd, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'inputFile' is set
        if (inputFile == null) {
            throw new ApiException("Missing the required parameter 'inputFile' when calling convertDataXmlEditAddChildWithXPath(Async)");
        }
        
        // verify the required parameter 'xpathExpression' is set
        if (xpathExpression == null) {
            throw new ApiException("Missing the required parameter 'xpathExpression' when calling convertDataXmlEditAddChildWithXPath(Async)");
        }
        
        // verify the required parameter 'xmlNodeToAdd' is set
        if (xmlNodeToAdd == null) {
            throw new ApiException("Missing the required parameter 'xmlNodeToAdd' when calling convertDataXmlEditAddChildWithXPath(Async)");
        }
        

        com.squareup.okhttp.Call call = convertDataXmlEditAddChildWithXPathCall(inputFile, xpathExpression, xmlNodeToAdd, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Adds an XML node as a child to XML nodes matching XPath expression
     * Return the reuslts of editing an XML document by adding an XML node as a child to all of the nodes that match an input XPath expression.
     * @param inputFile Input XML file to perform the operation on. (required)
     * @param xpathExpression Valid XML XPath query expression (required)
     * @param xmlNodeToAdd XML Node to add as a child (required)
     * @return XmlAddChildWithXPathResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public XmlAddChildWithXPathResult convertDataXmlEditAddChildWithXPath(File inputFile, String xpathExpression, String xmlNodeToAdd) throws ApiException {
        ApiResponse<XmlAddChildWithXPathResult> resp = convertDataXmlEditAddChildWithXPathWithHttpInfo(inputFile, xpathExpression, xmlNodeToAdd);
        return resp.getData();
    }

    /**
     * Adds an XML node as a child to XML nodes matching XPath expression
     * Return the reuslts of editing an XML document by adding an XML node as a child to all of the nodes that match an input XPath expression.
     * @param inputFile Input XML file to perform the operation on. (required)
     * @param xpathExpression Valid XML XPath query expression (required)
     * @param xmlNodeToAdd XML Node to add as a child (required)
     * @return ApiResponse&lt;XmlAddChildWithXPathResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<XmlAddChildWithXPathResult> convertDataXmlEditAddChildWithXPathWithHttpInfo(File inputFile, String xpathExpression, String xmlNodeToAdd) throws ApiException {
        com.squareup.okhttp.Call call = convertDataXmlEditAddChildWithXPathValidateBeforeCall(inputFile, xpathExpression, xmlNodeToAdd, null, null);
        Type localVarReturnType = new TypeToken<XmlAddChildWithXPathResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Adds an XML node as a child to XML nodes matching XPath expression (asynchronously)
     * Return the reuslts of editing an XML document by adding an XML node as a child to all of the nodes that match an input XPath expression.
     * @param inputFile Input XML file to perform the operation on. (required)
     * @param xpathExpression Valid XML XPath query expression (required)
     * @param xmlNodeToAdd XML Node to add as a child (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call convertDataXmlEditAddChildWithXPathAsync(File inputFile, String xpathExpression, String xmlNodeToAdd, final ApiCallback<XmlAddChildWithXPathResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = convertDataXmlEditAddChildWithXPathValidateBeforeCall(inputFile, xpathExpression, xmlNodeToAdd, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<XmlAddChildWithXPathResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for convertDataXmlEditRemoveAllChildNodesWithXPath
     * @param inputFile Input XML file to perform the operation on. (required)
     * @param xpathExpression Valid XML XPath query expression (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call convertDataXmlEditRemoveAllChildNodesWithXPathCall(File inputFile, String xpathExpression, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/convert/xml/edit/xpath/remove-all-children";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xpathExpression != null)
        localVarHeaderParams.put("XPathExpression", apiClient.parameterToString(xpathExpression));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (inputFile != null)
        localVarFormParams.put("inputFile", inputFile);

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Apikey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call convertDataXmlEditRemoveAllChildNodesWithXPathValidateBeforeCall(File inputFile, String xpathExpression, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'inputFile' is set
        if (inputFile == null) {
            throw new ApiException("Missing the required parameter 'inputFile' when calling convertDataXmlEditRemoveAllChildNodesWithXPath(Async)");
        }
        
        // verify the required parameter 'xpathExpression' is set
        if (xpathExpression == null) {
            throw new ApiException("Missing the required parameter 'xpathExpression' when calling convertDataXmlEditRemoveAllChildNodesWithXPath(Async)");
        }
        

        com.squareup.okhttp.Call call = convertDataXmlEditRemoveAllChildNodesWithXPathCall(inputFile, xpathExpression, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Removes, deletes all children of nodes matching XPath expression, but does not remove the nodes
     * Return the reuslts of editing an XML document by removing all child nodes of the nodes that match an input XPath expression.
     * @param inputFile Input XML file to perform the operation on. (required)
     * @param xpathExpression Valid XML XPath query expression (required)
     * @return XmlRemoveAllChildrenWithXPathResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public XmlRemoveAllChildrenWithXPathResult convertDataXmlEditRemoveAllChildNodesWithXPath(File inputFile, String xpathExpression) throws ApiException {
        ApiResponse<XmlRemoveAllChildrenWithXPathResult> resp = convertDataXmlEditRemoveAllChildNodesWithXPathWithHttpInfo(inputFile, xpathExpression);
        return resp.getData();
    }

    /**
     * Removes, deletes all children of nodes matching XPath expression, but does not remove the nodes
     * Return the reuslts of editing an XML document by removing all child nodes of the nodes that match an input XPath expression.
     * @param inputFile Input XML file to perform the operation on. (required)
     * @param xpathExpression Valid XML XPath query expression (required)
     * @return ApiResponse&lt;XmlRemoveAllChildrenWithXPathResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<XmlRemoveAllChildrenWithXPathResult> convertDataXmlEditRemoveAllChildNodesWithXPathWithHttpInfo(File inputFile, String xpathExpression) throws ApiException {
        com.squareup.okhttp.Call call = convertDataXmlEditRemoveAllChildNodesWithXPathValidateBeforeCall(inputFile, xpathExpression, null, null);
        Type localVarReturnType = new TypeToken<XmlRemoveAllChildrenWithXPathResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Removes, deletes all children of nodes matching XPath expression, but does not remove the nodes (asynchronously)
     * Return the reuslts of editing an XML document by removing all child nodes of the nodes that match an input XPath expression.
     * @param inputFile Input XML file to perform the operation on. (required)
     * @param xpathExpression Valid XML XPath query expression (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call convertDataXmlEditRemoveAllChildNodesWithXPathAsync(File inputFile, String xpathExpression, final ApiCallback<XmlRemoveAllChildrenWithXPathResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = convertDataXmlEditRemoveAllChildNodesWithXPathValidateBeforeCall(inputFile, xpathExpression, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<XmlRemoveAllChildrenWithXPathResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for convertDataXmlEditReplaceWithXPath
     * @param inputFile Input XML file to perform the operation on. (required)
     * @param xpathExpression Valid XML XPath query expression (required)
     * @param xmlNodeReplacement XML Node replacement content (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call convertDataXmlEditReplaceWithXPathCall(File inputFile, String xpathExpression, String xmlNodeReplacement, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/convert/xml/edit/xpath/replace";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xpathExpression != null)
        localVarHeaderParams.put("XPathExpression", apiClient.parameterToString(xpathExpression));
        if (xmlNodeReplacement != null)
        localVarHeaderParams.put("XmlNodeReplacement", apiClient.parameterToString(xmlNodeReplacement));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (inputFile != null)
        localVarFormParams.put("inputFile", inputFile);

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Apikey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call convertDataXmlEditReplaceWithXPathValidateBeforeCall(File inputFile, String xpathExpression, String xmlNodeReplacement, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'inputFile' is set
        if (inputFile == null) {
            throw new ApiException("Missing the required parameter 'inputFile' when calling convertDataXmlEditReplaceWithXPath(Async)");
        }
        
        // verify the required parameter 'xpathExpression' is set
        if (xpathExpression == null) {
            throw new ApiException("Missing the required parameter 'xpathExpression' when calling convertDataXmlEditReplaceWithXPath(Async)");
        }
        
        // verify the required parameter 'xmlNodeReplacement' is set
        if (xmlNodeReplacement == null) {
            throw new ApiException("Missing the required parameter 'xmlNodeReplacement' when calling convertDataXmlEditReplaceWithXPath(Async)");
        }
        

        com.squareup.okhttp.Call call = convertDataXmlEditReplaceWithXPathCall(inputFile, xpathExpression, xmlNodeReplacement, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Replaces XML nodes matching XPath expression with new node
     * Return the reuslts of editing an XML document by replacing all of the nodes that match an input XPath expression with a new XML node expression.
     * @param inputFile Input XML file to perform the operation on. (required)
     * @param xpathExpression Valid XML XPath query expression (required)
     * @param xmlNodeReplacement XML Node replacement content (required)
     * @return XmlReplaceWithXPathResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public XmlReplaceWithXPathResult convertDataXmlEditReplaceWithXPath(File inputFile, String xpathExpression, String xmlNodeReplacement) throws ApiException {
        ApiResponse<XmlReplaceWithXPathResult> resp = convertDataXmlEditReplaceWithXPathWithHttpInfo(inputFile, xpathExpression, xmlNodeReplacement);
        return resp.getData();
    }

    /**
     * Replaces XML nodes matching XPath expression with new node
     * Return the reuslts of editing an XML document by replacing all of the nodes that match an input XPath expression with a new XML node expression.
     * @param inputFile Input XML file to perform the operation on. (required)
     * @param xpathExpression Valid XML XPath query expression (required)
     * @param xmlNodeReplacement XML Node replacement content (required)
     * @return ApiResponse&lt;XmlReplaceWithXPathResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<XmlReplaceWithXPathResult> convertDataXmlEditReplaceWithXPathWithHttpInfo(File inputFile, String xpathExpression, String xmlNodeReplacement) throws ApiException {
        com.squareup.okhttp.Call call = convertDataXmlEditReplaceWithXPathValidateBeforeCall(inputFile, xpathExpression, xmlNodeReplacement, null, null);
        Type localVarReturnType = new TypeToken<XmlReplaceWithXPathResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Replaces XML nodes matching XPath expression with new node (asynchronously)
     * Return the reuslts of editing an XML document by replacing all of the nodes that match an input XPath expression with a new XML node expression.
     * @param inputFile Input XML file to perform the operation on. (required)
     * @param xpathExpression Valid XML XPath query expression (required)
     * @param xmlNodeReplacement XML Node replacement content (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call convertDataXmlEditReplaceWithXPathAsync(File inputFile, String xpathExpression, String xmlNodeReplacement, final ApiCallback<XmlReplaceWithXPathResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = convertDataXmlEditReplaceWithXPathValidateBeforeCall(inputFile, xpathExpression, xmlNodeReplacement, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<XmlReplaceWithXPathResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for convertDataXmlEditSetValueWithXPath
     * @param inputFile Input XML file to perform the operation on. (required)
     * @param xpathExpression Valid XML XPath query expression (required)
     * @param xmlValue XML Value to set into the matching XML nodes (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call convertDataXmlEditSetValueWithXPathCall(File inputFile, String xpathExpression, String xmlValue, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/convert/xml/edit/xpath/set-value";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xpathExpression != null)
        localVarHeaderParams.put("XPathExpression", apiClient.parameterToString(xpathExpression));
        if (xmlValue != null)
        localVarHeaderParams.put("XmlValue", apiClient.parameterToString(xmlValue));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (inputFile != null)
        localVarFormParams.put("inputFile", inputFile);

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Apikey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call convertDataXmlEditSetValueWithXPathValidateBeforeCall(File inputFile, String xpathExpression, String xmlValue, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'inputFile' is set
        if (inputFile == null) {
            throw new ApiException("Missing the required parameter 'inputFile' when calling convertDataXmlEditSetValueWithXPath(Async)");
        }
        
        // verify the required parameter 'xpathExpression' is set
        if (xpathExpression == null) {
            throw new ApiException("Missing the required parameter 'xpathExpression' when calling convertDataXmlEditSetValueWithXPath(Async)");
        }
        
        // verify the required parameter 'xmlValue' is set
        if (xmlValue == null) {
            throw new ApiException("Missing the required parameter 'xmlValue' when calling convertDataXmlEditSetValueWithXPath(Async)");
        }
        

        com.squareup.okhttp.Call call = convertDataXmlEditSetValueWithXPathCall(inputFile, xpathExpression, xmlValue, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Sets the value contents of XML nodes matching XPath expression
     * Return the reuslts of editing an XML document by setting the contents of all of the nodes that match an input XPath expression.  Supports elements and attributes.
     * @param inputFile Input XML file to perform the operation on. (required)
     * @param xpathExpression Valid XML XPath query expression (required)
     * @param xmlValue XML Value to set into the matching XML nodes (required)
     * @return XmlSetValueWithXPathResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public XmlSetValueWithXPathResult convertDataXmlEditSetValueWithXPath(File inputFile, String xpathExpression, String xmlValue) throws ApiException {
        ApiResponse<XmlSetValueWithXPathResult> resp = convertDataXmlEditSetValueWithXPathWithHttpInfo(inputFile, xpathExpression, xmlValue);
        return resp.getData();
    }

    /**
     * Sets the value contents of XML nodes matching XPath expression
     * Return the reuslts of editing an XML document by setting the contents of all of the nodes that match an input XPath expression.  Supports elements and attributes.
     * @param inputFile Input XML file to perform the operation on. (required)
     * @param xpathExpression Valid XML XPath query expression (required)
     * @param xmlValue XML Value to set into the matching XML nodes (required)
     * @return ApiResponse&lt;XmlSetValueWithXPathResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<XmlSetValueWithXPathResult> convertDataXmlEditSetValueWithXPathWithHttpInfo(File inputFile, String xpathExpression, String xmlValue) throws ApiException {
        com.squareup.okhttp.Call call = convertDataXmlEditSetValueWithXPathValidateBeforeCall(inputFile, xpathExpression, xmlValue, null, null);
        Type localVarReturnType = new TypeToken<XmlSetValueWithXPathResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Sets the value contents of XML nodes matching XPath expression (asynchronously)
     * Return the reuslts of editing an XML document by setting the contents of all of the nodes that match an input XPath expression.  Supports elements and attributes.
     * @param inputFile Input XML file to perform the operation on. (required)
     * @param xpathExpression Valid XML XPath query expression (required)
     * @param xmlValue XML Value to set into the matching XML nodes (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call convertDataXmlEditSetValueWithXPathAsync(File inputFile, String xpathExpression, String xmlValue, final ApiCallback<XmlSetValueWithXPathResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = convertDataXmlEditSetValueWithXPathValidateBeforeCall(inputFile, xpathExpression, xmlValue, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<XmlSetValueWithXPathResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for convertDataXmlFilterWithXPath
     * @param xpathExpression Valid XML XPath query expression (required)
     * @param inputFile Input file to perform the operation on. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call convertDataXmlFilterWithXPathCall(String xpathExpression, File inputFile, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/convert/xml/select/xpath";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xpathExpression != null)
        localVarHeaderParams.put("XPathExpression", apiClient.parameterToString(xpathExpression));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (inputFile != null)
        localVarFormParams.put("inputFile", inputFile);

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Apikey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call convertDataXmlFilterWithXPathValidateBeforeCall(String xpathExpression, File inputFile, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'xpathExpression' is set
        if (xpathExpression == null) {
            throw new ApiException("Missing the required parameter 'xpathExpression' when calling convertDataXmlFilterWithXPath(Async)");
        }
        
        // verify the required parameter 'inputFile' is set
        if (inputFile == null) {
            throw new ApiException("Missing the required parameter 'inputFile' when calling convertDataXmlFilterWithXPath(Async)");
        }
        

        com.squareup.okhttp.Call call = convertDataXmlFilterWithXPathCall(xpathExpression, inputFile, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Filter, select XML nodes using XPath expression, get results
     * Return the reuslts of filtering, selecting an XML document with an XPath expression
     * @param xpathExpression Valid XML XPath query expression (required)
     * @param inputFile Input file to perform the operation on. (required)
     * @return XmlFilterWithXPathResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public XmlFilterWithXPathResult convertDataXmlFilterWithXPath(String xpathExpression, File inputFile) throws ApiException {
        ApiResponse<XmlFilterWithXPathResult> resp = convertDataXmlFilterWithXPathWithHttpInfo(xpathExpression, inputFile);
        return resp.getData();
    }

    /**
     * Filter, select XML nodes using XPath expression, get results
     * Return the reuslts of filtering, selecting an XML document with an XPath expression
     * @param xpathExpression Valid XML XPath query expression (required)
     * @param inputFile Input file to perform the operation on. (required)
     * @return ApiResponse&lt;XmlFilterWithXPathResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<XmlFilterWithXPathResult> convertDataXmlFilterWithXPathWithHttpInfo(String xpathExpression, File inputFile) throws ApiException {
        com.squareup.okhttp.Call call = convertDataXmlFilterWithXPathValidateBeforeCall(xpathExpression, inputFile, null, null);
        Type localVarReturnType = new TypeToken<XmlFilterWithXPathResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Filter, select XML nodes using XPath expression, get results (asynchronously)
     * Return the reuslts of filtering, selecting an XML document with an XPath expression
     * @param xpathExpression Valid XML XPath query expression (required)
     * @param inputFile Input file to perform the operation on. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call convertDataXmlFilterWithXPathAsync(String xpathExpression, File inputFile, final ApiCallback<XmlFilterWithXPathResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = convertDataXmlFilterWithXPathValidateBeforeCall(xpathExpression, inputFile, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<XmlFilterWithXPathResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for convertDataXmlQueryWithXQuery
     * @param inputFile Input XML file to perform the operation on. (required)
     * @param xquery Valid XML XQuery 3.1 or earlier query expression; multi-line expressions are supported (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call convertDataXmlQueryWithXQueryCall(File inputFile, String xquery, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/convert/xml/query/xquery";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xquery != null)
        localVarHeaderParams.put("XQuery", apiClient.parameterToString(xquery));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (inputFile != null)
        localVarFormParams.put("inputFile", inputFile);

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Apikey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call convertDataXmlQueryWithXQueryValidateBeforeCall(File inputFile, String xquery, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'inputFile' is set
        if (inputFile == null) {
            throw new ApiException("Missing the required parameter 'inputFile' when calling convertDataXmlQueryWithXQuery(Async)");
        }
        
        // verify the required parameter 'xquery' is set
        if (xquery == null) {
            throw new ApiException("Missing the required parameter 'xquery' when calling convertDataXmlQueryWithXQuery(Async)");
        }
        

        com.squareup.okhttp.Call call = convertDataXmlQueryWithXQueryCall(inputFile, xquery, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Query an XML file using XQuery query, get results
     * Return the reuslts of querying a single XML document with an XQuery expression.  Supports XQuery 3.1 and earlier.  This API is optimized for a single XML document as input.  Provided XML document is automatically loaded as the default context; to access elements in the document, simply refer to them without a document reference, such as bookstore/book
     * @param inputFile Input XML file to perform the operation on. (required)
     * @param xquery Valid XML XQuery 3.1 or earlier query expression; multi-line expressions are supported (required)
     * @return XmlQueryWithXQueryResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public XmlQueryWithXQueryResult convertDataXmlQueryWithXQuery(File inputFile, String xquery) throws ApiException {
        ApiResponse<XmlQueryWithXQueryResult> resp = convertDataXmlQueryWithXQueryWithHttpInfo(inputFile, xquery);
        return resp.getData();
    }

    /**
     * Query an XML file using XQuery query, get results
     * Return the reuslts of querying a single XML document with an XQuery expression.  Supports XQuery 3.1 and earlier.  This API is optimized for a single XML document as input.  Provided XML document is automatically loaded as the default context; to access elements in the document, simply refer to them without a document reference, such as bookstore/book
     * @param inputFile Input XML file to perform the operation on. (required)
     * @param xquery Valid XML XQuery 3.1 or earlier query expression; multi-line expressions are supported (required)
     * @return ApiResponse&lt;XmlQueryWithXQueryResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<XmlQueryWithXQueryResult> convertDataXmlQueryWithXQueryWithHttpInfo(File inputFile, String xquery) throws ApiException {
        com.squareup.okhttp.Call call = convertDataXmlQueryWithXQueryValidateBeforeCall(inputFile, xquery, null, null);
        Type localVarReturnType = new TypeToken<XmlQueryWithXQueryResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Query an XML file using XQuery query, get results (asynchronously)
     * Return the reuslts of querying a single XML document with an XQuery expression.  Supports XQuery 3.1 and earlier.  This API is optimized for a single XML document as input.  Provided XML document is automatically loaded as the default context; to access elements in the document, simply refer to them without a document reference, such as bookstore/book
     * @param inputFile Input XML file to perform the operation on. (required)
     * @param xquery Valid XML XQuery 3.1 or earlier query expression; multi-line expressions are supported (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call convertDataXmlQueryWithXQueryAsync(File inputFile, String xquery, final ApiCallback<XmlQueryWithXQueryResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = convertDataXmlQueryWithXQueryValidateBeforeCall(inputFile, xquery, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<XmlQueryWithXQueryResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for convertDataXmlQueryWithXQueryMulti
     * @param inputFile1 First input XML file to perform the operation on. (required)
     * @param xquery Valid XML XQuery 3.1 or earlier query expression; multi-line expressions are supported (required)
     * @param inputFile2 Second input XML file to perform the operation on. (optional)
     * @param inputFile3 Third input XML file to perform the operation on. (optional)
     * @param inputFile4 Fourth input XML file to perform the operation on. (optional)
     * @param inputFile5 Fifth input XML file to perform the operation on. (optional)
     * @param inputFile6 Sixth input XML file to perform the operation on. (optional)
     * @param inputFile7 Seventh input XML file to perform the operation on. (optional)
     * @param inputFile8 Eighth input XML file to perform the operation on. (optional)
     * @param inputFile9 Ninth input XML file to perform the operation on. (optional)
     * @param inputFile10 Tenth input XML file to perform the operation on. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call convertDataXmlQueryWithXQueryMultiCall(File inputFile1, String xquery, File inputFile2, File inputFile3, File inputFile4, File inputFile5, File inputFile6, File inputFile7, File inputFile8, File inputFile9, File inputFile10, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/convert/xml/query/xquery/multi";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xquery != null)
        localVarHeaderParams.put("XQuery", apiClient.parameterToString(xquery));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (inputFile1 != null)
        localVarFormParams.put("inputFile1", inputFile1);
        if (inputFile2 != null)
        localVarFormParams.put("inputFile2", inputFile2);
        if (inputFile3 != null)
        localVarFormParams.put("inputFile3", inputFile3);
        if (inputFile4 != null)
        localVarFormParams.put("inputFile4", inputFile4);
        if (inputFile5 != null)
        localVarFormParams.put("inputFile5", inputFile5);
        if (inputFile6 != null)
        localVarFormParams.put("inputFile6", inputFile6);
        if (inputFile7 != null)
        localVarFormParams.put("inputFile7", inputFile7);
        if (inputFile8 != null)
        localVarFormParams.put("inputFile8", inputFile8);
        if (inputFile9 != null)
        localVarFormParams.put("inputFile9", inputFile9);
        if (inputFile10 != null)
        localVarFormParams.put("inputFile10", inputFile10);

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Apikey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call convertDataXmlQueryWithXQueryMultiValidateBeforeCall(File inputFile1, String xquery, File inputFile2, File inputFile3, File inputFile4, File inputFile5, File inputFile6, File inputFile7, File inputFile8, File inputFile9, File inputFile10, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'inputFile1' is set
        if (inputFile1 == null) {
            throw new ApiException("Missing the required parameter 'inputFile1' when calling convertDataXmlQueryWithXQueryMulti(Async)");
        }
        
        // verify the required parameter 'xquery' is set
        if (xquery == null) {
            throw new ApiException("Missing the required parameter 'xquery' when calling convertDataXmlQueryWithXQueryMulti(Async)");
        }
        

        com.squareup.okhttp.Call call = convertDataXmlQueryWithXQueryMultiCall(inputFile1, xquery, inputFile2, inputFile3, inputFile4, inputFile5, inputFile6, inputFile7, inputFile8, inputFile9, inputFile10, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Query multiple XML files using XQuery query, get results
     * Return the reuslts of querying an XML document with an XQuery expression.  Supports XQuery 3.1 and earlier.  This API is optimized for multiple XML documents as input.  You can refer to the contents of a given document by name, for example doc(\&quot;books.xml\&quot;) or doc(\&quot;restaurants.xml\&quot;) if you included two input files named books.xml and restaurants.xml.  If input files contain no file name, they will default to file names input1.xml, input2.xml and so on.
     * @param inputFile1 First input XML file to perform the operation on. (required)
     * @param xquery Valid XML XQuery 3.1 or earlier query expression; multi-line expressions are supported (required)
     * @param inputFile2 Second input XML file to perform the operation on. (optional)
     * @param inputFile3 Third input XML file to perform the operation on. (optional)
     * @param inputFile4 Fourth input XML file to perform the operation on. (optional)
     * @param inputFile5 Fifth input XML file to perform the operation on. (optional)
     * @param inputFile6 Sixth input XML file to perform the operation on. (optional)
     * @param inputFile7 Seventh input XML file to perform the operation on. (optional)
     * @param inputFile8 Eighth input XML file to perform the operation on. (optional)
     * @param inputFile9 Ninth input XML file to perform the operation on. (optional)
     * @param inputFile10 Tenth input XML file to perform the operation on. (optional)
     * @return XmlQueryWithXQueryMultiResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public XmlQueryWithXQueryMultiResult convertDataXmlQueryWithXQueryMulti(File inputFile1, String xquery, File inputFile2, File inputFile3, File inputFile4, File inputFile5, File inputFile6, File inputFile7, File inputFile8, File inputFile9, File inputFile10) throws ApiException {
        ApiResponse<XmlQueryWithXQueryMultiResult> resp = convertDataXmlQueryWithXQueryMultiWithHttpInfo(inputFile1, xquery, inputFile2, inputFile3, inputFile4, inputFile5, inputFile6, inputFile7, inputFile8, inputFile9, inputFile10);
        return resp.getData();
    }

    /**
     * Query multiple XML files using XQuery query, get results
     * Return the reuslts of querying an XML document with an XQuery expression.  Supports XQuery 3.1 and earlier.  This API is optimized for multiple XML documents as input.  You can refer to the contents of a given document by name, for example doc(\&quot;books.xml\&quot;) or doc(\&quot;restaurants.xml\&quot;) if you included two input files named books.xml and restaurants.xml.  If input files contain no file name, they will default to file names input1.xml, input2.xml and so on.
     * @param inputFile1 First input XML file to perform the operation on. (required)
     * @param xquery Valid XML XQuery 3.1 or earlier query expression; multi-line expressions are supported (required)
     * @param inputFile2 Second input XML file to perform the operation on. (optional)
     * @param inputFile3 Third input XML file to perform the operation on. (optional)
     * @param inputFile4 Fourth input XML file to perform the operation on. (optional)
     * @param inputFile5 Fifth input XML file to perform the operation on. (optional)
     * @param inputFile6 Sixth input XML file to perform the operation on. (optional)
     * @param inputFile7 Seventh input XML file to perform the operation on. (optional)
     * @param inputFile8 Eighth input XML file to perform the operation on. (optional)
     * @param inputFile9 Ninth input XML file to perform the operation on. (optional)
     * @param inputFile10 Tenth input XML file to perform the operation on. (optional)
     * @return ApiResponse&lt;XmlQueryWithXQueryMultiResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<XmlQueryWithXQueryMultiResult> convertDataXmlQueryWithXQueryMultiWithHttpInfo(File inputFile1, String xquery, File inputFile2, File inputFile3, File inputFile4, File inputFile5, File inputFile6, File inputFile7, File inputFile8, File inputFile9, File inputFile10) throws ApiException {
        com.squareup.okhttp.Call call = convertDataXmlQueryWithXQueryMultiValidateBeforeCall(inputFile1, xquery, inputFile2, inputFile3, inputFile4, inputFile5, inputFile6, inputFile7, inputFile8, inputFile9, inputFile10, null, null);
        Type localVarReturnType = new TypeToken<XmlQueryWithXQueryMultiResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Query multiple XML files using XQuery query, get results (asynchronously)
     * Return the reuslts of querying an XML document with an XQuery expression.  Supports XQuery 3.1 and earlier.  This API is optimized for multiple XML documents as input.  You can refer to the contents of a given document by name, for example doc(\&quot;books.xml\&quot;) or doc(\&quot;restaurants.xml\&quot;) if you included two input files named books.xml and restaurants.xml.  If input files contain no file name, they will default to file names input1.xml, input2.xml and so on.
     * @param inputFile1 First input XML file to perform the operation on. (required)
     * @param xquery Valid XML XQuery 3.1 or earlier query expression; multi-line expressions are supported (required)
     * @param inputFile2 Second input XML file to perform the operation on. (optional)
     * @param inputFile3 Third input XML file to perform the operation on. (optional)
     * @param inputFile4 Fourth input XML file to perform the operation on. (optional)
     * @param inputFile5 Fifth input XML file to perform the operation on. (optional)
     * @param inputFile6 Sixth input XML file to perform the operation on. (optional)
     * @param inputFile7 Seventh input XML file to perform the operation on. (optional)
     * @param inputFile8 Eighth input XML file to perform the operation on. (optional)
     * @param inputFile9 Ninth input XML file to perform the operation on. (optional)
     * @param inputFile10 Tenth input XML file to perform the operation on. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call convertDataXmlQueryWithXQueryMultiAsync(File inputFile1, String xquery, File inputFile2, File inputFile3, File inputFile4, File inputFile5, File inputFile6, File inputFile7, File inputFile8, File inputFile9, File inputFile10, final ApiCallback<XmlQueryWithXQueryMultiResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = convertDataXmlQueryWithXQueryMultiValidateBeforeCall(inputFile1, xquery, inputFile2, inputFile3, inputFile4, inputFile5, inputFile6, inputFile7, inputFile8, inputFile9, inputFile10, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<XmlQueryWithXQueryMultiResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for convertDataXmlRemoveWithXPath
     * @param xpathExpression Valid XML XPath query expression (required)
     * @param inputFile Input file to perform the operation on. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call convertDataXmlRemoveWithXPathCall(String xpathExpression, File inputFile, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/convert/xml/edit/xpath/remove";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xpathExpression != null)
        localVarHeaderParams.put("XPathExpression", apiClient.parameterToString(xpathExpression));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (inputFile != null)
        localVarFormParams.put("inputFile", inputFile);

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Apikey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call convertDataXmlRemoveWithXPathValidateBeforeCall(String xpathExpression, File inputFile, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'xpathExpression' is set
        if (xpathExpression == null) {
            throw new ApiException("Missing the required parameter 'xpathExpression' when calling convertDataXmlRemoveWithXPath(Async)");
        }
        
        // verify the required parameter 'inputFile' is set
        if (inputFile == null) {
            throw new ApiException("Missing the required parameter 'inputFile' when calling convertDataXmlRemoveWithXPath(Async)");
        }
        

        com.squareup.okhttp.Call call = convertDataXmlRemoveWithXPathCall(xpathExpression, inputFile, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Remove, delete XML nodes and items matching XPath expression
     * Return the reuslts of editing an XML document by removing all of the nodes that match an input XPath expression
     * @param xpathExpression Valid XML XPath query expression (required)
     * @param inputFile Input file to perform the operation on. (required)
     * @return XmlRemoveWithXPathResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public XmlRemoveWithXPathResult convertDataXmlRemoveWithXPath(String xpathExpression, File inputFile) throws ApiException {
        ApiResponse<XmlRemoveWithXPathResult> resp = convertDataXmlRemoveWithXPathWithHttpInfo(xpathExpression, inputFile);
        return resp.getData();
    }

    /**
     * Remove, delete XML nodes and items matching XPath expression
     * Return the reuslts of editing an XML document by removing all of the nodes that match an input XPath expression
     * @param xpathExpression Valid XML XPath query expression (required)
     * @param inputFile Input file to perform the operation on. (required)
     * @return ApiResponse&lt;XmlRemoveWithXPathResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<XmlRemoveWithXPathResult> convertDataXmlRemoveWithXPathWithHttpInfo(String xpathExpression, File inputFile) throws ApiException {
        com.squareup.okhttp.Call call = convertDataXmlRemoveWithXPathValidateBeforeCall(xpathExpression, inputFile, null, null);
        Type localVarReturnType = new TypeToken<XmlRemoveWithXPathResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Remove, delete XML nodes and items matching XPath expression (asynchronously)
     * Return the reuslts of editing an XML document by removing all of the nodes that match an input XPath expression
     * @param xpathExpression Valid XML XPath query expression (required)
     * @param inputFile Input file to perform the operation on. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call convertDataXmlRemoveWithXPathAsync(String xpathExpression, File inputFile, final ApiCallback<XmlRemoveWithXPathResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = convertDataXmlRemoveWithXPathValidateBeforeCall(xpathExpression, inputFile, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<XmlRemoveWithXPathResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for convertDataXmlToJson
     * @param inputFile Input file to perform the operation on. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call convertDataXmlToJsonCall(File inputFile, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/convert/xml/to/json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (inputFile != null)
        localVarFormParams.put("inputFile", inputFile);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Apikey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call convertDataXmlToJsonValidateBeforeCall(File inputFile, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'inputFile' is set
        if (inputFile == null) {
            throw new ApiException("Missing the required parameter 'inputFile' when calling convertDataXmlToJson(Async)");
        }
        

        com.squareup.okhttp.Call call = convertDataXmlToJsonCall(inputFile, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Convert XML to JSON conversion
     * Convert an XML string or file into JSON
     * @param inputFile Input file to perform the operation on. (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object convertDataXmlToJson(File inputFile) throws ApiException {
        ApiResponse<Object> resp = convertDataXmlToJsonWithHttpInfo(inputFile);
        return resp.getData();
    }

    /**
     * Convert XML to JSON conversion
     * Convert an XML string or file into JSON
     * @param inputFile Input file to perform the operation on. (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> convertDataXmlToJsonWithHttpInfo(File inputFile) throws ApiException {
        com.squareup.okhttp.Call call = convertDataXmlToJsonValidateBeforeCall(inputFile, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Convert XML to JSON conversion (asynchronously)
     * Convert an XML string or file into JSON
     * @param inputFile Input file to perform the operation on. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call convertDataXmlToJsonAsync(File inputFile, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = convertDataXmlToJsonValidateBeforeCall(inputFile, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for convertDataXmlTransformWithXsltToXml
     * @param inputFile Input XML file to perform the operation on. (required)
     * @param transformFile Input XSLT file to use to transform the input XML file. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call convertDataXmlTransformWithXsltToXmlCall(File inputFile, File transformFile, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/convert/xml/transform/xslt/to/xml";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (inputFile != null)
        localVarFormParams.put("inputFile", inputFile);
        if (transformFile != null)
        localVarFormParams.put("transformFile", transformFile);

        final String[] localVarAccepts = {
            "application/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Apikey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call convertDataXmlTransformWithXsltToXmlValidateBeforeCall(File inputFile, File transformFile, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'inputFile' is set
        if (inputFile == null) {
            throw new ApiException("Missing the required parameter 'inputFile' when calling convertDataXmlTransformWithXsltToXml(Async)");
        }
        
        // verify the required parameter 'transformFile' is set
        if (transformFile == null) {
            throw new ApiException("Missing the required parameter 'transformFile' when calling convertDataXmlTransformWithXsltToXml(Async)");
        }
        

        com.squareup.okhttp.Call call = convertDataXmlTransformWithXsltToXmlCall(inputFile, transformFile, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Transform XML document file with XSLT into a new XML document
     * Convert an XML string or file into JSON
     * @param inputFile Input XML file to perform the operation on. (required)
     * @param transformFile Input XSLT file to use to transform the input XML file. (required)
     * @return byte[]
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public byte[] convertDataXmlTransformWithXsltToXml(File inputFile, File transformFile) throws ApiException {
        ApiResponse<byte[]> resp = convertDataXmlTransformWithXsltToXmlWithHttpInfo(inputFile, transformFile);
        return resp.getData();
    }

    /**
     * Transform XML document file with XSLT into a new XML document
     * Convert an XML string or file into JSON
     * @param inputFile Input XML file to perform the operation on. (required)
     * @param transformFile Input XSLT file to use to transform the input XML file. (required)
     * @return ApiResponse&lt;byte[]&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<byte[]> convertDataXmlTransformWithXsltToXmlWithHttpInfo(File inputFile, File transformFile) throws ApiException {
        com.squareup.okhttp.Call call = convertDataXmlTransformWithXsltToXmlValidateBeforeCall(inputFile, transformFile, null, null);
        Type localVarReturnType = new TypeToken<byte[]>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Transform XML document file with XSLT into a new XML document (asynchronously)
     * Convert an XML string or file into JSON
     * @param inputFile Input XML file to perform the operation on. (required)
     * @param transformFile Input XSLT file to use to transform the input XML file. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call convertDataXmlTransformWithXsltToXmlAsync(File inputFile, File transformFile, final ApiCallback<byte[]> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = convertDataXmlTransformWithXsltToXmlValidateBeforeCall(inputFile, transformFile, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<byte[]>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
