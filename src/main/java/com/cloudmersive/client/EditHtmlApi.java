/*
 * convertapi
 * Convert API lets you effortlessly convert file formats and types.
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.cloudmersive.client;

import com.cloudmersive.client.invoker.ApiCallback;
import com.cloudmersive.client.invoker.ApiClient;
import com.cloudmersive.client.invoker.ApiException;
import com.cloudmersive.client.invoker.ApiResponse;
import com.cloudmersive.client.invoker.Configuration;
import com.cloudmersive.client.invoker.Pair;
import com.cloudmersive.client.invoker.ProgressRequestBody;
import com.cloudmersive.client.invoker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.io.File;
import com.cloudmersive.client.model.HtmlGetLanguageResult;
import com.cloudmersive.client.model.HtmlGetLinksResponse;
import com.cloudmersive.client.model.HtmlGetRelCanonicalUrlResult;
import com.cloudmersive.client.model.HtmlGetSitemapUrlResult;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class EditHtmlApi {
    private ApiClient apiClient;

    public EditHtmlApi() {
        this(Configuration.getDefaultApiClient());
    }

    public EditHtmlApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for editHtmlHtmlAppendHeaderTag
     * @param htmlTag The HTML tag to append. (required)
     * @param inputFile Optional: Input file to perform the operation on. (optional)
     * @param inputFileUrl Optional: URL of a file to operate on as input. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call editHtmlHtmlAppendHeaderTagCall(String htmlTag, File inputFile, String inputFileUrl, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/convert/edit/html/head/append/tag";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (inputFileUrl != null)
        localVarHeaderParams.put("inputFileUrl", apiClient.parameterToString(inputFileUrl));
        if (htmlTag != null)
        localVarHeaderParams.put("htmlTag", apiClient.parameterToString(htmlTag));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (inputFile != null)
        localVarFormParams.put("inputFile", inputFile);

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Apikey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call editHtmlHtmlAppendHeaderTagValidateBeforeCall(String htmlTag, File inputFile, String inputFileUrl, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'htmlTag' is set
        if (htmlTag == null) {
            throw new ApiException("Missing the required parameter 'htmlTag' when calling editHtmlHtmlAppendHeaderTag(Async)");
        }
        

        com.squareup.okhttp.Call call = editHtmlHtmlAppendHeaderTagCall(htmlTag, inputFile, inputFileUrl, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Append an HTML tag to the HEAD section of an HTML Document
     * Appends an HTML tag to the HEAD section of an HTML document.
     * @param htmlTag The HTML tag to append. (required)
     * @param inputFile Optional: Input file to perform the operation on. (optional)
     * @param inputFileUrl Optional: URL of a file to operate on as input. (optional)
     * @return byte[]
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public byte[] editHtmlHtmlAppendHeaderTag(String htmlTag, File inputFile, String inputFileUrl) throws ApiException {
        ApiResponse<byte[]> resp = editHtmlHtmlAppendHeaderTagWithHttpInfo(htmlTag, inputFile, inputFileUrl);
        return resp.getData();
    }

    /**
     * Append an HTML tag to the HEAD section of an HTML Document
     * Appends an HTML tag to the HEAD section of an HTML document.
     * @param htmlTag The HTML tag to append. (required)
     * @param inputFile Optional: Input file to perform the operation on. (optional)
     * @param inputFileUrl Optional: URL of a file to operate on as input. (optional)
     * @return ApiResponse&lt;byte[]&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<byte[]> editHtmlHtmlAppendHeaderTagWithHttpInfo(String htmlTag, File inputFile, String inputFileUrl) throws ApiException {
        com.squareup.okhttp.Call call = editHtmlHtmlAppendHeaderTagValidateBeforeCall(htmlTag, inputFile, inputFileUrl, null, null);
        Type localVarReturnType = new TypeToken<byte[]>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Append an HTML tag to the HEAD section of an HTML Document (asynchronously)
     * Appends an HTML tag to the HEAD section of an HTML document.
     * @param htmlTag The HTML tag to append. (required)
     * @param inputFile Optional: Input file to perform the operation on. (optional)
     * @param inputFileUrl Optional: URL of a file to operate on as input. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call editHtmlHtmlAppendHeaderTagAsync(String htmlTag, File inputFile, String inputFileUrl, final ApiCallback<byte[]> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = editHtmlHtmlAppendHeaderTagValidateBeforeCall(htmlTag, inputFile, inputFileUrl, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<byte[]>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for editHtmlHtmlAppendHeading
     * @param headingText The text content to be used in the header. (required)
     * @param inputFile Optional: Input file to perform the operation on. (optional)
     * @param inputFileUrl Optional: URL of a file to operate on as input. (optional)
     * @param headingSize Optional: The heading size number. Default is 1. Accepts values between 1 and 6. (optional)
     * @param cssStyle Optional: The CSS style for the heading. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call editHtmlHtmlAppendHeadingCall(String headingText, File inputFile, String inputFileUrl, Integer headingSize, String cssStyle, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/convert/edit/html/append/heading";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (inputFileUrl != null)
        localVarHeaderParams.put("inputFileUrl", apiClient.parameterToString(inputFileUrl));
        if (headingText != null)
        localVarHeaderParams.put("headingText", apiClient.parameterToString(headingText));
        if (headingSize != null)
        localVarHeaderParams.put("headingSize", apiClient.parameterToString(headingSize));
        if (cssStyle != null)
        localVarHeaderParams.put("cssStyle", apiClient.parameterToString(cssStyle));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (inputFile != null)
        localVarFormParams.put("inputFile", inputFile);

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Apikey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call editHtmlHtmlAppendHeadingValidateBeforeCall(String headingText, File inputFile, String inputFileUrl, Integer headingSize, String cssStyle, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'headingText' is set
        if (headingText == null) {
            throw new ApiException("Missing the required parameter 'headingText' when calling editHtmlHtmlAppendHeading(Async)");
        }
        

        com.squareup.okhttp.Call call = editHtmlHtmlAppendHeadingCall(headingText, inputFile, inputFileUrl, headingSize, cssStyle, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Append a Heading to an HTML Document
     * Appends a heading to the end of an HTML document.
     * @param headingText The text content to be used in the header. (required)
     * @param inputFile Optional: Input file to perform the operation on. (optional)
     * @param inputFileUrl Optional: URL of a file to operate on as input. (optional)
     * @param headingSize Optional: The heading size number. Default is 1. Accepts values between 1 and 6. (optional)
     * @param cssStyle Optional: The CSS style for the heading. (optional)
     * @return byte[]
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public byte[] editHtmlHtmlAppendHeading(String headingText, File inputFile, String inputFileUrl, Integer headingSize, String cssStyle) throws ApiException {
        ApiResponse<byte[]> resp = editHtmlHtmlAppendHeadingWithHttpInfo(headingText, inputFile, inputFileUrl, headingSize, cssStyle);
        return resp.getData();
    }

    /**
     * Append a Heading to an HTML Document
     * Appends a heading to the end of an HTML document.
     * @param headingText The text content to be used in the header. (required)
     * @param inputFile Optional: Input file to perform the operation on. (optional)
     * @param inputFileUrl Optional: URL of a file to operate on as input. (optional)
     * @param headingSize Optional: The heading size number. Default is 1. Accepts values between 1 and 6. (optional)
     * @param cssStyle Optional: The CSS style for the heading. (optional)
     * @return ApiResponse&lt;byte[]&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<byte[]> editHtmlHtmlAppendHeadingWithHttpInfo(String headingText, File inputFile, String inputFileUrl, Integer headingSize, String cssStyle) throws ApiException {
        com.squareup.okhttp.Call call = editHtmlHtmlAppendHeadingValidateBeforeCall(headingText, inputFile, inputFileUrl, headingSize, cssStyle, null, null);
        Type localVarReturnType = new TypeToken<byte[]>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Append a Heading to an HTML Document (asynchronously)
     * Appends a heading to the end of an HTML document.
     * @param headingText The text content to be used in the header. (required)
     * @param inputFile Optional: Input file to perform the operation on. (optional)
     * @param inputFileUrl Optional: URL of a file to operate on as input. (optional)
     * @param headingSize Optional: The heading size number. Default is 1. Accepts values between 1 and 6. (optional)
     * @param cssStyle Optional: The CSS style for the heading. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call editHtmlHtmlAppendHeadingAsync(String headingText, File inputFile, String inputFileUrl, Integer headingSize, String cssStyle, final ApiCallback<byte[]> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = editHtmlHtmlAppendHeadingValidateBeforeCall(headingText, inputFile, inputFileUrl, headingSize, cssStyle, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<byte[]>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for editHtmlHtmlAppendImageFromUrl
     * @param imageUrl The URL for the image. (required)
     * @param inputFile Optional: Input file to perform the operation on. (optional)
     * @param inputFileUrl Optional: URL of a file to operate on as input. (optional)
     * @param cssStyle Optional: CSS style for the image. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call editHtmlHtmlAppendImageFromUrlCall(String imageUrl, File inputFile, String inputFileUrl, String cssStyle, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/convert/edit/html/append/image/from-url";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (inputFileUrl != null)
        localVarHeaderParams.put("inputFileUrl", apiClient.parameterToString(inputFileUrl));
        if (imageUrl != null)
        localVarHeaderParams.put("imageUrl", apiClient.parameterToString(imageUrl));
        if (cssStyle != null)
        localVarHeaderParams.put("cssStyle", apiClient.parameterToString(cssStyle));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (inputFile != null)
        localVarFormParams.put("inputFile", inputFile);

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Apikey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call editHtmlHtmlAppendImageFromUrlValidateBeforeCall(String imageUrl, File inputFile, String inputFileUrl, String cssStyle, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'imageUrl' is set
        if (imageUrl == null) {
            throw new ApiException("Missing the required parameter 'imageUrl' when calling editHtmlHtmlAppendImageFromUrl(Async)");
        }
        

        com.squareup.okhttp.Call call = editHtmlHtmlAppendImageFromUrlCall(imageUrl, inputFile, inputFileUrl, cssStyle, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Append an Image to an HTML Document from a URL
     * Appends an image to the end of an HTML document using a URL.
     * @param imageUrl The URL for the image. (required)
     * @param inputFile Optional: Input file to perform the operation on. (optional)
     * @param inputFileUrl Optional: URL of a file to operate on as input. (optional)
     * @param cssStyle Optional: CSS style for the image. (optional)
     * @return byte[]
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public byte[] editHtmlHtmlAppendImageFromUrl(String imageUrl, File inputFile, String inputFileUrl, String cssStyle) throws ApiException {
        ApiResponse<byte[]> resp = editHtmlHtmlAppendImageFromUrlWithHttpInfo(imageUrl, inputFile, inputFileUrl, cssStyle);
        return resp.getData();
    }

    /**
     * Append an Image to an HTML Document from a URL
     * Appends an image to the end of an HTML document using a URL.
     * @param imageUrl The URL for the image. (required)
     * @param inputFile Optional: Input file to perform the operation on. (optional)
     * @param inputFileUrl Optional: URL of a file to operate on as input. (optional)
     * @param cssStyle Optional: CSS style for the image. (optional)
     * @return ApiResponse&lt;byte[]&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<byte[]> editHtmlHtmlAppendImageFromUrlWithHttpInfo(String imageUrl, File inputFile, String inputFileUrl, String cssStyle) throws ApiException {
        com.squareup.okhttp.Call call = editHtmlHtmlAppendImageFromUrlValidateBeforeCall(imageUrl, inputFile, inputFileUrl, cssStyle, null, null);
        Type localVarReturnType = new TypeToken<byte[]>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Append an Image to an HTML Document from a URL (asynchronously)
     * Appends an image to the end of an HTML document using a URL.
     * @param imageUrl The URL for the image. (required)
     * @param inputFile Optional: Input file to perform the operation on. (optional)
     * @param inputFileUrl Optional: URL of a file to operate on as input. (optional)
     * @param cssStyle Optional: CSS style for the image. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call editHtmlHtmlAppendImageFromUrlAsync(String imageUrl, File inputFile, String inputFileUrl, String cssStyle, final ApiCallback<byte[]> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = editHtmlHtmlAppendImageFromUrlValidateBeforeCall(imageUrl, inputFile, inputFileUrl, cssStyle, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<byte[]>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for editHtmlHtmlAppendImageInline
     * @param inputFile Optional: Input file to perform the operation on. (optional)
     * @param inputFileUrl Optional: URL of a file to operate on as input. (optional)
     * @param imageFile Optional: Image file to be appended as base64 inline image. (optional)
     * @param imageUrl Optional: Image URL to be appended as base64 inline image. (optional)
     * @param cssStyle Optional: CSS style for the image. (optional)
     * @param imageExtension Optional: The extension (JPG, PNG, GIF, etc.) of the image file. Recommended if uploading an imageFile directly, instead of using imageUrl. If no extension can be determined, will default to JPG. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call editHtmlHtmlAppendImageInlineCall(File inputFile, String inputFileUrl, File imageFile, String imageUrl, String cssStyle, String imageExtension, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/convert/edit/html/append/image/inline";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (inputFileUrl != null)
        localVarHeaderParams.put("inputFileUrl", apiClient.parameterToString(inputFileUrl));
        if (imageUrl != null)
        localVarHeaderParams.put("imageUrl", apiClient.parameterToString(imageUrl));
        if (cssStyle != null)
        localVarHeaderParams.put("cssStyle", apiClient.parameterToString(cssStyle));
        if (imageExtension != null)
        localVarHeaderParams.put("imageExtension", apiClient.parameterToString(imageExtension));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (inputFile != null)
        localVarFormParams.put("inputFile", inputFile);
        if (imageFile != null)
        localVarFormParams.put("imageFile", imageFile);

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Apikey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call editHtmlHtmlAppendImageInlineValidateBeforeCall(File inputFile, String inputFileUrl, File imageFile, String imageUrl, String cssStyle, String imageExtension, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = editHtmlHtmlAppendImageInlineCall(inputFile, inputFileUrl, imageFile, imageUrl, cssStyle, imageExtension, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Append a Base64 Inline Image to an HTML Document
     * Appends a base64 inline image to the end of an HTML document from an input file or URL.
     * @param inputFile Optional: Input file to perform the operation on. (optional)
     * @param inputFileUrl Optional: URL of a file to operate on as input. (optional)
     * @param imageFile Optional: Image file to be appended as base64 inline image. (optional)
     * @param imageUrl Optional: Image URL to be appended as base64 inline image. (optional)
     * @param cssStyle Optional: CSS style for the image. (optional)
     * @param imageExtension Optional: The extension (JPG, PNG, GIF, etc.) of the image file. Recommended if uploading an imageFile directly, instead of using imageUrl. If no extension can be determined, will default to JPG. (optional)
     * @return byte[]
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public byte[] editHtmlHtmlAppendImageInline(File inputFile, String inputFileUrl, File imageFile, String imageUrl, String cssStyle, String imageExtension) throws ApiException {
        ApiResponse<byte[]> resp = editHtmlHtmlAppendImageInlineWithHttpInfo(inputFile, inputFileUrl, imageFile, imageUrl, cssStyle, imageExtension);
        return resp.getData();
    }

    /**
     * Append a Base64 Inline Image to an HTML Document
     * Appends a base64 inline image to the end of an HTML document from an input file or URL.
     * @param inputFile Optional: Input file to perform the operation on. (optional)
     * @param inputFileUrl Optional: URL of a file to operate on as input. (optional)
     * @param imageFile Optional: Image file to be appended as base64 inline image. (optional)
     * @param imageUrl Optional: Image URL to be appended as base64 inline image. (optional)
     * @param cssStyle Optional: CSS style for the image. (optional)
     * @param imageExtension Optional: The extension (JPG, PNG, GIF, etc.) of the image file. Recommended if uploading an imageFile directly, instead of using imageUrl. If no extension can be determined, will default to JPG. (optional)
     * @return ApiResponse&lt;byte[]&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<byte[]> editHtmlHtmlAppendImageInlineWithHttpInfo(File inputFile, String inputFileUrl, File imageFile, String imageUrl, String cssStyle, String imageExtension) throws ApiException {
        com.squareup.okhttp.Call call = editHtmlHtmlAppendImageInlineValidateBeforeCall(inputFile, inputFileUrl, imageFile, imageUrl, cssStyle, imageExtension, null, null);
        Type localVarReturnType = new TypeToken<byte[]>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Append a Base64 Inline Image to an HTML Document (asynchronously)
     * Appends a base64 inline image to the end of an HTML document from an input file or URL.
     * @param inputFile Optional: Input file to perform the operation on. (optional)
     * @param inputFileUrl Optional: URL of a file to operate on as input. (optional)
     * @param imageFile Optional: Image file to be appended as base64 inline image. (optional)
     * @param imageUrl Optional: Image URL to be appended as base64 inline image. (optional)
     * @param cssStyle Optional: CSS style for the image. (optional)
     * @param imageExtension Optional: The extension (JPG, PNG, GIF, etc.) of the image file. Recommended if uploading an imageFile directly, instead of using imageUrl. If no extension can be determined, will default to JPG. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call editHtmlHtmlAppendImageInlineAsync(File inputFile, String inputFileUrl, File imageFile, String imageUrl, String cssStyle, String imageExtension, final ApiCallback<byte[]> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = editHtmlHtmlAppendImageInlineValidateBeforeCall(inputFile, inputFileUrl, imageFile, imageUrl, cssStyle, imageExtension, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<byte[]>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for editHtmlHtmlAppendParagraph
     * @param paragraphText The text content to be used in the paragraph. (required)
     * @param inputFile Optional: Input file to perform the operation on. (optional)
     * @param inputFileUrl Optional: URL of a file to operate on as input. (optional)
     * @param cssStyle Optional: The CSS style for the paragraph. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call editHtmlHtmlAppendParagraphCall(String paragraphText, File inputFile, String inputFileUrl, String cssStyle, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/convert/edit/html/append/paragraph";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (inputFileUrl != null)
        localVarHeaderParams.put("inputFileUrl", apiClient.parameterToString(inputFileUrl));
        if (paragraphText != null)
        localVarHeaderParams.put("paragraphText", apiClient.parameterToString(paragraphText));
        if (cssStyle != null)
        localVarHeaderParams.put("cssStyle", apiClient.parameterToString(cssStyle));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (inputFile != null)
        localVarFormParams.put("inputFile", inputFile);

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Apikey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call editHtmlHtmlAppendParagraphValidateBeforeCall(String paragraphText, File inputFile, String inputFileUrl, String cssStyle, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'paragraphText' is set
        if (paragraphText == null) {
            throw new ApiException("Missing the required parameter 'paragraphText' when calling editHtmlHtmlAppendParagraph(Async)");
        }
        

        com.squareup.okhttp.Call call = editHtmlHtmlAppendParagraphCall(paragraphText, inputFile, inputFileUrl, cssStyle, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Append a Paragraph to an HTML Document
     * Appends a paragraph to the end of an HTML document.
     * @param paragraphText The text content to be used in the paragraph. (required)
     * @param inputFile Optional: Input file to perform the operation on. (optional)
     * @param inputFileUrl Optional: URL of a file to operate on as input. (optional)
     * @param cssStyle Optional: The CSS style for the paragraph. (optional)
     * @return byte[]
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public byte[] editHtmlHtmlAppendParagraph(String paragraphText, File inputFile, String inputFileUrl, String cssStyle) throws ApiException {
        ApiResponse<byte[]> resp = editHtmlHtmlAppendParagraphWithHttpInfo(paragraphText, inputFile, inputFileUrl, cssStyle);
        return resp.getData();
    }

    /**
     * Append a Paragraph to an HTML Document
     * Appends a paragraph to the end of an HTML document.
     * @param paragraphText The text content to be used in the paragraph. (required)
     * @param inputFile Optional: Input file to perform the operation on. (optional)
     * @param inputFileUrl Optional: URL of a file to operate on as input. (optional)
     * @param cssStyle Optional: The CSS style for the paragraph. (optional)
     * @return ApiResponse&lt;byte[]&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<byte[]> editHtmlHtmlAppendParagraphWithHttpInfo(String paragraphText, File inputFile, String inputFileUrl, String cssStyle) throws ApiException {
        com.squareup.okhttp.Call call = editHtmlHtmlAppendParagraphValidateBeforeCall(paragraphText, inputFile, inputFileUrl, cssStyle, null, null);
        Type localVarReturnType = new TypeToken<byte[]>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Append a Paragraph to an HTML Document (asynchronously)
     * Appends a paragraph to the end of an HTML document.
     * @param paragraphText The text content to be used in the paragraph. (required)
     * @param inputFile Optional: Input file to perform the operation on. (optional)
     * @param inputFileUrl Optional: URL of a file to operate on as input. (optional)
     * @param cssStyle Optional: The CSS style for the paragraph. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call editHtmlHtmlAppendParagraphAsync(String paragraphText, File inputFile, String inputFileUrl, String cssStyle, final ApiCallback<byte[]> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = editHtmlHtmlAppendParagraphValidateBeforeCall(paragraphText, inputFile, inputFileUrl, cssStyle, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<byte[]>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for editHtmlHtmlCreateBlankDocument
     * @param title Optional: The title of the HTML document (optional)
     * @param cssUrl Optional: A CSS style URL to be added to the document. (optional)
     * @param cssInline Optional: An inline CSS style to be added to the document. (optional)
     * @param javascriptUrl Optional: Javascript URL to be added to the document. (optional)
     * @param javascriptInline Optional: Inline Javascript to be added to the document. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call editHtmlHtmlCreateBlankDocumentCall(String title, String cssUrl, String cssInline, String javascriptUrl, String javascriptInline, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/convert/edit/html/create/blank";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (title != null)
        localVarHeaderParams.put("title", apiClient.parameterToString(title));
        if (cssUrl != null)
        localVarHeaderParams.put("cssUrl", apiClient.parameterToString(cssUrl));
        if (cssInline != null)
        localVarHeaderParams.put("cssInline", apiClient.parameterToString(cssInline));
        if (javascriptUrl != null)
        localVarHeaderParams.put("javascriptUrl", apiClient.parameterToString(javascriptUrl));
        if (javascriptInline != null)
        localVarHeaderParams.put("javascriptInline", apiClient.parameterToString(javascriptInline));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Apikey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call editHtmlHtmlCreateBlankDocumentValidateBeforeCall(String title, String cssUrl, String cssInline, String javascriptUrl, String javascriptInline, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = editHtmlHtmlCreateBlankDocumentCall(title, cssUrl, cssInline, javascriptUrl, javascriptInline, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a Blank HTML Document
     * Returns a blank HTML Document format file.  The file is blank, with no contents by default.  Use the optional input parameters to add various starting elements.  Use additional editing commands such as Append Header, Append Paragraph or Append Image from URL to populate the document.
     * @param title Optional: The title of the HTML document (optional)
     * @param cssUrl Optional: A CSS style URL to be added to the document. (optional)
     * @param cssInline Optional: An inline CSS style to be added to the document. (optional)
     * @param javascriptUrl Optional: Javascript URL to be added to the document. (optional)
     * @param javascriptInline Optional: Inline Javascript to be added to the document. (optional)
     * @return byte[]
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public byte[] editHtmlHtmlCreateBlankDocument(String title, String cssUrl, String cssInline, String javascriptUrl, String javascriptInline) throws ApiException {
        ApiResponse<byte[]> resp = editHtmlHtmlCreateBlankDocumentWithHttpInfo(title, cssUrl, cssInline, javascriptUrl, javascriptInline);
        return resp.getData();
    }

    /**
     * Create a Blank HTML Document
     * Returns a blank HTML Document format file.  The file is blank, with no contents by default.  Use the optional input parameters to add various starting elements.  Use additional editing commands such as Append Header, Append Paragraph or Append Image from URL to populate the document.
     * @param title Optional: The title of the HTML document (optional)
     * @param cssUrl Optional: A CSS style URL to be added to the document. (optional)
     * @param cssInline Optional: An inline CSS style to be added to the document. (optional)
     * @param javascriptUrl Optional: Javascript URL to be added to the document. (optional)
     * @param javascriptInline Optional: Inline Javascript to be added to the document. (optional)
     * @return ApiResponse&lt;byte[]&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<byte[]> editHtmlHtmlCreateBlankDocumentWithHttpInfo(String title, String cssUrl, String cssInline, String javascriptUrl, String javascriptInline) throws ApiException {
        com.squareup.okhttp.Call call = editHtmlHtmlCreateBlankDocumentValidateBeforeCall(title, cssUrl, cssInline, javascriptUrl, javascriptInline, null, null);
        Type localVarReturnType = new TypeToken<byte[]>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a Blank HTML Document (asynchronously)
     * Returns a blank HTML Document format file.  The file is blank, with no contents by default.  Use the optional input parameters to add various starting elements.  Use additional editing commands such as Append Header, Append Paragraph or Append Image from URL to populate the document.
     * @param title Optional: The title of the HTML document (optional)
     * @param cssUrl Optional: A CSS style URL to be added to the document. (optional)
     * @param cssInline Optional: An inline CSS style to be added to the document. (optional)
     * @param javascriptUrl Optional: Javascript URL to be added to the document. (optional)
     * @param javascriptInline Optional: Inline Javascript to be added to the document. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call editHtmlHtmlCreateBlankDocumentAsync(String title, String cssUrl, String cssInline, String javascriptUrl, String javascriptInline, final ApiCallback<byte[]> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = editHtmlHtmlCreateBlankDocumentValidateBeforeCall(title, cssUrl, cssInline, javascriptUrl, javascriptInline, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<byte[]>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for editHtmlHtmlGetLanguage
     * @param inputFile Optional: Input file to perform the operation on. (optional)
     * @param inputFileUrl Optional: URL of a file to operate on as input. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call editHtmlHtmlGetLanguageCall(File inputFile, String inputFileUrl, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/convert/edit/html/head/get/language";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (inputFileUrl != null)
        localVarHeaderParams.put("inputFileUrl", apiClient.parameterToString(inputFileUrl));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (inputFile != null)
        localVarFormParams.put("inputFile", inputFile);

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Apikey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call editHtmlHtmlGetLanguageValidateBeforeCall(File inputFile, String inputFileUrl, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = editHtmlHtmlGetLanguageCall(inputFile, inputFileUrl, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Gets the language for the HTML document
     * Retrieves the language code (e.g. \&quot;en\&quot; or \&quot;de\&quot;) of an HTML document.
     * @param inputFile Optional: Input file to perform the operation on. (optional)
     * @param inputFileUrl Optional: URL of a file to operate on as input. (optional)
     * @return HtmlGetLanguageResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public HtmlGetLanguageResult editHtmlHtmlGetLanguage(File inputFile, String inputFileUrl) throws ApiException {
        ApiResponse<HtmlGetLanguageResult> resp = editHtmlHtmlGetLanguageWithHttpInfo(inputFile, inputFileUrl);
        return resp.getData();
    }

    /**
     * Gets the language for the HTML document
     * Retrieves the language code (e.g. \&quot;en\&quot; or \&quot;de\&quot;) of an HTML document.
     * @param inputFile Optional: Input file to perform the operation on. (optional)
     * @param inputFileUrl Optional: URL of a file to operate on as input. (optional)
     * @return ApiResponse&lt;HtmlGetLanguageResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<HtmlGetLanguageResult> editHtmlHtmlGetLanguageWithHttpInfo(File inputFile, String inputFileUrl) throws ApiException {
        com.squareup.okhttp.Call call = editHtmlHtmlGetLanguageValidateBeforeCall(inputFile, inputFileUrl, null, null);
        Type localVarReturnType = new TypeToken<HtmlGetLanguageResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets the language for the HTML document (asynchronously)
     * Retrieves the language code (e.g. \&quot;en\&quot; or \&quot;de\&quot;) of an HTML document.
     * @param inputFile Optional: Input file to perform the operation on. (optional)
     * @param inputFileUrl Optional: URL of a file to operate on as input. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call editHtmlHtmlGetLanguageAsync(File inputFile, String inputFileUrl, final ApiCallback<HtmlGetLanguageResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = editHtmlHtmlGetLanguageValidateBeforeCall(inputFile, inputFileUrl, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<HtmlGetLanguageResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for editHtmlHtmlGetLinks
     * @param inputFile Optional: Input file to perform the operation on. (optional)
     * @param inputFileUrl Optional: URL of a file to operate on as input. (optional)
     * @param baseUrl Optional: Base URL of the page, such as https://mydomain.com (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call editHtmlHtmlGetLinksCall(File inputFile, String inputFileUrl, String baseUrl, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/convert/edit/html/extract/links";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (inputFileUrl != null)
        localVarHeaderParams.put("inputFileUrl", apiClient.parameterToString(inputFileUrl));
        if (baseUrl != null)
        localVarHeaderParams.put("baseUrl", apiClient.parameterToString(baseUrl));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (inputFile != null)
        localVarFormParams.put("inputFile", inputFile);

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Apikey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call editHtmlHtmlGetLinksValidateBeforeCall(File inputFile, String inputFileUrl, String baseUrl, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = editHtmlHtmlGetLinksCall(inputFile, inputFileUrl, baseUrl, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Extract resolved link URLs from HTML File
     * Extracts the resolved link URLs, fully-qualified if possible, from an input HTML file.
     * @param inputFile Optional: Input file to perform the operation on. (optional)
     * @param inputFileUrl Optional: URL of a file to operate on as input. (optional)
     * @param baseUrl Optional: Base URL of the page, such as https://mydomain.com (optional)
     * @return HtmlGetLinksResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public HtmlGetLinksResponse editHtmlHtmlGetLinks(File inputFile, String inputFileUrl, String baseUrl) throws ApiException {
        ApiResponse<HtmlGetLinksResponse> resp = editHtmlHtmlGetLinksWithHttpInfo(inputFile, inputFileUrl, baseUrl);
        return resp.getData();
    }

    /**
     * Extract resolved link URLs from HTML File
     * Extracts the resolved link URLs, fully-qualified if possible, from an input HTML file.
     * @param inputFile Optional: Input file to perform the operation on. (optional)
     * @param inputFileUrl Optional: URL of a file to operate on as input. (optional)
     * @param baseUrl Optional: Base URL of the page, such as https://mydomain.com (optional)
     * @return ApiResponse&lt;HtmlGetLinksResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<HtmlGetLinksResponse> editHtmlHtmlGetLinksWithHttpInfo(File inputFile, String inputFileUrl, String baseUrl) throws ApiException {
        com.squareup.okhttp.Call call = editHtmlHtmlGetLinksValidateBeforeCall(inputFile, inputFileUrl, baseUrl, null, null);
        Type localVarReturnType = new TypeToken<HtmlGetLinksResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Extract resolved link URLs from HTML File (asynchronously)
     * Extracts the resolved link URLs, fully-qualified if possible, from an input HTML file.
     * @param inputFile Optional: Input file to perform the operation on. (optional)
     * @param inputFileUrl Optional: URL of a file to operate on as input. (optional)
     * @param baseUrl Optional: Base URL of the page, such as https://mydomain.com (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call editHtmlHtmlGetLinksAsync(File inputFile, String inputFileUrl, String baseUrl, final ApiCallback<HtmlGetLinksResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = editHtmlHtmlGetLinksValidateBeforeCall(inputFile, inputFileUrl, baseUrl, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<HtmlGetLinksResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for editHtmlHtmlGetRelCanonical
     * @param inputFile Optional: Input file to perform the operation on. (optional)
     * @param inputFileUrl Optional: URL of a file to operate on as input. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call editHtmlHtmlGetRelCanonicalCall(File inputFile, String inputFileUrl, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/convert/edit/html/head/get/rel-canonical-url";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (inputFileUrl != null)
        localVarHeaderParams.put("inputFileUrl", apiClient.parameterToString(inputFileUrl));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (inputFile != null)
        localVarFormParams.put("inputFile", inputFile);

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Apikey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call editHtmlHtmlGetRelCanonicalValidateBeforeCall(File inputFile, String inputFileUrl, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = editHtmlHtmlGetRelCanonicalCall(inputFile, inputFileUrl, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Gets the rel canonical URL for the HTML document
     * Gets the rel canonical URL of an HTML document.
     * @param inputFile Optional: Input file to perform the operation on. (optional)
     * @param inputFileUrl Optional: URL of a file to operate on as input. (optional)
     * @return HtmlGetRelCanonicalUrlResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public HtmlGetRelCanonicalUrlResult editHtmlHtmlGetRelCanonical(File inputFile, String inputFileUrl) throws ApiException {
        ApiResponse<HtmlGetRelCanonicalUrlResult> resp = editHtmlHtmlGetRelCanonicalWithHttpInfo(inputFile, inputFileUrl);
        return resp.getData();
    }

    /**
     * Gets the rel canonical URL for the HTML document
     * Gets the rel canonical URL of an HTML document.
     * @param inputFile Optional: Input file to perform the operation on. (optional)
     * @param inputFileUrl Optional: URL of a file to operate on as input. (optional)
     * @return ApiResponse&lt;HtmlGetRelCanonicalUrlResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<HtmlGetRelCanonicalUrlResult> editHtmlHtmlGetRelCanonicalWithHttpInfo(File inputFile, String inputFileUrl) throws ApiException {
        com.squareup.okhttp.Call call = editHtmlHtmlGetRelCanonicalValidateBeforeCall(inputFile, inputFileUrl, null, null);
        Type localVarReturnType = new TypeToken<HtmlGetRelCanonicalUrlResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets the rel canonical URL for the HTML document (asynchronously)
     * Gets the rel canonical URL of an HTML document.
     * @param inputFile Optional: Input file to perform the operation on. (optional)
     * @param inputFileUrl Optional: URL of a file to operate on as input. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call editHtmlHtmlGetRelCanonicalAsync(File inputFile, String inputFileUrl, final ApiCallback<HtmlGetRelCanonicalUrlResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = editHtmlHtmlGetRelCanonicalValidateBeforeCall(inputFile, inputFileUrl, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<HtmlGetRelCanonicalUrlResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for editHtmlHtmlGetSitemap
     * @param inputFile Optional: Input file to perform the operation on. (optional)
     * @param inputFileUrl Optional: URL of a file to operate on as input. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call editHtmlHtmlGetSitemapCall(File inputFile, String inputFileUrl, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/convert/edit/html/head/get/sitemap-url";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (inputFileUrl != null)
        localVarHeaderParams.put("inputFileUrl", apiClient.parameterToString(inputFileUrl));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (inputFile != null)
        localVarFormParams.put("inputFile", inputFile);

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Apikey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call editHtmlHtmlGetSitemapValidateBeforeCall(File inputFile, String inputFileUrl, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = editHtmlHtmlGetSitemapCall(inputFile, inputFileUrl, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Gets the sitemap URL for the HTML document
     * Gets the sitemap link URL of an HTML document.
     * @param inputFile Optional: Input file to perform the operation on. (optional)
     * @param inputFileUrl Optional: URL of a file to operate on as input. (optional)
     * @return HtmlGetSitemapUrlResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public HtmlGetSitemapUrlResult editHtmlHtmlGetSitemap(File inputFile, String inputFileUrl) throws ApiException {
        ApiResponse<HtmlGetSitemapUrlResult> resp = editHtmlHtmlGetSitemapWithHttpInfo(inputFile, inputFileUrl);
        return resp.getData();
    }

    /**
     * Gets the sitemap URL for the HTML document
     * Gets the sitemap link URL of an HTML document.
     * @param inputFile Optional: Input file to perform the operation on. (optional)
     * @param inputFileUrl Optional: URL of a file to operate on as input. (optional)
     * @return ApiResponse&lt;HtmlGetSitemapUrlResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<HtmlGetSitemapUrlResult> editHtmlHtmlGetSitemapWithHttpInfo(File inputFile, String inputFileUrl) throws ApiException {
        com.squareup.okhttp.Call call = editHtmlHtmlGetSitemapValidateBeforeCall(inputFile, inputFileUrl, null, null);
        Type localVarReturnType = new TypeToken<HtmlGetSitemapUrlResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets the sitemap URL for the HTML document (asynchronously)
     * Gets the sitemap link URL of an HTML document.
     * @param inputFile Optional: Input file to perform the operation on. (optional)
     * @param inputFileUrl Optional: URL of a file to operate on as input. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call editHtmlHtmlGetSitemapAsync(File inputFile, String inputFileUrl, final ApiCallback<HtmlGetSitemapUrlResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = editHtmlHtmlGetSitemapValidateBeforeCall(inputFile, inputFileUrl, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<HtmlGetSitemapUrlResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for editHtmlHtmlSetLanguage
     * @param languageCode The HTML langauge code to set. (required)
     * @param inputFile Optional: Input file to perform the operation on. (optional)
     * @param inputFileUrl Optional: URL of a file to operate on as input. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call editHtmlHtmlSetLanguageCall(String languageCode, File inputFile, String inputFileUrl, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/convert/edit/html/head/set/language";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (inputFileUrl != null)
        localVarHeaderParams.put("inputFileUrl", apiClient.parameterToString(inputFileUrl));
        if (languageCode != null)
        localVarHeaderParams.put("languageCode", apiClient.parameterToString(languageCode));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (inputFile != null)
        localVarFormParams.put("inputFile", inputFile);

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Apikey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call editHtmlHtmlSetLanguageValidateBeforeCall(String languageCode, File inputFile, String inputFileUrl, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'languageCode' is set
        if (languageCode == null) {
            throw new ApiException("Missing the required parameter 'languageCode' when calling editHtmlHtmlSetLanguage(Async)");
        }
        

        com.squareup.okhttp.Call call = editHtmlHtmlSetLanguageCall(languageCode, inputFile, inputFileUrl, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Sets the language for the HTML document
     * Sets the language code of an HTML document.
     * @param languageCode The HTML langauge code to set. (required)
     * @param inputFile Optional: Input file to perform the operation on. (optional)
     * @param inputFileUrl Optional: URL of a file to operate on as input. (optional)
     * @return byte[]
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public byte[] editHtmlHtmlSetLanguage(String languageCode, File inputFile, String inputFileUrl) throws ApiException {
        ApiResponse<byte[]> resp = editHtmlHtmlSetLanguageWithHttpInfo(languageCode, inputFile, inputFileUrl);
        return resp.getData();
    }

    /**
     * Sets the language for the HTML document
     * Sets the language code of an HTML document.
     * @param languageCode The HTML langauge code to set. (required)
     * @param inputFile Optional: Input file to perform the operation on. (optional)
     * @param inputFileUrl Optional: URL of a file to operate on as input. (optional)
     * @return ApiResponse&lt;byte[]&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<byte[]> editHtmlHtmlSetLanguageWithHttpInfo(String languageCode, File inputFile, String inputFileUrl) throws ApiException {
        com.squareup.okhttp.Call call = editHtmlHtmlSetLanguageValidateBeforeCall(languageCode, inputFile, inputFileUrl, null, null);
        Type localVarReturnType = new TypeToken<byte[]>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Sets the language for the HTML document (asynchronously)
     * Sets the language code of an HTML document.
     * @param languageCode The HTML langauge code to set. (required)
     * @param inputFile Optional: Input file to perform the operation on. (optional)
     * @param inputFileUrl Optional: URL of a file to operate on as input. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call editHtmlHtmlSetLanguageAsync(String languageCode, File inputFile, String inputFileUrl, final ApiCallback<byte[]> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = editHtmlHtmlSetLanguageValidateBeforeCall(languageCode, inputFile, inputFileUrl, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<byte[]>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for editHtmlHtmlSetRelCanonical
     * @param canonicalUrl The HTML canonical URL to set. (required)
     * @param inputFile Optional: Input file to perform the operation on. (optional)
     * @param inputFileUrl Optional: URL of a file to operate on as input. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call editHtmlHtmlSetRelCanonicalCall(String canonicalUrl, File inputFile, String inputFileUrl, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/convert/edit/html/head/set/rel-canonical-url";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (inputFileUrl != null)
        localVarHeaderParams.put("inputFileUrl", apiClient.parameterToString(inputFileUrl));
        if (canonicalUrl != null)
        localVarHeaderParams.put("canonicalUrl", apiClient.parameterToString(canonicalUrl));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (inputFile != null)
        localVarFormParams.put("inputFile", inputFile);

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Apikey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call editHtmlHtmlSetRelCanonicalValidateBeforeCall(String canonicalUrl, File inputFile, String inputFileUrl, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'canonicalUrl' is set
        if (canonicalUrl == null) {
            throw new ApiException("Missing the required parameter 'canonicalUrl' when calling editHtmlHtmlSetRelCanonical(Async)");
        }
        

        com.squareup.okhttp.Call call = editHtmlHtmlSetRelCanonicalCall(canonicalUrl, inputFile, inputFileUrl, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Sets the rel canonical URL for the HTML document
     * Sets the rel canonical URL of an HTML document.  This is useful for telling search engines and other indexers which pages are duplicates of eachother; any pages with the rel&#x3D;canonical tag will be treated as duplicates of the canonical URL.
     * @param canonicalUrl The HTML canonical URL to set. (required)
     * @param inputFile Optional: Input file to perform the operation on. (optional)
     * @param inputFileUrl Optional: URL of a file to operate on as input. (optional)
     * @return byte[]
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public byte[] editHtmlHtmlSetRelCanonical(String canonicalUrl, File inputFile, String inputFileUrl) throws ApiException {
        ApiResponse<byte[]> resp = editHtmlHtmlSetRelCanonicalWithHttpInfo(canonicalUrl, inputFile, inputFileUrl);
        return resp.getData();
    }

    /**
     * Sets the rel canonical URL for the HTML document
     * Sets the rel canonical URL of an HTML document.  This is useful for telling search engines and other indexers which pages are duplicates of eachother; any pages with the rel&#x3D;canonical tag will be treated as duplicates of the canonical URL.
     * @param canonicalUrl The HTML canonical URL to set. (required)
     * @param inputFile Optional: Input file to perform the operation on. (optional)
     * @param inputFileUrl Optional: URL of a file to operate on as input. (optional)
     * @return ApiResponse&lt;byte[]&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<byte[]> editHtmlHtmlSetRelCanonicalWithHttpInfo(String canonicalUrl, File inputFile, String inputFileUrl) throws ApiException {
        com.squareup.okhttp.Call call = editHtmlHtmlSetRelCanonicalValidateBeforeCall(canonicalUrl, inputFile, inputFileUrl, null, null);
        Type localVarReturnType = new TypeToken<byte[]>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Sets the rel canonical URL for the HTML document (asynchronously)
     * Sets the rel canonical URL of an HTML document.  This is useful for telling search engines and other indexers which pages are duplicates of eachother; any pages with the rel&#x3D;canonical tag will be treated as duplicates of the canonical URL.
     * @param canonicalUrl The HTML canonical URL to set. (required)
     * @param inputFile Optional: Input file to perform the operation on. (optional)
     * @param inputFileUrl Optional: URL of a file to operate on as input. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call editHtmlHtmlSetRelCanonicalAsync(String canonicalUrl, File inputFile, String inputFileUrl, final ApiCallback<byte[]> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = editHtmlHtmlSetRelCanonicalValidateBeforeCall(canonicalUrl, inputFile, inputFileUrl, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<byte[]>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for editHtmlHtmlSetSitemapUrl
     * @param sitemapUrl The HTML sitemap URL to set. (required)
     * @param inputFile Optional: Input file to perform the operation on. (optional)
     * @param inputFileUrl Optional: URL of a file to operate on as input. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call editHtmlHtmlSetSitemapUrlCall(String sitemapUrl, File inputFile, String inputFileUrl, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/convert/edit/html/head/set/sitemap-url";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (inputFileUrl != null)
        localVarHeaderParams.put("inputFileUrl", apiClient.parameterToString(inputFileUrl));
        if (sitemapUrl != null)
        localVarHeaderParams.put("sitemapUrl", apiClient.parameterToString(sitemapUrl));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (inputFile != null)
        localVarFormParams.put("inputFile", inputFile);

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Apikey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call editHtmlHtmlSetSitemapUrlValidateBeforeCall(String sitemapUrl, File inputFile, String inputFileUrl, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'sitemapUrl' is set
        if (sitemapUrl == null) {
            throw new ApiException("Missing the required parameter 'sitemapUrl' when calling editHtmlHtmlSetSitemapUrl(Async)");
        }
        

        com.squareup.okhttp.Call call = editHtmlHtmlSetSitemapUrlCall(sitemapUrl, inputFile, inputFileUrl, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Sets the sitemap URL for the HTML document
     * Sets the sitemap URL of an HTML document.
     * @param sitemapUrl The HTML sitemap URL to set. (required)
     * @param inputFile Optional: Input file to perform the operation on. (optional)
     * @param inputFileUrl Optional: URL of a file to operate on as input. (optional)
     * @return byte[]
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public byte[] editHtmlHtmlSetSitemapUrl(String sitemapUrl, File inputFile, String inputFileUrl) throws ApiException {
        ApiResponse<byte[]> resp = editHtmlHtmlSetSitemapUrlWithHttpInfo(sitemapUrl, inputFile, inputFileUrl);
        return resp.getData();
    }

    /**
     * Sets the sitemap URL for the HTML document
     * Sets the sitemap URL of an HTML document.
     * @param sitemapUrl The HTML sitemap URL to set. (required)
     * @param inputFile Optional: Input file to perform the operation on. (optional)
     * @param inputFileUrl Optional: URL of a file to operate on as input. (optional)
     * @return ApiResponse&lt;byte[]&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<byte[]> editHtmlHtmlSetSitemapUrlWithHttpInfo(String sitemapUrl, File inputFile, String inputFileUrl) throws ApiException {
        com.squareup.okhttp.Call call = editHtmlHtmlSetSitemapUrlValidateBeforeCall(sitemapUrl, inputFile, inputFileUrl, null, null);
        Type localVarReturnType = new TypeToken<byte[]>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Sets the sitemap URL for the HTML document (asynchronously)
     * Sets the sitemap URL of an HTML document.
     * @param sitemapUrl The HTML sitemap URL to set. (required)
     * @param inputFile Optional: Input file to perform the operation on. (optional)
     * @param inputFileUrl Optional: URL of a file to operate on as input. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call editHtmlHtmlSetSitemapUrlAsync(String sitemapUrl, File inputFile, String inputFileUrl, final ApiCallback<byte[]> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = editHtmlHtmlSetSitemapUrlValidateBeforeCall(sitemapUrl, inputFile, inputFileUrl, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<byte[]>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
