/*
 * convertapi
 * Convert API lets you effortlessly convert file formats and types.
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.cloudmersive.client;

import com.cloudmersive.client.model.CreateZipArchiveRequest;
import java.io.File;
import com.cloudmersive.client.model.ZipEncryptionAdvancedRequest;
import com.cloudmersive.client.model.ZipExtractResponse;
import org.junit.Test;
import org.junit.Ignore;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ZipArchiveApi
 */
@Ignore
public class ZipArchiveApiTest {

    private final ZipArchiveApi api = new ZipArchiveApi();

    
    /**
     * Compress files to create a new zip archive
     *
     * Create a new zip archive by compressing input files.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void zipArchiveZipCreateTest() throws Exception {
        File inputFile1 = null;
        File inputFile2 = null;
        File inputFile3 = null;
        File inputFile4 = null;
        File inputFile5 = null;
        File inputFile6 = null;
        File inputFile7 = null;
        File inputFile8 = null;
        File inputFile9 = null;
        File inputFile10 = null;
        byte[] response = api.zipArchiveZipCreate(inputFile1, inputFile2, inputFile3, inputFile4, inputFile5, inputFile6, inputFile7, inputFile8, inputFile9, inputFile10);

        // TODO: test validations
    }
    
    /**
     * Compress files and folders to create a new zip archive with advanced options
     *
     * Create a new zip archive by compressing input files, folders and leverage advanced options to control the structure of the resulting zip archive.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void zipArchiveZipCreateAdvancedTest() throws Exception {
        CreateZipArchiveRequest request = null;
        Object response = api.zipArchiveZipCreateAdvanced(request);

        // TODO: test validations
    }
    
    /**
     * Compress files to create a new, encrypted and password-protected zip archive
     *
     * Create a new zip archive by compressing input files, and also applies encryption and password protection to the zip.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void zipArchiveZipCreateEncryptedTest() throws Exception {
        String password = null;
        File inputFile1 = null;
        String encryptionAlgorithm = null;
        File inputFile2 = null;
        File inputFile3 = null;
        File inputFile4 = null;
        File inputFile5 = null;
        File inputFile6 = null;
        File inputFile7 = null;
        File inputFile8 = null;
        File inputFile9 = null;
        File inputFile10 = null;
        byte[] response = api.zipArchiveZipCreateEncrypted(password, inputFile1, encryptionAlgorithm, inputFile2, inputFile3, inputFile4, inputFile5, inputFile6, inputFile7, inputFile8, inputFile9, inputFile10);

        // TODO: test validations
    }
    
    /**
     * Create an encrypted zip file to quarantine a dangerous file
     *
     * Create a new zip archive by compressing input files, and also applies encryption and password protection to the zip, for the purposes of quarantining the underlyikng file.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void zipArchiveZipCreateQuarantineTest() throws Exception {
        String password = null;
        File inputFile1 = null;
        String encryptionAlgorithm = null;
        Object response = api.zipArchiveZipCreateQuarantine(password, inputFile1, encryptionAlgorithm);

        // TODO: test validations
    }
    
    /**
     * Decrypt and remove password protection on a zip file
     *
     * Decrypts and removes password protection from an encrypted zip file with the specified password
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void zipArchiveZipDecryptTest() throws Exception {
        File inputFile = null;
        String zipPassword = null;
        Object response = api.zipArchiveZipDecrypt(inputFile, zipPassword);

        // TODO: test validations
    }
    
    /**
     * Encrypt and password protect a zip file
     *
     * Encrypts and password protects an existing zip file with the specified password and encryption algorithm
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void zipArchiveZipEncryptAdvancedTest() throws Exception {
        ZipEncryptionAdvancedRequest encryptionRequest = null;
        Object response = api.zipArchiveZipEncryptAdvanced(encryptionRequest);

        // TODO: test validations
    }
    
    /**
     * Extract, decompress files and folders from a zip archive
     *
     * Extracts a zip archive by decompressing files, and folders.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void zipArchiveZipExtractTest() throws Exception {
        File inputFile = null;
        ZipExtractResponse response = api.zipArchiveZipExtract(inputFile);

        // TODO: test validations
    }
    
}
