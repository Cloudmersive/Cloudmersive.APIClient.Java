/*
 * securityapi
 * The security APIs help you detect and block security threats.
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.cloudmersive.client;

import com.cloudmersive.client.model.StringAutomaticThreatDetection;
import com.cloudmersive.client.model.StringInsecureDeserializationJsonDetection;
import com.cloudmersive.client.model.StringSqlInjectionDetectionResult;
import com.cloudmersive.client.model.StringXssProtectionResult;
import com.cloudmersive.client.model.StringXxeDetectionResult;
import org.junit.Test;
import org.junit.Ignore;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ContentThreatDetectionApi
 */
@Ignore
public class ContentThreatDetectionApiTest {

    private final ContentThreatDetectionApi api = new ContentThreatDetectionApi();

    
    /**
     * Automatically detect threats in an input string
     *
     * Auto-detects a wide range of threat types in input string, including Cross-Site Scripting (XSS), SQL Injection (SQLI), XML External Entitites (XXE), Server-side Request Forgeries (SSRF), and JSON Insecure Deserialization (JID).
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void contentThreatDetectionAutomaticThreatDetectionStringTest() throws Exception {
        String value = null;
        StringAutomaticThreatDetection response = api.contentThreatDetectionAutomaticThreatDetectionString(value);

        // TODO: test validations
    }
    
    /**
     * Check text input for SQL Injection (SQLI) attacks
     *
     * Detects SQL Injection (SQLI) attacks from text input.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void contentThreatDetectionCheckSqlInjectionStringTest() throws Exception {
        String value = null;
        StringSqlInjectionDetectionResult response = api.contentThreatDetectionCheckSqlInjectionString(value);

        // TODO: test validations
    }
    
    /**
     * Protect text input from XML External Entity (XXE) attacks
     *
     * Detects XXE (XML External Entity) attacks from XML text input.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void contentThreatDetectionCheckXxeTest() throws Exception {
        String value = null;
        StringXxeDetectionResult response = api.contentThreatDetectionCheckXxe(value);

        // TODO: test validations
    }
    
    /**
     * Detect Insecure Deserialization JSON (JID) attacks in a string
     *
     * Detects Insecure Deserialization JSON (JID) attacks from text input.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void contentThreatDetectionDetectInsecureDeserializationJsonStringTest() throws Exception {
        String value = null;
        StringInsecureDeserializationJsonDetection response = api.contentThreatDetectionDetectInsecureDeserializationJsonString(value);

        // TODO: test validations
    }
    
    /**
     * Protect text input from Cross-Site-Scripting (XSS) attacks through normalization
     *
     * Detects and removes XSS (Cross-Site-Scripting) attacks from text input through normalization.  Returns the normalized result, as well as information on whether the original input contained an XSS risk.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void contentThreatDetectionProtectXssTest() throws Exception {
        String value = null;
        StringXssProtectionResult response = api.contentThreatDetectionProtectXss(value);

        // TODO: test validations
    }
    
}
