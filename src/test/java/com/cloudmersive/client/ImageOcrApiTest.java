/*
 * ocrapi
 * The powerful Optical Character Recognition (OCR) APIs let you convert scanned images of pages into recognized text.
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.cloudmersive.client;

import com.cloudmersive.client.model.BusinessCardRecognitionResult;
import java.io.File;
import com.cloudmersive.client.model.FormRecognitionResult;
import com.cloudmersive.client.model.ImageToLinesWithLocationResult;
import com.cloudmersive.client.model.ImageToTextResponse;
import com.cloudmersive.client.model.ImageToWordsWithLocationResult;
import com.cloudmersive.client.model.PhotoToWordsWithLocationResult;
import com.cloudmersive.client.model.ReceiptRecognitionResult;
import org.junit.Test;
import org.junit.Ignore;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ImageOcrApi
 */
@Ignore
public class ImageOcrApiTest {

    private final ImageOcrApi api = new ImageOcrApi();

    
    /**
     * Convert a scanned image into words with location
     *
     * Converts an uploaded image in common formats such as JPEG, PNG into lines/text with location information and other metdata via Optical Character Recognition.  This API is intended to be run on scanned documents.  If you want to OCR photos (e.g. taken with a smart phone camera), be sure to use the photo/toText API instead, as it is designed to unskew the image first.  Note: for free tier API keys, it is required to add a credit card to your account for security reasons, to use the free tier key with this API.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void imageOcrImageLinesWithLocationTest() throws Exception {
        File imageFile = null;
        String language = null;
        String preprocessing = null;
        ImageToLinesWithLocationResult response = api.imageOcrImageLinesWithLocation(imageFile, language, preprocessing);

        // TODO: test validations
    }
    
    /**
     * Convert a scanned image into words with location
     *
     * Converts an uploaded image in common formats such as JPEG, PNG into words/text with location information and other metdata via Optical Character Recognition.  This API is intended to be run on scanned documents.  If you want to OCR photos (e.g. taken with a smart phone camera), be sure to use the photo/toText API instead, as it is designed to unskew the image first.  Note: for free tier API keys, it is required to add a credit card to your account for security reasons, to use the free tier key with this API.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void imageOcrImageWordsWithLocationTest() throws Exception {
        File imageFile = null;
        String language = null;
        String preprocessing = null;
        ImageToWordsWithLocationResult response = api.imageOcrImageWordsWithLocation(imageFile, language, preprocessing);

        // TODO: test validations
    }
    
    /**
     * Recognize a photo of a business card, extract key business information
     *
     * Analyzes a photograph of a business card as input, and outputs key business information such as the name of the person, name of the business, the address of the business, the phone number, the email address and more.  Note: for free tier API keys, it is required to add a credit card to your account for security reasons, to use the free tier key with this API.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void imageOcrPhotoRecognizeBusinessCardTest() throws Exception {
        File imageFile = null;
        BusinessCardRecognitionResult response = api.imageOcrPhotoRecognizeBusinessCard(imageFile);

        // TODO: test validations
    }
    
    /**
     * Recognize a photo of a form, extract key fields and business information
     *
     * Analyzes a photograph of a form as input, and outputs key business fields and information.  Customzie data to be extracted by defining fields for the form.  Note: for free tier API keys, it is required to add a credit card to your account for security reasons, to use the free tier key with this API.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void imageOcrPhotoRecognizeFormTest() throws Exception {
        File imageFile = null;
        Object formTemplateDefinition = null;
        String recognitionMode = null;
        String preprocessing = null;
        String diagnostics = null;
        String language = null;
        FormRecognitionResult response = api.imageOcrPhotoRecognizeForm(imageFile, formTemplateDefinition, recognitionMode, preprocessing, diagnostics, language);

        // TODO: test validations
    }
    
    /**
     * Recognize a photo of a form, extract key fields using stored templates
     *
     * Analyzes a photograph of a form as input, and outputs key business fields and information.  Customzie data to be extracted by defining fields for the form.  Uses template definitions stored in Cloudmersive Configuration; to configure stored templates in a configuration bucket, log into Cloudmersive Management Portal and navigate to Settings &amp;gt; API Configuration &amp;gt; Create Bucket.  Note: for free tier API keys, it is required to add a credit card to your account for security reasons, to use the free tier key with this API.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void imageOcrPhotoRecognizeFormAdvancedTest() throws Exception {
        File imageFile = null;
        String bucketID = null;
        String bucketSecretKey = null;
        String recognitionMode = null;
        String preprocessing = null;
        String diagnostics = null;
        FormRecognitionResult response = api.imageOcrPhotoRecognizeFormAdvanced(imageFile, bucketID, bucketSecretKey, recognitionMode, preprocessing, diagnostics);

        // TODO: test validations
    }
    
    /**
     * Recognize a photo of a receipt, extract key business information
     *
     * Analyzes a photograph of a receipt as input, and outputs key business information such as the name of the business, the address of the business, the phone number of the business, the total of the receipt, the date of the receipt, and more.  Note: for free tier API keys, it is required to add a credit card to your account for security reasons, to use the free tier key with this API.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void imageOcrPhotoRecognizeReceiptTest() throws Exception {
        File imageFile = null;
        String recognitionMode = null;
        String language = null;
        String preprocessing = null;
        ReceiptRecognitionResult response = api.imageOcrPhotoRecognizeReceipt(imageFile, recognitionMode, language, preprocessing);

        // TODO: test validations
    }
    
    /**
     * Convert a photo of a document into text
     *
     * Converts an uploaded photo of a document in common formats such as JPEG, PNG into text via Optical Character Recognition.  This API is intended to be run on photos of documents, e.g. taken with a smartphone and supports cases where other content, such as a desk, are in the frame and the camera is crooked.  If you want to OCR a scanned image, use the image/toText API call instead as it is designed for scanned images.  Note: for free tier API keys, it is required to add a credit card to your account for security reasons, to use the free tier key with this API.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void imageOcrPhotoToTextTest() throws Exception {
        File imageFile = null;
        String recognitionMode = null;
        String language = null;
        ImageToTextResponse response = api.imageOcrPhotoToText(imageFile, recognitionMode, language);

        // TODO: test validations
    }
    
    /**
     * Convert a photo of a document or receipt into words with location
     *
     * Converts a photo of a document or receipt in common formats such as JPEG, PNG into words/text with location information and other metdata via Optical Character Recognition.  This API is intended to be run on photographs of documents.  If you want to OCR scanned documents (e.g. taken with a scanner), be sure to use the image/toText API instead, as it is designed for that use case.  Note: for free tier API keys, it is required to add a credit card to your account for security reasons, to use the free tier key with this API.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void imageOcrPhotoWordsWithLocationTest() throws Exception {
        File imageFile = null;
        String recognitionMode = null;
        String language = null;
        String preprocessing = null;
        String diagnostics = null;
        PhotoToWordsWithLocationResult response = api.imageOcrPhotoWordsWithLocation(imageFile, recognitionMode, language, preprocessing, diagnostics);

        // TODO: test validations
    }
    
    /**
     * Convert a scanned image into text
     *
     * Converts an uploaded image in common formats such as JPEG, PNG into text via Optical Character Recognition.  This API is intended to be run on scanned documents.  If you want to OCR photos (e.g. taken with a smart phone camera), be sure to use the photo/toText API instead, as it is designed to unskew the image first.  Note: for free tier API keys, it is required to add a credit card to your account for security reasons, to use the free tier key with this API.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void imageOcrPostTest() throws Exception {
        File imageFile = null;
        String recognitionMode = null;
        String language = null;
        String preprocessing = null;
        ImageToTextResponse response = api.imageOcrPost(imageFile, recognitionMode, language, preprocessing);

        // TODO: test validations
    }
    
}
