/*
 * virusapi
 * The Cloudmersive Virus Scan API lets you scan files and content for viruses and identify security issues with content.
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.cloudmersive.client;

import java.io.File;
import com.cloudmersive.client.model.VirusScanAdvancedResult;
import com.cloudmersive.client.model.VirusScanResult;
import com.cloudmersive.client.model.WebsiteScanRequest;
import com.cloudmersive.client.model.WebsiteScanResult;
import org.junit.Test;
import org.junit.Ignore;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ScanApi
 */
@Ignore
public class ScanApiTest {

    private final ScanApi api = new ScanApi();

    
    /**
     * Scan a file for viruses
     *
     * Scan files and content for viruses. Leverage continuously updated signatures for millions of threats, and advanced high-performance scanning capabilities.  Over 17 million virus and malware signatures.  Continuous cloud-based updates.  Wide file format support including Office, PDF, HTML, Flash.  Zip support including .Zip, .Rar, .DMG, .Tar, and other archive formats.  Multi-threat scanning across viruses, malware, trojans, ransomware, and spyware.  High-speed in-memory scanning delivers subsecond typical response time.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void scanFileTest() throws Exception {
        File inputFile = null;
        VirusScanResult response = api.scanFile(inputFile);

        // TODO: test validations
    }
    
    /**
     * Advanced Scan a file for viruses
     *
     * Advanced Scan files with 360-degree Content Protection across Viruses and Malware, executables, invalid files, scripts, and even restrictions on accepted file types with complete content verification. Customize threat rules to your needs. Leverage continuously updated signatures for millions of threats, and advanced high-performance scanning capabilities.  Over 17 million virus and malware signatures.  Continuous cloud-based updates.  Block threats beyond viruses including executables, scripts, invalid files, and more.  Optionally limit input files to a specific set of file types (e.g. PDF and Word Documents only).  Wide file format support including Office, PDF, HTML, Flash, MSG, and a wide range of image file formats.  Zip support including .Zip, .Rar, .DMG, .Tar, and other archive formats.  Multi-threat scanning across viruses, malware, trojans, ransomware, and spyware.  High-speed in-memory scanning delivers subsecond typical response time.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void scanFileAdvancedTest() throws Exception {
        File inputFile = null;
        Boolean allowExecutables = null;
        Boolean allowInvalidFiles = null;
        Boolean allowScripts = null;
        Boolean allowPasswordProtectedFiles = null;
        Boolean allowMacros = null;
        Boolean allowXmlExternalEntities = null;
        Boolean allowInsecureDeserialization = null;
        Boolean allowHtml = null;
        String restrictFileTypes = null;
        VirusScanAdvancedResult response = api.scanFileAdvanced(inputFile, allowExecutables, allowInvalidFiles, allowScripts, allowPasswordProtectedFiles, allowMacros, allowXmlExternalEntities, allowInsecureDeserialization, allowHtml, restrictFileTypes);

        // TODO: test validations
    }
    
    /**
     * Scan a website for malicious content and threats
     *
     * Operation includes scanning the content of the URL for various types of malicious content and threats, including viruses and threats (including Phishing).
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void scanWebsiteTest() throws Exception {
        WebsiteScanRequest input = null;
        WebsiteScanResult response = api.scanWebsite(input);

        // TODO: test validations
    }
    
}
