/*
 * convertapi
 * Convert API lets you effortlessly convert file formats and types.
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.cloudmersive.client;

import com.cloudmersive.client.model.DocumentArrayInput;
import java.io.File;
import com.cloudmersive.client.model.MergeBatchJobCreateResult;
import com.cloudmersive.client.model.MergeJobStatusResult;
import org.junit.Test;
import org.junit.Ignore;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for MergeDocumentApi
 */
@Ignore
public class MergeDocumentApiTest {

    private final MergeDocumentApi api = new MergeDocumentApi();

    
    /**
     * Merge an array of Documents into a Single Document by Page as a Batch Job
     *
     * Merge an array of Documents (PDF supported), into a single document.  This API is designed for large jobs that could take a long time to create and so runs as a batch job that returns a Job ID that you can use with the GetAsyncJobStatus API to check on the status of the Job and ultimately get the output result.  This API automatically detects the document type and then performs the split by using the document type-specific API needed to perform the split.  This API is only available for Cloudmersive Managed Instance and Private Cloud deployments.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void mergeDocumentBatchJobCreateTest() throws Exception {
        DocumentArrayInput input = null;
        MergeBatchJobCreateResult response = api.mergeDocumentBatchJobCreate(input);

        // TODO: test validations
    }
    
    /**
     * Merge Two Word DOCX Together
     *
     * Combine two Office Word Documents (docx) into one single Office Word document
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void mergeDocumentDocxTest() throws Exception {
        File inputFile1 = null;
        File inputFile2 = null;
        byte[] response = api.mergeDocumentDocx(inputFile1, inputFile2);

        // TODO: test validations
    }
    
    /**
     * Merge Multple Word DOCX Together
     *
     * Combine multiple Office Word Documents (docx) into one single Office Word document
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void mergeDocumentDocxMultiTest() throws Exception {
        File inputFile1 = null;
        File inputFile2 = null;
        File inputFile3 = null;
        File inputFile4 = null;
        File inputFile5 = null;
        File inputFile6 = null;
        File inputFile7 = null;
        File inputFile8 = null;
        File inputFile9 = null;
        File inputFile10 = null;
        byte[] response = api.mergeDocumentDocxMulti(inputFile1, inputFile2, inputFile3, inputFile4, inputFile5, inputFile6, inputFile7, inputFile8, inputFile9, inputFile10);

        // TODO: test validations
    }
    
    /**
     * Merge Multple Word DOCX Together from an array
     *
     * Combine multiple Office Word Documents (docx), stored in an array, into one single Office Word document
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void mergeDocumentDocxMultiArrayTest() throws Exception {
        DocumentArrayInput input = null;
        Object response = api.mergeDocumentDocxMultiArray(input);

        // TODO: test validations
    }
    
    /**
     * Get the status and result of a Merge Document Batch Job
     *
     * Returns the result of the Async Job - possible states can be STARTED or COMPLETED.  This API is only available for Cloudmersive Managed Instance and Private Cloud deployments.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void mergeDocumentGetAsyncJobStatusTest() throws Exception {
        String asyncJobID = null;
        MergeJobStatusResult response = api.mergeDocumentGetAsyncJobStatus(asyncJobID);

        // TODO: test validations
    }
    
    /**
     * Merge Two HTML (HTM) Files Together
     *
     * Combine two HTML (.HTM) files into a single text document, preserving the order of the input documents in the combined document by stacking them vertically.  The title will be taken from the first document.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void mergeDocumentHtmlTest() throws Exception {
        File inputFile1 = null;
        File inputFile2 = null;
        byte[] response = api.mergeDocumentHtml(inputFile1, inputFile2);

        // TODO: test validations
    }
    
    /**
     * Merge Multple HTML (HTM) Files Together
     *
     * Combine multiple HTML (.HTM) files into a single text document, preserving the order of the input documents in the combined document by stacking them vertically.  The title will be taken from the first document.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void mergeDocumentHtmlMultiTest() throws Exception {
        File inputFile1 = null;
        File inputFile2 = null;
        File inputFile3 = null;
        File inputFile4 = null;
        File inputFile5 = null;
        File inputFile6 = null;
        File inputFile7 = null;
        File inputFile8 = null;
        File inputFile9 = null;
        File inputFile10 = null;
        byte[] response = api.mergeDocumentHtmlMulti(inputFile1, inputFile2, inputFile3, inputFile4, inputFile5, inputFile6, inputFile7, inputFile8, inputFile9, inputFile10);

        // TODO: test validations
    }
    
    /**
     * Merge Multple HTML (HTM) Files Together from an array
     *
     * Combine multiple HTML (.HTM) files, from an array, into a single text document, preserving the order of the input documents in the combined document by stacking them vertically.  The title will be taken from the first document.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void mergeDocumentHtmlMultiArrayTest() throws Exception {
        DocumentArrayInput input = null;
        Object response = api.mergeDocumentHtmlMultiArray(input);

        // TODO: test validations
    }
    
    /**
     * Merge Two PDF Files Together
     *
     * Combine two PDF files (pdf) into a single PDF document, preserving the order of the input documents in the combined document
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void mergeDocumentPdfTest() throws Exception {
        File inputFile1 = null;
        File inputFile2 = null;
        byte[] response = api.mergeDocumentPdf(inputFile1, inputFile2);

        // TODO: test validations
    }
    
    /**
     * Merge Multple PDF Files Together
     *
     * Combine multiple PDF files (pdf) into a single PDF document, preserving the order of the input documents in the combined document
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void mergeDocumentPdfMultiTest() throws Exception {
        File inputFile1 = null;
        File inputFile2 = null;
        File inputFile3 = null;
        File inputFile4 = null;
        File inputFile5 = null;
        File inputFile6 = null;
        File inputFile7 = null;
        File inputFile8 = null;
        File inputFile9 = null;
        File inputFile10 = null;
        byte[] response = api.mergeDocumentPdfMulti(inputFile1, inputFile2, inputFile3, inputFile4, inputFile5, inputFile6, inputFile7, inputFile8, inputFile9, inputFile10);

        // TODO: test validations
    }
    
    /**
     * Merge Multple PDF Files Together from an array
     *
     * Combine multiple PDF files (pdf), as an array, into a single PDF document, preserving the order of the input documents in the combined document
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void mergeDocumentPdfMultiArrayTest() throws Exception {
        DocumentArrayInput input = null;
        Object response = api.mergeDocumentPdfMultiArray(input);

        // TODO: test validations
    }
    
    /**
     * Merge Two PNG Files Together
     *
     * Combine two PNG files into a single PNG document, preserving the order of the input documents in the combined document by stacking them vertically
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void mergeDocumentPngTest() throws Exception {
        File inputFile1 = null;
        File inputFile2 = null;
        byte[] response = api.mergeDocumentPng(inputFile1, inputFile2);

        // TODO: test validations
    }
    
    /**
     * Merge Multple PNG Files Together
     *
     * Combine multiple PNG files into a single PNG document, preserving the order of the input documents in the combined document by stacking them vertically
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void mergeDocumentPngMultiTest() throws Exception {
        File inputFile1 = null;
        File inputFile2 = null;
        File inputFile3 = null;
        File inputFile4 = null;
        File inputFile5 = null;
        File inputFile6 = null;
        File inputFile7 = null;
        File inputFile8 = null;
        File inputFile9 = null;
        File inputFile10 = null;
        byte[] response = api.mergeDocumentPngMulti(inputFile1, inputFile2, inputFile3, inputFile4, inputFile5, inputFile6, inputFile7, inputFile8, inputFile9, inputFile10);

        // TODO: test validations
    }
    
    /**
     * Merge Multple PNG Files Together from an array
     *
     * Combine multiple PNG files, from an array, into a single PNG document, preserving the order of the input documents in the combined document by stacking them vertically
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void mergeDocumentPngMultiArrayTest() throws Exception {
        DocumentArrayInput input = null;
        Object response = api.mergeDocumentPngMultiArray(input);

        // TODO: test validations
    }
    
    /**
     * Merge Two PowerPoint PPTX Together
     *
     * Combine two Office PowerPoint presentations (pptx) into one single Office PowerPoint presentation
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void mergeDocumentPptxTest() throws Exception {
        File inputFile1 = null;
        File inputFile2 = null;
        byte[] response = api.mergeDocumentPptx(inputFile1, inputFile2);

        // TODO: test validations
    }
    
    /**
     * Merge Multple PowerPoint PPTX Together
     *
     * Combine multiple Office PowerPoint presentations (pptx) into one single Office PowerPoint presentation
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void mergeDocumentPptxMultiTest() throws Exception {
        File inputFile1 = null;
        File inputFile2 = null;
        File inputFile3 = null;
        File inputFile4 = null;
        File inputFile5 = null;
        File inputFile6 = null;
        File inputFile7 = null;
        File inputFile8 = null;
        File inputFile9 = null;
        File inputFile10 = null;
        byte[] response = api.mergeDocumentPptxMulti(inputFile1, inputFile2, inputFile3, inputFile4, inputFile5, inputFile6, inputFile7, inputFile8, inputFile9, inputFile10);

        // TODO: test validations
    }
    
    /**
     * Merge Multple PowerPoint PPTX Together from an array
     *
     * Combine multiple Office PowerPoint presentations (pptx), from an array, into one single Office PowerPoint presentation
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void mergeDocumentPptxMultiArrayTest() throws Exception {
        DocumentArrayInput input = null;
        Object response = api.mergeDocumentPptxMultiArray(input);

        // TODO: test validations
    }
    
    /**
     * Merge Two Text (TXT) Files Together
     *
     * Combine two Text (.TXT) files into a single text document, preserving the order of the input documents in the combined document by stacking them vertically.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void mergeDocumentTxtTest() throws Exception {
        File inputFile1 = null;
        File inputFile2 = null;
        Object response = api.mergeDocumentTxt(inputFile1, inputFile2);

        // TODO: test validations
    }
    
    /**
     * Merge Multple Text (TXT) Files Together
     *
     * Combine multiple Text (.TXT) files into a single text document, preserving the order of the input documents in the combined document by stacking them vertically.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void mergeDocumentTxtMultiTest() throws Exception {
        File inputFile1 = null;
        File inputFile2 = null;
        File inputFile3 = null;
        File inputFile4 = null;
        File inputFile5 = null;
        File inputFile6 = null;
        File inputFile7 = null;
        File inputFile8 = null;
        File inputFile9 = null;
        File inputFile10 = null;
        byte[] response = api.mergeDocumentTxtMulti(inputFile1, inputFile2, inputFile3, inputFile4, inputFile5, inputFile6, inputFile7, inputFile8, inputFile9, inputFile10);

        // TODO: test validations
    }
    
    /**
     * Merge Two Excel XLSX Together
     *
     * Combine two Office Excel spreadsheets (xlsx) into a single Office Excel spreadsheet
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void mergeDocumentXlsxTest() throws Exception {
        File inputFile1 = null;
        File inputFile2 = null;
        byte[] response = api.mergeDocumentXlsx(inputFile1, inputFile2);

        // TODO: test validations
    }
    
    /**
     * Merge Multple Excel XLSX Together
     *
     * Combine multiple Office Excel spreadsheets (xlsx) into a single Office Excel spreadsheet
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void mergeDocumentXlsxMultiTest() throws Exception {
        File inputFile1 = null;
        File inputFile2 = null;
        File inputFile3 = null;
        File inputFile4 = null;
        File inputFile5 = null;
        File inputFile6 = null;
        File inputFile7 = null;
        File inputFile8 = null;
        File inputFile9 = null;
        File inputFile10 = null;
        byte[] response = api.mergeDocumentXlsxMulti(inputFile1, inputFile2, inputFile3, inputFile4, inputFile5, inputFile6, inputFile7, inputFile8, inputFile9, inputFile10);

        // TODO: test validations
    }
    
    /**
     * Merge Multple Excel XLSX Together from an Array
     *
     * Combine multiple Office Excel spreadsheets (xlsx), as an array, into a single Office Excel spreadsheet
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void mergeDocumentXlsxMultiArrayTest() throws Exception {
        DocumentArrayInput input = null;
        Object response = api.mergeDocumentXlsxMultiArray(input);

        // TODO: test validations
    }
    
}
