/*
 * validateapi
 * The validation APIs help you validate data. Check if an E-mail address is real. Check if a domain is real. Check up on an IP address, and even where it is located. All this and much more is available in the validation API.
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.cloudmersive.client;

import com.cloudmersive.client.invoker.ApiException;
import com.cloudmersive.client.model.SqlInjectionCheckBatchRequest;
import com.cloudmersive.client.model.SqlInjectionCheckBatchResponse;
import com.cloudmersive.client.model.SqlInjectionDetectionResult;
import com.cloudmersive.client.model.XssProtectionBatchRequest;
import com.cloudmersive.client.model.XssProtectionBatchResponse;
import com.cloudmersive.client.model.XssProtectionResult;
import com.cloudmersive.client.model.XxeDetectionBatchRequest;
import com.cloudmersive.client.model.XxeDetectionBatchResponse;
import com.cloudmersive.client.model.XxeDetectionResult;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TextInputApi
 */
@Ignore
public class TextInputApiTest {

    private final TextInputApi api = new TextInputApi();

    
    /**
     * Check text input for SQL Injection (SQLI) attacks
     *
     * Detects SQL Injection (SQLI) attacks from text input.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void textInputCheckSqlInjectionTest() throws ApiException {
        String value = null;
        String detectionLevel = null;
        SqlInjectionDetectionResult response = api.textInputCheckSqlInjection(value, detectionLevel);

        // TODO: test validations
    }
    
    /**
     * Check and protect multiple text inputs for SQL Injection (SQLI) attacks in batch
     *
     * Detects SQL Injection (SQLI) attacks from multiple text inputs.  Output preverses order of input items.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void textInputCheckSqlInjectionBatchTest() throws ApiException {
        SqlInjectionCheckBatchRequest value = null;
        SqlInjectionCheckBatchResponse response = api.textInputCheckSqlInjectionBatch(value);

        // TODO: test validations
    }
    
    /**
     * Check text input for Cross-Site-Scripting (XSS) attacks
     *
     * Detects XSS (Cross-Site-Scripting) attacks from text input.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void textInputCheckXssTest() throws ApiException {
        String value = null;
        XssProtectionResult response = api.textInputCheckXss(value);

        // TODO: test validations
    }
    
    /**
     * Check and protect multiple text inputs for Cross-Site-Scripting (XSS) attacks in batch
     *
     * Detects XSS (Cross-Site-Scripting) attacks from multiple text inputs.  Output preverses order of input items.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void textInputCheckXssBatchTest() throws ApiException {
        XssProtectionBatchRequest value = null;
        XssProtectionBatchResponse response = api.textInputCheckXssBatch(value);

        // TODO: test validations
    }
    
    /**
     * Protect text input from XML External Entity (XXE) attacks
     *
     * Detects XXE (XML External Entity) attacks from text input.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void textInputCheckXxeTest() throws ApiException {
        String value = null;
        Boolean allowInternetUrls = null;
        String knownSafeUrls = null;
        String knownUnsafeUrls = null;
        XxeDetectionResult response = api.textInputCheckXxe(value, allowInternetUrls, knownSafeUrls, knownUnsafeUrls);

        // TODO: test validations
    }
    
    /**
     * Protect text input from XML External Entity (XXE) attacks
     *
     * Detects XXE (XML External Entity) attacks from text input.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void textInputCheckXxeBatchTest() throws ApiException {
        XxeDetectionBatchRequest request = null;
        XxeDetectionBatchResponse response = api.textInputCheckXxeBatch(request);

        // TODO: test validations
    }
    
    /**
     * Protect text input from Cross-Site-Scripting (XSS) attacks through normalization
     *
     * Detects and removes XSS (Cross-Site-Scripting) attacks from text input through normalization.  Returns the normalized result, as well as information on whether the original input contained an XSS risk.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void textInputProtectXssTest() throws ApiException {
        String value = null;
        XssProtectionResult response = api.textInputProtectXss(value);

        // TODO: test validations
    }
    
}
